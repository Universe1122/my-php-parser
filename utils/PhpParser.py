# Generated from PhpParser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00f6")
        buf.write("\u079d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\3\2\5\2\u0118\n\2\3\2\3\2\7\2\u011c\n\2\f\2\16")
        buf.write("\2\u011f\13\2\3\2\3\2\3\3\6\3\u0124\n\3\r\3\16\3\u0125")
        buf.write("\3\3\5\3\u0129\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\7")
        buf.write("\4\u0141\n\4\f\4\16\4\u0144\13\4\3\4\5\4\u0147\n\4\3\5")
        buf.write("\6\5\u014a\n\5\r\5\16\5\u014b\3\6\7\6\u014f\n\6\f\6\16")
        buf.write("\6\u0152\13\6\3\6\6\6\u0155\n\6\r\6\16\6\u0156\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0165\n\b")
        buf.write("\3\t\3\t\5\t\u0169\n\t\3\t\3\t\3\t\3\n\5\n\u016f\n\n\3")
        buf.write("\n\3\n\3\n\5\n\u0174\n\n\3\n\7\n\u0177\n\n\f\n\16\n\u017a")
        buf.write("\13\n\3\13\3\13\3\f\3\f\5\f\u0180\n\f\3\f\3\f\7\f\u0184")
        buf.write("\n\f\f\f\16\f\u0187\13\f\3\f\3\f\3\f\3\f\5\f\u018d\n\f")
        buf.write("\3\r\3\r\3\r\3\r\3\r\5\r\u0194\n\r\3\16\5\16\u0197\n\16")
        buf.write("\3\16\3\16\5\16\u019b\n\16\3\16\3\16\5\16\u019f\n\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\5\16\u01a6\n\16\3\16\5\16\u01a9")
        buf.write("\n\16\3\16\3\16\3\17\5\17\u01ae\n\17\3\17\5\17\u01b1\n")
        buf.write("\17\3\17\5\17\u01b4\n\17\3\17\5\17\u01b7\n\17\3\17\3\17")
        buf.write("\3\17\5\17\u01bc\n\17\3\17\3\17\5\17\u01c0\n\17\3\17\3")
        buf.write("\17\5\17\u01c4\n\17\3\17\3\17\3\17\5\17\u01c9\n\17\3\17")
        buf.write("\3\17\5\17\u01cd\n\17\5\17\u01cf\n\17\3\17\3\17\7\17\u01d3")
        buf.write("\n\17\f\17\16\17\u01d6\13\17\3\17\3\17\3\20\3\20\3\21")
        buf.write("\3\21\3\21\7\21\u01df\n\21\f\21\16\21\u01e2\13\21\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\5\22\u01f2\n\22\3\23\3\23\3\23\7\23\u01f7\n")
        buf.write("\23\f\23\16\23\u01fa\13\23\3\24\3\24\3\24\7\24\u01ff\n")
        buf.write("\24\f\24\16\24\u0202\13\24\3\25\5\25\u0205\n\25\3\25\3")
        buf.write("\25\3\26\5\26\u020a\n\26\3\26\3\26\3\26\3\26\5\26\u0210")
        buf.write("\n\26\3\27\3\27\3\27\3\27\7\27\u0216\n\27\f\27\16\27\u0219")
        buf.write("\13\27\3\27\3\27\3\30\6\30\u021e\n\30\r\30\16\30\u021f")
        buf.write("\3\31\3\31\3\31\3\31\5\31\u0226\n\31\3\31\3\31\3\31\7")
        buf.write("\31\u022b\n\31\f\31\16\31\u022e\13\31\3\31\3\31\3\32\3")
        buf.write("\32\5\32\u0234\n\32\3\33\7\33\u0237\n\33\f\33\16\33\u023a")
        buf.write("\13\33\3\34\3\34\3\34\5\34\u023f\n\34\3\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\5\35\u025c\n\35\3\36\3\36\3\37\3\37\3\37\3")
        buf.write("\37\3 \3 \3 \3 \7 \u0268\n \f \16 \u026b\13 \3 \5 \u026e")
        buf.write("\n \3 \3 \3 \3 \3 \7 \u0275\n \f \16 \u0278\13 \3 \5 ")
        buf.write("\u027b\n \3 \3 \3 \5 \u0280\n \3!\3!\3!\3!\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3#\3#\3#\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%")
        buf.write("\5%\u029a\n%\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\5\'\u02a5\n")
        buf.write("\'\3\'\3\'\5\'\u02a9\n\'\3\'\3\'\5\'\u02ad\n\'\3\'\3\'")
        buf.write("\3\'\3\'\3\'\3\'\3\'\5\'\u02b6\n\'\3(\3(\3)\3)\3*\3*\3")
        buf.write("*\3*\5*\u02c0\n*\3*\7*\u02c3\n*\f*\16*\u02c6\13*\3*\3")
        buf.write("*\3*\5*\u02cb\n*\3*\7*\u02ce\n*\f*\16*\u02d1\13*\3*\3")
        buf.write("*\5*\u02d5\n*\3+\3+\3+\5+\u02da\n+\3+\6+\u02dd\n+\r+\16")
        buf.write("+\u02de\3+\3+\3,\3,\5,\u02e5\n,\3,\3,\3-\3-\5-\u02eb\n")
        buf.write("-\3-\3-\3.\3.\5.\u02f1\n.\3.\3.\3/\3/\3/\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\5\61\u0309\n\61\3\61\3\61\3\61\5\61\u030e")
        buf.write("\n\61\3\61\5\61\u0311\n\61\3\61\3\61\3\61\3\61\3\61\3")
        buf.write("\61\3\61\3\61\5\61\u031b\n\61\3\61\5\61\u031e\n\61\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61")
        buf.write("\u032b\n\61\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u0333\n")
        buf.write("\61\3\62\3\62\3\62\6\62\u0338\n\62\r\62\16\62\u0339\3")
        buf.write("\62\5\62\u033d\n\62\3\62\7\62\u0340\n\62\f\62\16\62\u0343")
        buf.write("\13\62\3\62\5\62\u0346\n\62\3\63\3\63\3\63\3\63\3\63\7")
        buf.write("\63\u034d\n\63\f\63\16\63\u0350\13\63\3\63\5\63\u0353")
        buf.write("\n\63\3\63\3\63\3\63\3\64\3\64\3\64\3\65\3\65\3\65\3\65")
        buf.write("\3\66\3\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\5\67\u036d\n\67\38\68\u0370\n8\r8\168")
        buf.write("\u0371\39\39\39\79\u0377\n9\f9\169\u037a\139\3:\3:\3:")
        buf.write("\3:\5:\u0380\n:\3:\3:\3:\3:\3:\3:\5:\u0388\n:\3;\5;\u038b")
        buf.write("\n;\3;\3;\7;\u038f\n;\f;\16;\u0392\13;\3;\5;\u0395\n;")
        buf.write("\3<\5<\u0398\n<\3<\7<\u039b\n<\f<\16<\u039e\13<\3<\5<")
        buf.write("\u03a1\n<\3<\5<\u03a4\n<\3<\5<\u03a7\n<\3<\5<\u03aa\n")
        buf.write("<\3<\3<\3=\3=\3=\3=\5=\u03b2\n=\3=\3=\3=\7=\u03b7\n=\f")
        buf.write("=\16=\u03ba\13=\3>\3>\3>\3>\7>\u03c0\n>\f>\16>\u03c3\13")
        buf.write(">\3>\3>\3?\3?\3?\3?\3?\3?\3?\3?\5?\u03cf\n?\3@\3@\3@\3")
        buf.write("@\3A\3A\3A\3A\7A\u03d9\nA\fA\16A\u03dc\13A\3A\3A\3B\5")
        buf.write("B\u03e1\nB\3B\3B\5B\u03e5\nB\3B\3B\3B\7B\u03ea\nB\fB\16")
        buf.write("B\u03ed\13B\3B\3B\3B\5B\u03f2\nB\3B\3B\5B\u03f6\nB\3B")
        buf.write("\3B\3B\7B\u03fb\nB\fB\16B\u03fe\13B\3B\3B\3B\3B\5B\u0404")
        buf.write("\nB\3B\3B\5B\u0408\nB\3B\3B\3B\3B\3B\5B\u040f\nB\3B\3")
        buf.write("B\5B\u0413\nB\5B\u0415\nB\3B\3B\3B\3B\5B\u041b\nB\3C\3")
        buf.write("C\3C\7C\u0420\nC\fC\16C\u0423\13C\3C\5C\u0426\nC\3D\3")
        buf.write("D\5D\u042a\nD\3E\3E\3E\3E\3E\3E\3E\3F\3F\3F\3F\5F\u0437")
        buf.write("\nF\3F\5F\u043a\nF\3F\3F\3G\3G\3G\5G\u0441\nG\3G\3G\3")
        buf.write("H\3H\3H\5H\u0448\nH\3I\3I\5I\u044c\nI\3I\3I\3J\3J\5J\u0452")
        buf.write("\nJ\3K\3K\5K\u0456\nK\3L\6L\u0459\nL\rL\16L\u045a\3M\3")
        buf.write("M\3M\5M\u0460\nM\3N\3N\3N\3N\3O\5O\u0467\nO\3O\3O\3O\3")
        buf.write("O\7O\u046d\nO\fO\16O\u0470\13O\3O\3O\3P\3P\3P\3P\5P\u0478")
        buf.write("\nP\3P\3P\5P\u047c\nP\3P\3P\7P\u0480\nP\fP\16P\u0483\13")
        buf.write("P\3P\3P\3Q\3Q\3Q\3Q\5Q\u048b\nQ\3Q\3Q\3Q\5Q\u0490\nQ\3")
        buf.write("Q\3Q\3Q\3Q\3Q\5Q\u0497\nQ\3R\3R\3R\7R\u049c\nR\fR\16R")
        buf.write("\u049f\13R\3S\3S\3S\5S\u04a4\nS\3S\3S\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\5")
        buf.write("T\u04e3\nT\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\5T\u04f4\nT\3T\3T\3T\3T\3T\5T\u04fb\nT\3T\3T\3T\5T\u0500")
        buf.write("\nT\5T\u0502\nT\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\3T\3T\3T\3T\5T\u0528\nT\3T\3T\3T\3T\3T\3T\3T\3T\3")
        buf.write("T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\7T\u053e\nT\fT\16T")
        buf.write("\u0541\13T\3U\3U\5U\u0545\nU\3V\3V\3V\5V\u054a\nV\3V\3")
        buf.write("V\3V\5V\u054f\nV\3V\5V\u0552\nV\3V\3V\3V\3V\5V\u0558\n")
        buf.write("V\3W\3W\7W\u055c\nW\fW\16W\u055f\13W\3W\3W\6W\u0563\n")
        buf.write("W\rW\16W\u0564\3W\7W\u0568\nW\fW\16W\u056b\13W\3W\7W\u056e")
        buf.write("\nW\fW\16W\u0571\13W\3W\3W\3W\3W\3W\6W\u0578\nW\rW\16")
        buf.write("W\u0579\3W\7W\u057d\nW\fW\16W\u0580\13W\3W\5W\u0583\n")
        buf.write("W\3W\3W\5W\u0587\nW\3X\5X\u058a\nX\3X\3X\3Y\3Y\3Y\5Y\u0591")
        buf.write("\nY\3Y\5Y\u0594\nY\3Y\3Y\3Z\5Z\u0599\nZ\3Z\3Z\5Z\u059d")
        buf.write("\nZ\3Z\3Z\3Z\3Z\5Z\u05a3\nZ\3Z\3Z\5Z\u05a7\nZ\3Z\3Z\3")
        buf.write("Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u05b2\nZ\3[\3[\3[\3[\3[\3[\3[\3")
        buf.write("[\7[\u05bc\n[\f[\16[\u05bf\13[\3[\5[\u05c2\n[\3[\3[\3")
        buf.write("\\\3\\\3\\\7\\\u05c9\n\\\f\\\16\\\u05cc\13\\\3\\\3\\\3")
        buf.write("\\\3]\3]\3]\5]\u05d4\n]\3^\3^\3_\3_\3_\3_\5_\u05dc\n_")
        buf.write("\3_\3_\5_\u05e0\n_\3`\3`\3`\7`\u05e5\n`\f`\16`\u05e8\13")
        buf.write("`\3`\5`\u05eb\n`\3a\3a\3a\5a\u05f0\na\3a\3a\3a\5a\u05f5")
        buf.write("\na\3a\3a\5a\u05f9\na\3b\3b\3b\3b\3b\7b\u0600\nb\fb\16")
        buf.write("b\u0603\13b\3b\3b\3c\5c\u0608\nc\3c\3c\3d\3d\5d\u060e")
        buf.write("\nd\3d\5d\u0611\nd\3e\3e\5e\u0615\ne\3e\5e\u0618\ne\3")
        buf.write("e\3e\3e\5e\u061d\ne\3f\5f\u0620\nf\3f\5f\u0623\nf\3f\5")
        buf.write("f\u0626\nf\3f\5f\u0629\nf\3f\3f\5f\u062d\nf\3f\3f\5f\u0631")
        buf.write("\nf\3f\3f\5f\u0635\nf\3f\3f\3f\5f\u063a\nf\3f\3f\5f\u063e")
        buf.write("\nf\5f\u0640\nf\3f\3f\7f\u0644\nf\ff\16f\u0647\13f\3f")
        buf.write("\3f\3g\3g\3g\7g\u064e\ng\fg\16g\u0651\13g\3h\5h\u0654")
        buf.write("\nh\3h\5h\u0657\nh\3h\3h\3i\3i\3i\3i\7i\u065f\ni\fi\16")
        buf.write("i\u0662\13i\3i\3i\5i\u0666\ni\5i\u0668\ni\3j\3j\3j\5j")
        buf.write("\u066d\nj\3j\3j\3j\3j\7j\u0673\nj\fj\16j\u0676\13j\3j")
        buf.write("\5j\u0679\nj\3j\3j\5j\u067d\nj\3k\3k\3k\7k\u0682\nk\f")
        buf.write("k\16k\u0685\13k\3l\3l\3l\3l\7l\u068b\nl\fl\16l\u068e\13")
        buf.write("l\3l\5l\u0691\nl\3l\5l\u0694\nl\3l\3l\3m\5m\u0699\nm\3")
        buf.write("m\5m\u069c\nm\3m\3m\3m\5m\u06a1\nm\3n\3n\3n\3o\3o\3o\3")
        buf.write("o\3o\3o\5o\u06ac\no\5o\u06ae\no\3o\3o\3o\3o\5o\u06b4\n")
        buf.write("o\5o\u06b6\no\3o\3o\3o\3o\3o\5o\u06bd\no\3o\3o\3o\5o\u06c2")
        buf.write("\no\7o\u06c4\no\fo\16o\u06c7\13o\5o\u06c9\no\3p\3p\3p")
        buf.write("\3p\3p\5p\u06d0\np\3q\3q\3q\3q\5q\u06d6\nq\3r\3r\3s\3")
        buf.write("s\3s\3s\3s\3s\5s\u06e0\ns\3s\3s\3s\5s\u06e5\ns\3s\3s\3")
        buf.write("s\5s\u06ea\ns\5s\u06ec\ns\3t\3t\3u\3u\6u\u06f2\nu\ru\16")
        buf.write("u\u06f3\3u\3u\6u\u06f8\nu\ru\16u\u06f9\3u\3u\3u\7u\u06ff")
        buf.write("\nu\fu\16u\u0702\13u\3u\5u\u0705\nu\3v\3v\3v\5v\u070a")
        buf.write("\nv\3w\3w\3w\7w\u070f\nw\fw\16w\u0712\13w\3x\3x\7x\u0716")
        buf.write("\nx\fx\16x\u0719\13x\3y\3y\3y\3y\3y\3y\5y\u0721\ny\3z")
        buf.write("\3z\3z\5z\u0726\nz\3{\3{\3{\3|\3|\3|\3|\5|\u072f\n|\3")
        buf.write("}\5}\u0732\n}\3}\6}\u0735\n}\r}\16}\u0736\3}\7}\u073a")
        buf.write("\n}\f}\16}\u073d\13}\3~\3~\3~\5~\u0742\n~\3~\3~\3~\3~")
        buf.write("\5~\u0748\n~\3\177\3\177\5\177\u074c\n\177\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\3\u0080\5\u0080\u0753\n\u0080\3\u0080")
        buf.write("\7\u0080\u0756\n\u0080\f\u0080\16\u0080\u0759\13\u0080")
        buf.write("\3\u0081\7\u0081\u075c\n\u0081\f\u0081\16\u0081\u075f")
        buf.write("\13\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\5\u0081\u0767\n\u0081\3\u0081\7\u0081\u076a\n\u0081\f")
        buf.write("\u0081\16\u0081\u076d\13\u0081\3\u0082\3\u0082\5\u0082")
        buf.write("\u0771\n\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\5\u0082\u0778\n\u0082\3\u0083\5\u0083\u077b\n\u0083\3")
        buf.write("\u0083\3\u0083\5\u0083\u077f\n\u0083\7\u0083\u0781\n\u0083")
        buf.write("\f\u0083\16\u0083\u0784\13\u0083\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u078d\n\u0084")
        buf.write("\3\u0085\3\u0085\3\u0086\3\u0086\3\u0087\3\u0087\3\u0088")
        buf.write("\3\u0088\3\u0089\3\u0089\3\u008a\3\u008a\3\u008b\3\u008b")
        buf.write("\3\u008b\2\4x\u00a6\u008c\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6")
        buf.write("\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8")
        buf.write("\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a")
        buf.write("\u010c\u010e\u0110\u0112\u0114\2\33\4\2::TT\4\288||\3")
        buf.write("\2\u00dd\u00de\4\2aayy\3\2\u00d1\u00d2\4\2\u00ca\u00ca")
        buf.write("\u00cc\u00cd\3\2\u00a7\u00a8\3\2Z[\3\2tu\3\2\u00ce\u00d0")
        buf.write("\4\2\u00cc\u00cd\u00d4\u00d4\3\2\u00c0\u00c1\4\2\u00ad")
        buf.write("\u00ae\u00c6\u00c7\3\2\u00a9\u00ac\6\2\u00af\u00b1\u00b3")
        buf.write("\u00bb\u00bf\u00bf\u00df\u00df\3\2\u00cc\u00cd\4\2\u00e4")
        buf.write("\u00e5\u00e7\u00e8\4\288mm\4\2..OO\4\2.\u00a2\u00e3\u00e3")
        buf.write("\6\2..OOpsxx\3\2\u009b\u00a2\3\2\u008b\u009a\t\2//\62")
        buf.write("\62@@`allvvyy\13\2//\61\62?@QQ^allvvyy\177\u0081\2\u088a")
        buf.write("\2\u0117\3\2\2\2\4\u0128\3\2\2\2\6\u0146\3\2\2\2\b\u0149")
        buf.write("\3\2\2\2\n\u0150\3\2\2\2\f\u0158\3\2\2\2\16\u0164\3\2")
        buf.write("\2\2\20\u0166\3\2\2\2\22\u016e\3\2\2\2\24\u017b\3\2\2")
        buf.write("\2\26\u017d\3\2\2\2\30\u0193\3\2\2\2\32\u0196\3\2\2\2")
        buf.write("\34\u01ad\3\2\2\2\36\u01d9\3\2\2\2 \u01db\3\2\2\2\"\u01f1")
        buf.write("\3\2\2\2$\u01f3\3\2\2\2&\u01fb\3\2\2\2(\u0204\3\2\2\2")
        buf.write("*\u0209\3\2\2\2,\u0211\3\2\2\2.\u021d\3\2\2\2\60\u0221")
        buf.write("\3\2\2\2\62\u0231\3\2\2\2\64\u0238\3\2\2\2\66\u023e\3")
        buf.write("\2\2\28\u025b\3\2\2\2:\u025d\3\2\2\2<\u025f\3\2\2\2>\u027f")
        buf.write("\3\2\2\2@\u0281\3\2\2\2B\u0285\3\2\2\2D\u028a\3\2\2\2")
        buf.write("F\u028d\3\2\2\2H\u0291\3\2\2\2J\u029b\3\2\2\2L\u02a1\3")
        buf.write("\2\2\2N\u02b7\3\2\2\2P\u02b9\3\2\2\2R\u02bb\3\2\2\2T\u02dc")
        buf.write("\3\2\2\2V\u02e2\3\2\2\2X\u02e8\3\2\2\2Z\u02ee\3\2\2\2")
        buf.write("\\\u02f4\3\2\2\2^\u02f7\3\2\2\2`\u02fd\3\2\2\2b\u0334")
        buf.write("\3\2\2\2d\u0347\3\2\2\2f\u0357\3\2\2\2h\u035a\3\2\2\2")
        buf.write("j\u035e\3\2\2\2l\u0362\3\2\2\2n\u036f\3\2\2\2p\u0373\3")
        buf.write("\2\2\2r\u0387\3\2\2\2t\u038a\3\2\2\2v\u0397\3\2\2\2x\u03b1")
        buf.write("\3\2\2\2z\u03bb\3\2\2\2|\u03ce\3\2\2\2~\u03d0\3\2\2\2")
        buf.write("\u0080\u03d4\3\2\2\2\u0082\u041a\3\2\2\2\u0084\u0425\3")
        buf.write("\2\2\2\u0086\u0429\3\2\2\2\u0088\u042b\3\2\2\2\u008a\u0432")
        buf.write("\3\2\2\2\u008c\u0440\3\2\2\2\u008e\u0444\3\2\2\2\u0090")
        buf.write("\u0449\3\2\2\2\u0092\u0451\3\2\2\2\u0094\u0455\3\2\2\2")
        buf.write("\u0096\u0458\3\2\2\2\u0098\u045c\3\2\2\2\u009a\u0461\3")
        buf.write("\2\2\2\u009c\u0466\3\2\2\2\u009e\u0473\3\2\2\2\u00a0\u0496")
        buf.write("\3\2\2\2\u00a2\u0498\3\2\2\2\u00a4\u04a0\3\2\2\2\u00a6")
        buf.write("\u0501\3\2\2\2\u00a8\u0544\3\2\2\2\u00aa\u0551\3\2\2\2")
        buf.write("\u00ac\u0586\3\2\2\2\u00ae\u0589\3\2\2\2\u00b0\u0590\3")
        buf.write("\2\2\2\u00b2\u05b1\3\2\2\2\u00b4\u05b3\3\2\2\2\u00b6\u05c5")
        buf.write("\3\2\2\2\u00b8\u05d0\3\2\2\2\u00ba\u05d5\3\2\2\2\u00bc")
        buf.write("\u05d7\3\2\2\2\u00be\u05e1\3\2\2\2\u00c0\u05f8\3\2\2\2")
        buf.write("\u00c2\u05fa\3\2\2\2\u00c4\u0607\3\2\2\2\u00c6\u0610\3")
        buf.write("\2\2\2\u00c8\u061c\3\2\2\2\u00ca\u061f\3\2\2\2\u00cc\u064a")
        buf.write("\3\2\2\2\u00ce\u0653\3\2\2\2\u00d0\u0667\3\2\2\2\u00d2")
        buf.write("\u067c\3\2\2\2\u00d4\u067e\3\2\2\2\u00d6\u0686\3\2\2\2")
        buf.write("\u00d8\u06a0\3\2\2\2\u00da\u06a2\3\2\2\2\u00dc\u06c8\3")
        buf.write("\2\2\2\u00de\u06cf\3\2\2\2\u00e0\u06d5\3\2\2\2\u00e2\u06d7")
        buf.write("\3\2\2\2\u00e4\u06eb\3\2\2\2\u00e6\u06ed\3\2\2\2\u00e8")
        buf.write("\u0704\3\2\2\2\u00ea\u0709\3\2\2\2\u00ec\u070b\3\2\2\2")
        buf.write("\u00ee\u0713\3\2\2\2\u00f0\u0720\3\2\2\2\u00f2\u0722\3")
        buf.write("\2\2\2\u00f4\u0727\3\2\2\2\u00f6\u072e\3\2\2\2\u00f8\u0731")
        buf.write("\3\2\2\2\u00fa\u0747\3\2\2\2\u00fc\u074b\3\2\2\2\u00fe")
        buf.write("\u0752\3\2\2\2\u0100\u075d\3\2\2\2\u0102\u0777\3\2\2\2")
        buf.write("\u0104\u077a\3\2\2\2\u0106\u078c\3\2\2\2\u0108\u078e\3")
        buf.write("\2\2\2\u010a\u0790\3\2\2\2\u010c\u0792\3\2\2\2\u010e\u0794")
        buf.write("\3\2\2\2\u0110\u0796\3\2\2\2\u0112\u0798\3\2\2\2\u0114")
        buf.write("\u079a\3\2\2\2\u0116\u0118\7\f\2\2\u0117\u0116\3\2\2\2")
        buf.write("\u0117\u0118\3\2\2\2\u0118\u011d\3\2\2\2\u0119\u011c\5")
        buf.write("\4\3\2\u011a\u011c\5\n\6\2\u011b\u0119\3\2\2\2\u011b\u011a")
        buf.write("\3\2\2\2\u011c\u011f\3\2\2\2\u011d\u011b\3\2\2\2\u011d")
        buf.write("\u011e\3\2\2\2\u011e\u0120\3\2\2\2\u011f\u011d\3\2\2\2")
        buf.write("\u0120\u0121\7\2\2\3\u0121\3\3\2\2\2\u0122\u0124\5\6\4")
        buf.write("\2\u0123\u0122\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u0123")
        buf.write("\3\2\2\2\u0125\u0126\3\2\2\2\u0126\u0129\3\2\2\2\u0127")
        buf.write("\u0129\5\b\5\2\u0128\u0123\3\2\2\2\u0128\u0127\3\2\2\2")
        buf.write("\u0129\5\3\2\2\2\u012a\u0147\7\n\2\2\u012b\u0147\7\21")
        buf.write("\2\2\u012c\u0147\7\b\2\2\u012d\u0147\7\13\2\2\u012e\u0147")
        buf.write("\7\32\2\2\u012f\u0147\7\22\2\2\u0130\u0147\7\23\2\2\u0131")
        buf.write("\u0147\7\4\2\2\u0132\u0147\7\24\2\2\u0133\u0147\7\25\2")
        buf.write("\2\u0134\u0147\7\35\2\2\u0135\u0147\7\26\2\2\u0136\u0147")
        buf.write("\7!\2\2\u0137\u0147\7\27\2\2\u0138\u0147\7\30\2\2\u0139")
        buf.write("\u0147\7\36\2\2\u013a\u0147\7\"\2\2\u013b\u0147\7\'\2")
        buf.write("\2\u013c\u0147\7\7\2\2\u013d\u0147\7%\2\2\u013e\u0142")
        buf.write("\7\5\2\2\u013f\u0141\7\16\2\2\u0140\u013f\3\2\2\2\u0141")
        buf.write("\u0144\3\2\2\2\u0142\u0140\3\2\2\2\u0142\u0143\3\2\2\2")
        buf.write("\u0143\u0145\3\2\2\2\u0144\u0142\3\2\2\2\u0145\u0147\7")
        buf.write("\17\2\2\u0146\u012a\3\2\2\2\u0146\u012b\3\2\2\2\u0146")
        buf.write("\u012c\3\2\2\2\u0146\u012d\3\2\2\2\u0146\u012e\3\2\2\2")
        buf.write("\u0146\u012f\3\2\2\2\u0146\u0130\3\2\2\2\u0146\u0131\3")
        buf.write("\2\2\2\u0146\u0132\3\2\2\2\u0146\u0133\3\2\2\2\u0146\u0134")
        buf.write("\3\2\2\2\u0146\u0135\3\2\2\2\u0146\u0136\3\2\2\2\u0146")
        buf.write("\u0137\3\2\2\2\u0146\u0138\3\2\2\2\u0146\u0139\3\2\2\2")
        buf.write("\u0146\u013a\3\2\2\2\u0146\u013b\3\2\2\2\u0146\u013c\3")
        buf.write("\2\2\2\u0146\u013d\3\2\2\2\u0146\u013e\3\2\2\2\u0147\7")
        buf.write("\3\2\2\2\u0148\u014a\7$\2\2\u0149\u0148\3\2\2\2\u014a")
        buf.write("\u014b\3\2\2\2\u014b\u0149\3\2\2\2\u014b\u014c\3\2\2\2")
        buf.write("\u014c\t\3\2\2\2\u014d\u014f\5\f\7\2\u014e\u014d\3\2\2")
        buf.write("\2\u014f\u0152\3\2\2\2\u0150\u014e\3\2\2\2\u0150\u0151")
        buf.write("\3\2\2\2\u0151\u0154\3\2\2\2\u0152\u0150\3\2\2\2\u0153")
        buf.write("\u0155\5\16\b\2\u0154\u0153\3\2\2\2\u0155\u0156\3\2\2")
        buf.write("\2\u0156\u0154\3\2\2\2\u0156\u0157\3\2\2\2\u0157\13\3")
        buf.write("\2\2\2\u0158\u0159\7Y\2\2\u0159\u015a\7i\2\2\u015a\u015b")
        buf.write("\5\u00d0i\2\u015b\u015c\7\u00de\2\2\u015c\r\3\2\2\2\u015d")
        buf.write("\u0165\58\35\2\u015e\u0165\5\20\t\2\u015f\u0165\5\26\f")
        buf.write("\2\u0160\u0165\5\32\16\2\u0161\u0165\5\34\17\2\u0162\u0165")
        buf.write("\5\u009cO\2\u0163\u0165\5\u009eP\2\u0164\u015d\3\2\2\2")
        buf.write("\u0164\u015e\3\2\2\2\u0164\u015f\3\2\2\2\u0164\u0160\3")
        buf.write("\2\2\2\u0164\u0161\3\2\2\2\u0164\u0162\3\2\2\2\u0164\u0163")
        buf.write("\3\2\2\2\u0165\17\3\2\2\2\u0166\u0168\7\u0082\2\2\u0167")
        buf.write("\u0169\t\2\2\2\u0168\u0167\3\2\2\2\u0168\u0169\3\2\2\2")
        buf.write("\u0169\u016a\3\2\2\2\u016a\u016b\5\22\n\2\u016b\u016c")
        buf.write("\7\u00de\2\2\u016c\21\3\2\2\2\u016d\u016f\7\u00c4\2\2")
        buf.write("\u016e\u016d\3\2\2\2\u016e\u016f\3\2\2\2\u016f\u0170\3")
        buf.write("\2\2\2\u0170\u0178\5\24\13\2\u0171\u0173\7\u00dc\2\2\u0172")
        buf.write("\u0174\7\u00c4\2\2\u0173\u0172\3\2\2\2\u0173\u0174\3\2")
        buf.write("\2\2\u0174\u0175\3\2\2\2\u0175\u0177\5\24\13\2\u0176\u0171")
        buf.write("\3\2\2\2\u0177\u017a\3\2\2\2\u0178\u0176\3\2\2\2\u0178")
        buf.write("\u0179\3\2\2\2\u0179\23\3\2\2\2\u017a\u0178\3\2\2\2\u017b")
        buf.write("\u017c\5\u00d0i\2\u017c\25\3\2\2\2\u017d\u018c\7i\2\2")
        buf.write("\u017e\u0180\5\u00d0i\2\u017f\u017e\3\2\2\2\u017f\u0180")
        buf.write("\3\2\2\2\u0180\u0181\3\2\2\2\u0181\u0185\7\u00da\2\2\u0182")
        buf.write("\u0184\5\30\r\2\u0183\u0182\3\2\2\2\u0184\u0187\3\2\2")
        buf.write("\2\u0185\u0183\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0188")
        buf.write("\3\2\2\2\u0187\u0185\3\2\2\2\u0188\u018d\7\u00db\2\2\u0189")
        buf.write("\u018a\5\u00d0i\2\u018a\u018b\7\u00de\2\2\u018b\u018d")
        buf.write("\3\2\2\2\u018c\u017f\3\2\2\2\u018c\u0189\3\2\2\2\u018d")
        buf.write("\27\3\2\2\2\u018e\u0194\58\35\2\u018f\u0194\5\20\t\2\u0190")
        buf.write("\u0194\5\32\16\2\u0191\u0194\5\34\17\2\u0192\u0194\5\u009c")
        buf.write("O\2\u0193\u018e\3\2\2\2\u0193\u018f\3\2\2\2\u0193\u0190")
        buf.write("\3\2\2\2\u0193\u0191\3\2\2\2\u0193\u0192\3\2\2\2\u0194")
        buf.write("\31\3\2\2\2\u0195\u0197\5.\30\2\u0196\u0195\3\2\2\2\u0196")
        buf.write("\u0197\3\2\2\2\u0197\u0198\3\2\2\2\u0198\u019a\7T\2\2")
        buf.write("\u0199\u019b\7\u00c8\2\2\u019a\u0199\3\2\2\2\u019a\u019b")
        buf.write("\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u019e\5\u010a\u0086")
        buf.write("\2\u019d\u019f\5\"\22\2\u019e\u019d\3\2\2\2\u019e\u019f")
        buf.write("\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a1\7\u00d6\2\2\u01a1")
        buf.write("\u01a2\5t;\2\u01a2\u01a8\7\u00d7\2\2\u01a3\u01a5\7\u00dd")
        buf.write("\2\2\u01a4\u01a6\7\u00d5\2\2\u01a5\u01a4\3\2\2\2\u01a5")
        buf.write("\u01a6\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a9\5x=\2\u01a8")
        buf.write("\u01a3\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01aa\3\2\2\2")
        buf.write("\u01aa\u01ab\5<\37\2\u01ab\33\3\2\2\2\u01ac\u01ae\5.\30")
        buf.write("\2\u01ad\u01ac\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01b0")
        buf.write("\3\2\2\2\u01af\u01b1\7p\2\2\u01b0\u01af\3\2\2\2\u01b0")
        buf.write("\u01b1\3\2\2\2\u01b1\u01b3\3\2\2\2\u01b2\u01b4\5\u0108")
        buf.write("\u0085\2\u01b3\u01b2\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4")
        buf.write("\u01b6\3\2\2\2\u01b5\u01b7\7n\2\2\u01b6\u01b5\3\2\2\2")
        buf.write("\u01b6\u01b7\3\2\2\2\u01b7\u01ce\3\2\2\2\u01b8\u01b9\5")
        buf.write("\36\20\2\u01b9\u01bb\5\u010a\u0086\2\u01ba\u01bc\5\"\22")
        buf.write("\2\u01bb\u01ba\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01bf")
        buf.write("\3\2\2\2\u01bd\u01be\7N\2\2\u01be\u01c0\5\u00c6d\2\u01bf")
        buf.write("\u01bd\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c3\3\2\2\2")
        buf.write("\u01c1\u01c2\7X\2\2\u01c2\u01c4\5 \21\2\u01c3\u01c1\3")
        buf.write("\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01cf\3\2\2\2\u01c5\u01c6")
        buf.write("\7b\2\2\u01c6\u01c8\5\u010a\u0086\2\u01c7\u01c9\5\"\22")
        buf.write("\2\u01c8\u01c7\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01cc")
        buf.write("\3\2\2\2\u01ca\u01cb\7N\2\2\u01cb\u01cd\5 \21\2\u01cc")
        buf.write("\u01ca\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01cf\3\2\2\2")
        buf.write("\u01ce\u01b8\3\2\2\2\u01ce\u01c5\3\2\2\2\u01cf\u01d0\3")
        buf.write("\2\2\2\u01d0\u01d4\7\u00da\2\2\u01d1\u01d3\5\u0082B\2")
        buf.write("\u01d2\u01d1\3\2\2\2\u01d3\u01d6\3\2\2\2\u01d4\u01d2\3")
        buf.write("\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01d7\3\2\2\2\u01d6\u01d4")
        buf.write("\3\2\2\2\u01d7\u01d8\7\u00db\2\2\u01d8\35\3\2\2\2\u01d9")
        buf.write("\u01da\t\3\2\2\u01da\37\3\2\2\2\u01db\u01e0\5\u00c6d\2")
        buf.write("\u01dc\u01dd\7\u00dc\2\2\u01dd\u01df\5\u00c6d\2\u01de")
        buf.write("\u01dc\3\2\2\2\u01df\u01e2\3\2\2\2\u01e0\u01de\3\2\2\2")
        buf.write("\u01e0\u01e1\3\2\2\2\u01e1!\3\2\2\2\u01e2\u01e0\3\2\2")
        buf.write("\2\u01e3\u01e4\7\u00a4\2\2\u01e4\u01e5\5$\23\2\u01e5\u01e6")
        buf.write("\7\u00a5\2\2\u01e6\u01f2\3\2\2\2\u01e7\u01e8\7\u00a4\2")
        buf.write("\2\u01e8\u01e9\5&\24\2\u01e9\u01ea\7\u00a5\2\2\u01ea\u01f2")
        buf.write("\3\2\2\2\u01eb\u01ec\7\u00a4\2\2\u01ec\u01ed\5$\23\2\u01ed")
        buf.write("\u01ee\7\u00dc\2\2\u01ee\u01ef\5&\24\2\u01ef\u01f0\7\u00a5")
        buf.write("\2\2\u01f0\u01f2\3\2\2\2\u01f1\u01e3\3\2\2\2\u01f1\u01e7")
        buf.write("\3\2\2\2\u01f1\u01eb\3\2\2\2\u01f2#\3\2\2\2\u01f3\u01f8")
        buf.write("\5(\25\2\u01f4\u01f5\7\u00dc\2\2\u01f5\u01f7\5(\25\2\u01f6")
        buf.write("\u01f4\3\2\2\2\u01f7\u01fa\3\2\2\2\u01f8\u01f6\3\2\2\2")
        buf.write("\u01f8\u01f9\3\2\2\2\u01f9%\3\2\2\2\u01fa\u01f8\3\2\2")
        buf.write("\2\u01fb\u0200\5*\26\2\u01fc\u01fd\7\u00dc\2\2\u01fd\u01ff")
        buf.write("\5*\26\2\u01fe\u01fc\3\2\2\2\u01ff\u0202\3\2\2\2\u0200")
        buf.write("\u01fe\3\2\2\2\u0200\u0201\3\2\2\2\u0201\'\3\2\2\2\u0202")
        buf.write("\u0200\3\2\2\2\u0203\u0205\5.\30\2\u0204\u0203\3\2\2\2")
        buf.write("\u0204\u0205\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0207\5")
        buf.write("\u010a\u0086\2\u0207)\3\2\2\2\u0208\u020a\5.\30\2\u0209")
        buf.write("\u0208\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u020b\3\2\2\2")
        buf.write("\u020b\u020c\5\u010a\u0086\2\u020c\u020f\7\u00df\2\2\u020d")
        buf.write("\u0210\5\u00c6d\2\u020e\u0210\5\u0112\u008a\2\u020f\u020d")
        buf.write("\3\2\2\2\u020f\u020e\3\2\2\2\u0210+\3\2\2\2\u0211\u0212")
        buf.write("\7\u00a4\2\2\u0212\u0217\5\u00c8e\2\u0213\u0214\7\u00dc")
        buf.write("\2\2\u0214\u0216\5\u00c8e\2\u0215\u0213\3\2\2\2\u0216")
        buf.write("\u0219\3\2\2\2\u0217\u0215\3\2\2\2\u0217\u0218\3\2\2\2")
        buf.write("\u0218\u021a\3\2\2\2\u0219\u0217\3\2\2\2\u021a\u021b\7")
        buf.write("\u00a5\2\2\u021b-\3\2\2\2\u021c\u021e\5\60\31\2\u021d")
        buf.write("\u021c\3\2\2\2\u021e\u021f\3\2\2\2\u021f\u021d\3\2\2\2")
        buf.write("\u021f\u0220\3\2\2\2\u0220/\3\2\2\2\u0221\u0225\7-\2\2")
        buf.write("\u0222\u0223\5\u010a\u0086\2\u0223\u0224\7\u00dd\2\2\u0224")
        buf.write("\u0226\3\2\2\2\u0225\u0222\3\2\2\2\u0225\u0226\3\2\2\2")
        buf.write("\u0226\u0227\3\2\2\2\u0227\u022c\5\62\32\2\u0228\u0229")
        buf.write("\7\u00dc\2\2\u0229\u022b\5\62\32\2\u022a\u0228\3\2\2\2")
        buf.write("\u022b\u022e\3\2\2\2\u022c\u022a\3\2\2\2\u022c\u022d\3")
        buf.write("\2\2\2\u022d\u022f\3\2\2\2\u022e\u022c\3\2\2\2\u022f\u0230")
        buf.write("\7\u00d9\2\2\u0230\61\3\2\2\2\u0231\u0233\5\u00ceh\2\u0232")
        buf.write("\u0234\5\u00d6l\2\u0233\u0232\3\2\2\2\u0233\u0234\3\2")
        buf.write("\2\2\u0234\63\3\2\2\2\u0235\u0237\5\66\34\2\u0236\u0235")
        buf.write("\3\2\2\2\u0237\u023a\3\2\2\2\u0238\u0236\3\2\2\2\u0238")
        buf.write("\u0239\3\2\2\2\u0239\65\3\2\2\2\u023a\u0238\3\2\2\2\u023b")
        buf.write("\u023f\58\35\2\u023c\u023f\5\32\16\2\u023d\u023f\5\34")
        buf.write("\17\2\u023e\u023b\3\2\2\2\u023e\u023c\3\2\2\2\u023e\u023d")
        buf.write("\3\2\2\2\u023f\67\3\2\2\2\u0240\u0241\5\u010a\u0086\2")
        buf.write("\u0241\u0242\7\u00dd\2\2\u0242\u025c\3\2\2\2\u0243\u025c")
        buf.write("\5<\37\2\u0244\u025c\5> \2\u0245\u025c\5H%\2\u0246\u025c")
        buf.write("\5J&\2\u0247\u025c\5L\'\2\u0248\u025c\5R*\2\u0249\u025c")
        buf.write("\5V,\2\u024a\u025c\5X-\2\u024b\u025c\5Z.\2\u024c\u024d")
        buf.write("\5\u00bc_\2\u024d\u024e\7\u00de\2\2\u024e\u025c\3\2\2")
        buf.write("\2\u024f\u025c\5z>\2\u0250\u025c\5\u0080A\2\u0251\u025c")
        buf.write("\5~@\2\u0252\u025c\5\\/\2\u0253\u025c\5^\60\2\u0254\u025c")
        buf.write("\5`\61\2\u0255\u025c\5b\62\2\u0256\u025c\5h\65\2\u0257")
        buf.write("\u025c\5j\66\2\u0258\u025c\5l\67\2\u0259\u025c\5:\36\2")
        buf.write("\u025a\u025c\5n8\2\u025b\u0240\3\2\2\2\u025b\u0243\3\2")
        buf.write("\2\2\u025b\u0244\3\2\2\2\u025b\u0245\3\2\2\2\u025b\u0246")
        buf.write("\3\2\2\2\u025b\u0247\3\2\2\2\u025b\u0248\3\2\2\2\u025b")
        buf.write("\u0249\3\2\2\2\u025b\u024a\3\2\2\2\u025b\u024b\3\2\2\2")
        buf.write("\u025b\u024c\3\2\2\2\u025b\u024f\3\2\2\2\u025b\u0250\3")
        buf.write("\2\2\2\u025b\u0251\3\2\2\2\u025b\u0252\3\2\2\2\u025b\u0253")
        buf.write("\3\2\2\2\u025b\u0254\3\2\2\2\u025b\u0255\3\2\2\2\u025b")
        buf.write("\u0256\3\2\2\2\u025b\u0257\3\2\2\2\u025b\u0258\3\2\2\2")
        buf.write("\u025b\u0259\3\2\2\2\u025b\u025a\3\2\2\2\u025c9\3\2\2")
        buf.write("\2\u025d\u025e\7\u00de\2\2\u025e;\3\2\2\2\u025f\u0260")
        buf.write("\7\u00da\2\2\u0260\u0261\5\64\33\2\u0261\u0262\7\u00db")
        buf.write("\2\2\u0262=\3\2\2\2\u0263\u0264\7W\2\2\u0264\u0265\5\u00a4")
        buf.write("S\2\u0265\u0269\58\35\2\u0266\u0268\5@!\2\u0267\u0266")
        buf.write("\3\2\2\2\u0268\u026b\3\2\2\2\u0269\u0267\3\2\2\2\u0269")
        buf.write("\u026a\3\2\2\2\u026a\u026d\3\2\2\2\u026b\u0269\3\2\2\2")
        buf.write("\u026c\u026e\5D#\2\u026d\u026c\3\2\2\2\u026d\u026e\3\2")
        buf.write("\2\2\u026e\u0280\3\2\2\2\u026f\u0270\7W\2\2\u0270\u0271")
        buf.write("\5\u00a4S\2\u0271\u0272\7\u00dd\2\2\u0272\u0276\5\64\33")
        buf.write("\2\u0273\u0275\5B\"\2\u0274\u0273\3\2\2\2\u0275\u0278")
        buf.write("\3\2\2\2\u0276\u0274\3\2\2\2\u0276\u0277\3\2\2\2\u0277")
        buf.write("\u027a\3\2\2\2\u0278\u0276\3\2\2\2\u0279\u027b\5F$\2\u027a")
        buf.write("\u0279\3\2\2\2\u027a\u027b\3\2\2\2\u027b\u027c\3\2\2\2")
        buf.write("\u027c\u027d\7I\2\2\u027d\u027e\7\u00de\2\2\u027e\u0280")
        buf.write("\3\2\2\2\u027f\u0263\3\2\2\2\u027f\u026f\3\2\2\2\u0280")
        buf.write("?\3\2\2\2\u0281\u0282\7C\2\2\u0282\u0283\5\u00a4S\2\u0283")
        buf.write("\u0284\58\35\2\u0284A\3\2\2\2\u0285\u0286\7C\2\2\u0286")
        buf.write("\u0287\5\u00a4S\2\u0287\u0288\7\u00dd\2\2\u0288\u0289")
        buf.write("\5\64\33\2\u0289C\3\2\2\2\u028a\u028b\7B\2\2\u028b\u028c")
        buf.write("\58\35\2\u028cE\3\2\2\2\u028d\u028e\7B\2\2\u028e\u028f")
        buf.write("\7\u00dd\2\2\u028f\u0290\5\64\33\2\u0290G\3\2\2\2\u0291")
        buf.write("\u0292\7\u0084\2\2\u0292\u0299\5\u00a4S\2\u0293\u029a")
        buf.write("\58\35\2\u0294\u0295\7\u00dd\2\2\u0295\u0296\5\64\33\2")
        buf.write("\u0296\u0297\7K\2\2\u0297\u0298\7\u00de\2\2\u0298\u029a")
        buf.write("\3\2\2\2\u0299\u0293\3\2\2\2\u0299\u0294\3\2\2\2\u029a")
        buf.write("I\3\2\2\2\u029b\u029c\7>\2\2\u029c\u029d\58\35\2\u029d")
        buf.write("\u029e\7\u0084\2\2\u029e\u029f\5\u00a4S\2\u029f\u02a0")
        buf.write("\7\u00de\2\2\u02a0K\3\2\2\2\u02a1\u02a2\7R\2\2\u02a2\u02a4")
        buf.write("\7\u00d6\2\2\u02a3\u02a5\5N(\2\u02a4\u02a3\3\2\2\2\u02a4")
        buf.write("\u02a5\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02a8\7\u00de")
        buf.write("\2\2\u02a7\u02a9\5\u00a2R\2\u02a8\u02a7\3\2\2\2\u02a8")
        buf.write("\u02a9\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u02ac\7\u00de")
        buf.write("\2\2\u02ab\u02ad\5P)\2\u02ac\u02ab\3\2\2\2\u02ac\u02ad")
        buf.write("\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02b5\7\u00d7\2\2\u02af")
        buf.write("\u02b6\58\35\2\u02b0\u02b1\7\u00dd\2\2\u02b1\u02b2\5\64")
        buf.write("\33\2\u02b2\u02b3\7G\2\2\u02b3\u02b4\7\u00de\2\2\u02b4")
        buf.write("\u02b6\3\2\2\2\u02b5\u02af\3\2\2\2\u02b5\u02b0\3\2\2\2")
        buf.write("\u02b6M\3\2\2\2\u02b7\u02b8\5\u00a2R\2\u02b8O\3\2\2\2")
        buf.write("\u02b9\u02ba\5\u00a2R\2\u02baQ\3\2\2\2\u02bb\u02bc\7z")
        buf.write("\2\2\u02bc\u02d4\5\u00a4S\2\u02bd\u02bf\7\u00da\2\2\u02be")
        buf.write("\u02c0\7\u00de\2\2\u02bf\u02be\3\2\2\2\u02bf\u02c0\3\2")
        buf.write("\2\2\u02c0\u02c4\3\2\2\2\u02c1\u02c3\5T+\2\u02c2\u02c1")
        buf.write("\3\2\2\2\u02c3\u02c6\3\2\2\2\u02c4\u02c2\3\2\2\2\u02c4")
        buf.write("\u02c5\3\2\2\2\u02c5\u02c7\3\2\2\2\u02c6\u02c4\3\2\2\2")
        buf.write("\u02c7\u02d5\7\u00db\2\2\u02c8\u02ca\7\u00dd\2\2\u02c9")
        buf.write("\u02cb\7\u00de\2\2\u02ca\u02c9\3\2\2\2\u02ca\u02cb\3\2")
        buf.write("\2\2\u02cb\u02cf\3\2\2\2\u02cc\u02ce\5T+\2\u02cd\u02cc")
        buf.write("\3\2\2\2\u02ce\u02d1\3\2\2\2\u02cf\u02cd\3\2\2\2\u02cf")
        buf.write("\u02d0\3\2\2\2\u02d0\u02d2\3\2\2\2\u02d1\u02cf\3\2\2\2")
        buf.write("\u02d2\u02d3\7J\2\2\u02d3\u02d5\7\u00de\2\2\u02d4\u02bd")
        buf.write("\3\2\2\2\u02d4\u02c8\3\2\2\2\u02d5S\3\2\2\2\u02d6\u02d7")
        buf.write("\7\66\2\2\u02d7\u02da\5\u00a6T\2\u02d8\u02da\7=\2\2\u02d9")
        buf.write("\u02d6\3\2\2\2\u02d9\u02d8\3\2\2\2\u02da\u02db\3\2\2\2")
        buf.write("\u02db\u02dd\t\4\2\2\u02dc\u02d9\3\2\2\2\u02dd\u02de\3")
        buf.write("\2\2\2\u02de\u02dc\3\2\2\2\u02de\u02df\3\2\2\2\u02df\u02e0")
        buf.write("\3\2\2\2\u02e0\u02e1\5\64\33\2\u02e1U\3\2\2\2\u02e2\u02e4")
        buf.write("\7\64\2\2\u02e3\u02e5\5\u00a6T\2\u02e4\u02e3\3\2\2\2\u02e4")
        buf.write("\u02e5\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7\7\u00de")
        buf.write("\2\2\u02e7W\3\2\2\2\u02e8\u02ea\7;\2\2\u02e9\u02eb\5\u00a6")
        buf.write("T\2\u02ea\u02e9\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02ec")
        buf.write("\3\2\2\2\u02ec\u02ed\7\u00de\2\2\u02edY\3\2\2\2\u02ee")
        buf.write("\u02f0\7w\2\2\u02ef\u02f1\5\u00a6T\2\u02f0\u02ef\3\2\2")
        buf.write("\2\u02f0\u02f1\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2\u02f3")
        buf.write("\7\u00de\2\2\u02f3[\3\2\2\2\u02f4\u02f5\5\u00a6T\2\u02f5")
        buf.write("\u02f6\7\u00de\2\2\u02f6]\3\2\2\2\u02f7\u02f8\7\u0081")
        buf.write("\2\2\u02f8\u02f9\7\u00d6\2\2\u02f9\u02fa\5\u00ecw\2\u02fa")
        buf.write("\u02fb\7\u00d7\2\2\u02fb\u02fc\7\u00de\2\2\u02fc_\3\2")
        buf.write("\2\2\u02fd\u032a\7S\2\2\u02fe\u02ff\7\u00d6\2\2\u02ff")
        buf.write("\u0300\5\u00a6T\2\u0300\u0301\7\60\2\2\u0301\u0302\5\u00ac")
        buf.write("W\2\u0302\u0303\7\u00d7\2\2\u0303\u032b\3\2\2\2\u0304")
        buf.write("\u0305\7\u00d6\2\2\u0305\u0306\5\u00eex\2\u0306\u0308")
        buf.write("\7\60\2\2\u0307\u0309\7\u00c8\2\2\u0308\u0307\3\2\2\2")
        buf.write("\u0308\u0309\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u0310\5")
        buf.write("\u00a8U\2\u030b\u030d\7\u00a6\2\2\u030c\u030e\7\u00c8")
        buf.write("\2\2\u030d\u030c\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u030f")
        buf.write("\3\2\2\2\u030f\u0311\5\u00eex\2\u0310\u030b\3\2\2\2\u0310")
        buf.write("\u0311\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0313\7\u00d7")
        buf.write("\2\2\u0313\u032b\3\2\2\2\u0314\u0315\7\u00d6\2\2\u0315")
        buf.write("\u0316\5\u00a6T\2\u0316\u0317\7\60\2\2\u0317\u031d\5\u00a8")
        buf.write("U\2\u0318\u031a\7\u00a6\2\2\u0319\u031b\7\u00c8\2\2\u031a")
        buf.write("\u0319\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031c\3\2\2\2")
        buf.write("\u031c\u031e\5\u00eex\2\u031d\u0318\3\2\2\2\u031d\u031e")
        buf.write("\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u0320\7\u00d7\2\2\u0320")
        buf.write("\u032b\3\2\2\2\u0321\u0322\7\u00d6\2\2\u0322\u0323\5\u00ee")
        buf.write("x\2\u0323\u0324\7\60\2\2\u0324\u0325\7d\2\2\u0325\u0326")
        buf.write("\7\u00d6\2\2\u0326\u0327\5\u0104\u0083\2\u0327\u0328\7")
        buf.write("\u00d7\2\2\u0328\u0329\7\u00d7\2\2\u0329\u032b\3\2\2\2")
        buf.write("\u032a\u02fe\3\2\2\2\u032a\u0304\3\2\2\2\u032a\u0314\3")
        buf.write("\2\2\2\u032a\u0321\3\2\2\2\u032b\u0332\3\2\2\2\u032c\u0333")
        buf.write("\58\35\2\u032d\u032e\7\u00dd\2\2\u032e\u032f\5\64\33\2")
        buf.write("\u032f\u0330\7H\2\2\u0330\u0331\7\u00de\2\2\u0331\u0333")
        buf.write("\3\2\2\2\u0332\u032c\3\2\2\2\u0332\u032d\3\2\2\2\u0333")
        buf.write("a\3\2\2\2\u0334\u0335\7}\2\2\u0335\u0345\5<\37\2\u0336")
        buf.write("\u0338\5d\63\2\u0337\u0336\3\2\2\2\u0338\u0339\3\2\2\2")
        buf.write("\u0339\u0337\3\2\2\2\u0339\u033a\3\2\2\2\u033a\u033c\3")
        buf.write("\2\2\2\u033b\u033d\5f\64\2\u033c\u033b\3\2\2\2\u033c\u033d")
        buf.write("\3\2\2\2\u033d\u0346\3\2\2\2\u033e\u0340\5d\63\2\u033f")
        buf.write("\u033e\3\2\2\2\u0340\u0343\3\2\2\2\u0341\u033f\3\2\2\2")
        buf.write("\u0341\u0342\3\2\2\2\u0342\u0344\3\2\2\2\u0343\u0341\3")
        buf.write("\2\2\2\u0344\u0346\5f\64\2\u0345\u0337\3\2\2\2\u0345\u0341")
        buf.write("\3\2\2\2\u0346c\3\2\2\2\u0347\u0348\7\67\2\2\u0348\u0349")
        buf.write("\7\u00d6\2\2\u0349\u034e\5\u00c6d\2\u034a\u034b\7\u00c9")
        buf.write("\2\2\u034b\u034d\5\u00c6d\2\u034c\u034a\3\2\2\2\u034d")
        buf.write("\u0350\3\2\2\2\u034e\u034c\3\2\2\2\u034e\u034f\3\2\2\2")
        buf.write("\u034f\u0352\3\2\2\2\u0350\u034e\3\2\2\2\u0351\u0353\7")
        buf.write("\u00e2\2\2\u0352\u0351\3\2\2\2\u0352\u0353\3\2\2\2\u0353")
        buf.write("\u0354\3\2\2\2\u0354\u0355\7\u00d7\2\2\u0355\u0356\5<")
        buf.write("\37\2\u0356e\3\2\2\2\u0357\u0358\7P\2\2\u0358\u0359\5")
        buf.write("<\37\2\u0359g\3\2\2\2\u035a\u035b\7{\2\2\u035b\u035c\5")
        buf.write("\u00a6T\2\u035c\u035d\7\u00de\2\2\u035di\3\2\2\2\u035e")
        buf.write("\u035f\7V\2\2\u035f\u0360\5\u010a\u0086\2\u0360\u0361")
        buf.write("\7\u00de\2\2\u0361k\3\2\2\2\u0362\u0363\7<\2\2\u0363\u0364")
        buf.write("\7\u00d6\2\2\u0364\u0365\5p9\2\u0365\u036c\7\u00d7\2\2")
        buf.write("\u0366\u036d\58\35\2\u0367\u0368\7\u00dd\2\2\u0368\u0369")
        buf.write("\5\64\33\2\u0369\u036a\7F\2\2\u036a\u036b\7\u00de\2\2")
        buf.write("\u036b\u036d\3\2\2\2\u036c\u0366\3\2\2\2\u036c\u0367\3")
        buf.write("\2\2\2\u036dm\3\2\2\2\u036e\u0370\5\4\3\2\u036f\u036e")
        buf.write("\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u036f\3\2\2\2\u0371")
        buf.write("\u0372\3\2\2\2\u0372o\3\2\2\2\u0373\u0378\5r:\2\u0374")
        buf.write("\u0375\7\u00dc\2\2\u0375\u0377\5r:\2\u0376\u0374\3\2\2")
        buf.write("\2\u0377\u037a\3\2\2\2\u0378\u0376\3\2\2\2\u0378\u0379")
        buf.write("\3\2\2\2\u0379q\3\2\2\2\u037a\u0378\3\2\2\2\u037b\u037c")
        buf.write("\7\u0088\2\2\u037c\u037f\7\u00df\2\2\u037d\u0380\5\u00e2")
        buf.write("r\2\u037e\u0380\7\u00e6\2\2\u037f\u037d\3\2\2\2\u037f")
        buf.write("\u037e\3\2\2\2\u0380\u0388\3\2\2\2\u0381\u0382\7\u0089")
        buf.write("\2\2\u0382\u0383\7\u00df\2\2\u0383\u0388\7\u00ea\2\2\u0384")
        buf.write("\u0385\7\u008a\2\2\u0385\u0386\7\u00df\2\2\u0386\u0388")
        buf.write("\5\u00e2r\2\u0387\u037b\3\2\2\2\u0387\u0381\3\2\2\2\u0387")
        buf.write("\u0384\3\2\2\2\u0388s\3\2\2\2\u0389\u038b\5v<\2\u038a")
        buf.write("\u0389\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u0390\3\2\2\2")
        buf.write("\u038c\u038d\7\u00dc\2\2\u038d\u038f\5v<\2\u038e\u038c")
        buf.write("\3\2\2\2\u038f\u0392\3\2\2\2\u0390\u038e\3\2\2\2\u0390")
        buf.write("\u0391\3\2\2\2\u0391\u0394\3\2\2\2\u0392\u0390\3\2\2\2")
        buf.write("\u0393\u0395\7\u00dc\2\2\u0394\u0393\3\2\2\2\u0394\u0395")
        buf.write("\3\2\2\2\u0395u\3\2\2\2\u0396\u0398\5.\30\2\u0397\u0396")
        buf.write("\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039c\3\2\2\2\u0399")
        buf.write("\u039b\5\u010c\u0087\2\u039a\u0399\3\2\2\2\u039b\u039e")
        buf.write("\3\2\2\2\u039c\u039a\3\2\2\2\u039c\u039d\3\2\2\2\u039d")
        buf.write("\u03a0\3\2\2\2\u039e\u039c\3\2\2\2\u039f\u03a1\7\u00d5")
        buf.write("\2\2\u03a0\u039f\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a3")
        buf.write("\3\2\2\2\u03a2\u03a4\5x=\2\u03a3\u03a2\3\2\2\2\u03a3\u03a4")
        buf.write("\3\2\2\2\u03a4\u03a6\3\2\2\2\u03a5\u03a7\7\u00c8\2\2\u03a6")
        buf.write("\u03a5\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a9\3\2\2\2")
        buf.write("\u03a8\u03aa\7\u00c5\2\2\u03a9\u03a8\3\2\2\2\u03a9\u03aa")
        buf.write("\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ac\5\u0098M\2\u03ac")
        buf.write("w\3\2\2\2\u03ad\u03ae\b=\1\2\u03ae\u03b2\5\u00c6d\2\u03af")
        buf.write("\u03b2\7\65\2\2\u03b0\u03b2\5\u0112\u008a\2\u03b1\u03ad")
        buf.write("\3\2\2\2\u03b1\u03af\3\2\2\2\u03b1\u03b0\3\2\2\2\u03b2")
        buf.write("\u03b8\3\2\2\2\u03b3\u03b4\f\3\2\2\u03b4\u03b5\7\u00c9")
        buf.write("\2\2\u03b5\u03b7\5x=\4\u03b6\u03b3\3\2\2\2\u03b7\u03ba")
        buf.write("\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9")
        buf.write("y\3\2\2\2\u03ba\u03b8\3\2\2\2\u03bb\u03bc\7U\2\2\u03bc")
        buf.write("\u03c1\5|?\2\u03bd\u03be\7\u00dc\2\2\u03be\u03c0\5|?\2")
        buf.write("\u03bf\u03bd\3\2\2\2\u03c0\u03c3\3\2\2\2\u03c1\u03bf\3")
        buf.write("\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c4\3\2\2\2\u03c3\u03c1")
        buf.write("\3\2\2\2\u03c4\u03c5\7\u00de\2\2\u03c5{\3\2\2\2\u03c6")
        buf.write("\u03cf\7\u00e2\2\2\u03c7\u03c8\7\u00d3\2\2\u03c8\u03cf")
        buf.write("\5\u00eex\2\u03c9\u03ca\7\u00d3\2\2\u03ca\u03cb\7\u00da")
        buf.write("\2\2\u03cb\u03cc\5\u00a6T\2\u03cc\u03cd\7\u00db\2\2\u03cd")
        buf.write("\u03cf\3\2\2\2\u03ce\u03c6\3\2\2\2\u03ce\u03c7\3\2\2\2")
        buf.write("\u03ce\u03c9\3\2\2\2\u03cf}\3\2\2\2\u03d0\u03d1\7A\2\2")
        buf.write("\u03d1\u03d2\5\u00a2R\2\u03d2\u03d3\7\u00de\2\2\u03d3")
        buf.write("\177\3\2\2\2\u03d4\u03d5\7x\2\2\u03d5\u03da\5\u0098M\2")
        buf.write("\u03d6\u03d7\7\u00dc\2\2\u03d7\u03d9\5\u0098M\2\u03d8")
        buf.write("\u03d6\3\2\2\2\u03d9\u03dc\3\2\2\2\u03da\u03d8\3\2\2\2")
        buf.write("\u03da\u03db\3\2\2\2\u03db\u03dd\3\2\2\2\u03dc\u03da\3")
        buf.write("\2\2\2\u03dd\u03de\7\u00de\2\2\u03de\u0081\3\2\2\2\u03df")
        buf.write("\u03e1\5.\30\2\u03e0\u03df\3\2\2\2\u03e0\u03e1\3\2\2\2")
        buf.write("\u03e1\u0414\3\2\2\2\u03e2\u03e4\5\u0094K\2\u03e3\u03e5")
        buf.write("\5x=\2\u03e4\u03e3\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e6")
        buf.write("\3\2\2\2\u03e6\u03eb\5\u0098M\2\u03e7\u03e8\7\u00dc\2")
        buf.write("\2\u03e8\u03ea\5\u0098M\2\u03e9\u03e7\3\2\2\2\u03ea\u03ed")
        buf.write("\3\2\2\2\u03eb\u03e9\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec")
        buf.write("\u03ee\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ee\u03ef\7\u00de")
        buf.write("\2\2\u03ef\u0415\3\2\2\2\u03f0\u03f2\5\u0096L\2\u03f1")
        buf.write("\u03f0\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u0412\3\2\2\2")
        buf.write("\u03f3\u03f5\7:\2\2\u03f4\u03f6\5x=\2\u03f5\u03f4\3\2")
        buf.write("\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03fc")
        buf.write("\5\u009aN\2\u03f8\u03f9\7\u00dc\2\2\u03f9\u03fb\5\u009a")
        buf.write("N\2\u03fa\u03f8\3\2\2\2\u03fb\u03fe\3\2\2\2\u03fc\u03fa")
        buf.write("\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03ff\3\2\2\2\u03fe")
        buf.write("\u03fc\3\2\2\2\u03ff\u0400\7\u00de\2\2\u0400\u0413\3\2")
        buf.write("\2\2\u0401\u0403\7T\2\2\u0402\u0404\7\u00c8\2\2\u0403")
        buf.write("\u0402\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0405\3\2\2\2")
        buf.write("\u0405\u0407\5\u010a\u0086\2\u0406\u0408\5\"\22\2\u0407")
        buf.write("\u0406\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u0409\3\2\2\2")
        buf.write("\u0409\u040a\7\u00d6\2\2\u040a\u040b\5t;\2\u040b\u040e")
        buf.write("\7\u00d7\2\2\u040c\u040f\5\u008eH\2\u040d\u040f\5\u0090")
        buf.write("I\2\u040e\u040c\3\2\2\2\u040e\u040d\3\2\2\2\u040e\u040f")
        buf.write("\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0411\5\u0092J\2\u0411")
        buf.write("\u0413\3\2\2\2\u0412\u03f3\3\2\2\2\u0412\u0401\3\2\2\2")
        buf.write("\u0413\u0415\3\2\2\2\u0414\u03e2\3\2\2\2\u0414\u03f1\3")
        buf.write("\2\2\2\u0415\u041b\3\2\2\2\u0416\u0417\7\u0082\2\2\u0417")
        buf.write("\u0418\5\u00d4k\2\u0418\u0419\5\u0084C\2\u0419\u041b\3")
        buf.write("\2\2\2\u041a\u03e0\3\2\2\2\u041a\u0416\3\2\2\2\u041b\u0083")
        buf.write("\3\2\2\2\u041c\u0426\7\u00de\2\2\u041d\u0421\7\u00da\2")
        buf.write("\2\u041e\u0420\5\u0086D\2\u041f\u041e\3\2\2\2\u0420\u0423")
        buf.write("\3\2\2\2\u0421\u041f\3\2\2\2\u0421\u0422\3\2\2\2\u0422")
        buf.write("\u0424\3\2\2\2\u0423\u0421\3\2\2\2\u0424\u0426\7\u00db")
        buf.write("\2\2\u0425\u041c\3\2\2\2\u0425\u041d\3\2\2\2\u0426\u0085")
        buf.write("\3\2\2\2\u0427\u042a\5\u0088E\2\u0428\u042a\5\u008aF\2")
        buf.write("\u0429\u0427\3\2\2\2\u0429\u0428\3\2\2\2\u042a\u0087\3")
        buf.write("\2\2\2\u042b\u042c\5\u00ceh\2\u042c\u042d\7\u00c2\2\2")
        buf.write("\u042d\u042e\5\u010a\u0086\2\u042e\u042f\7]\2\2\u042f")
        buf.write("\u0430\5\u00d4k\2\u0430\u0431\7\u00de\2\2\u0431\u0089")
        buf.write("\3\2\2\2\u0432\u0433\5\u008cG\2\u0433\u0439\7\60\2\2\u0434")
        buf.write("\u043a\5\u010c\u0087\2\u0435\u0437\5\u010c\u0087\2\u0436")
        buf.write("\u0435\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u0438\3\2\2\2")
        buf.write("\u0438\u043a\5\u010a\u0086\2\u0439\u0434\3\2\2\2\u0439")
        buf.write("\u0436\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u043c\7\u00de")
        buf.write("\2\2\u043c\u008b\3\2\2\2\u043d\u043e\5\u00ceh\2\u043e")
        buf.write("\u043f\7\u00c2\2\2\u043f\u0441\3\2\2\2\u0440\u043d\3\2")
        buf.write("\2\2\u0440\u0441\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0443")
        buf.write("\5\u010a\u0086\2\u0443\u008d\3\2\2\2\u0444\u0445\7\u00dd")
        buf.write("\2\2\u0445\u0447\5\u010a\u0086\2\u0446\u0448\5\u00d6l")
        buf.write("\2\u0447\u0446\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u008f")
        buf.write("\3\2\2\2\u0449\u044b\7\u00dd\2\2\u044a\u044c\7\u00d5\2")
        buf.write("\2\u044b\u044a\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u044d")
        buf.write("\3\2\2\2\u044d\u044e\5x=\2\u044e\u0091\3\2\2\2\u044f\u0452")
        buf.write("\7\u00de\2\2\u0450\u0452\5<\37\2\u0451\u044f\3\2\2\2\u0451")
        buf.write("\u0450\3\2\2\2\u0452\u0093\3\2\2\2\u0453\u0456\5\u0096")
        buf.write("L\2\u0454\u0456\7\u0083\2\2\u0455\u0453\3\2\2\2\u0455")
        buf.write("\u0454\3\2\2\2\u0456\u0095\3\2\2\2\u0457\u0459\5\u010c")
        buf.write("\u0087\2\u0458\u0457\3\2\2\2\u0459\u045a\3\2\2\2\u045a")
        buf.write("\u0458\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u0097\3\2\2\2")
        buf.write("\u045c\u045f\7\u00e2\2\2\u045d\u045e\7\u00df\2\2\u045e")
        buf.write("\u0460\5\u00dco\2\u045f\u045d\3\2\2\2\u045f\u0460\3\2")
        buf.write("\2\2\u0460\u0099\3\2\2\2\u0461\u0462\5\u010a\u0086\2\u0462")
        buf.write("\u0463\7\u00df\2\2\u0463\u0464\5\u00dco\2\u0464\u009b")
        buf.write("\3\2\2\2\u0465\u0467\5.\30\2\u0466\u0465\3\2\2\2\u0466")
        buf.write("\u0467\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0469\7:\2\2")
        buf.write("\u0469\u046e\5\u009aN\2\u046a\u046b\7\u00dc\2\2\u046b")
        buf.write("\u046d\5\u009aN\2\u046c\u046a\3\2\2\2\u046d\u0470\3\2")
        buf.write("\2\2\u046e\u046c\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0471")
        buf.write("\3\2\2\2\u0470\u046e\3\2\2\2\u0471\u0472\7\u00de\2\2\u0472")
        buf.write("\u009d\3\2\2\2\u0473\u0474\7E\2\2\u0474\u0477\5\u010a")
        buf.write("\u0086\2\u0475\u0476\7\u00dd\2\2\u0476\u0478\t\5\2\2\u0477")
        buf.write("\u0475\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u047b\3\2\2\2")
        buf.write("\u0479\u047a\7X\2\2\u047a\u047c\5 \21\2\u047b\u0479\3")
        buf.write("\2\2\2\u047b\u047c\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u0481")
        buf.write("\7\u00da\2\2\u047e\u0480\5\u00a0Q\2\u047f\u047e\3\2\2")
        buf.write("\2\u0480\u0483\3\2\2\2\u0481\u047f\3\2\2\2\u0481\u0482")
        buf.write("\3\2\2\2\u0482\u0484\3\2\2\2\u0483\u0481\3\2\2\2\u0484")
        buf.write("\u0485\7\u00db\2\2\u0485\u009f\3\2\2\2\u0486\u0487\7\66")
        buf.write("\2\2\u0487\u048a\5\u010a\u0086\2\u0488\u0489\7\u00df\2")
        buf.write("\2\u0489\u048b\5\u00a6T\2\u048a\u0488\3\2\2\2\u048a\u048b")
        buf.write("\3\2\2\2\u048b\u048c\3\2\2\2\u048c\u048d\7\u00de\2\2\u048d")
        buf.write("\u0497\3\2\2\2\u048e\u0490\5\u0096L\2\u048f\u048e\3\2")
        buf.write("\2\2\u048f\u0490\3\2\2\2\u0490\u0491\3\2\2\2\u0491\u0497")
        buf.write("\5\32\16\2\u0492\u0493\7\u0082\2\2\u0493\u0494\5\u00d4")
        buf.write("k\2\u0494\u0495\5\u0084C\2\u0495\u0497\3\2\2\2\u0496\u0486")
        buf.write("\3\2\2\2\u0496\u048f\3\2\2\2\u0496\u0492\3\2\2\2\u0497")
        buf.write("\u00a1\3\2\2\2\u0498\u049d\5\u00a6T\2\u0499\u049a\7\u00dc")
        buf.write("\2\2\u049a\u049c\5\u00a6T\2\u049b\u0499\3\2\2\2\u049c")
        buf.write("\u049f\3\2\2\2\u049d\u049b\3\2\2\2\u049d\u049e\3\2\2\2")
        buf.write("\u049e\u00a3\3\2\2\2\u049f\u049d\3\2\2\2\u04a0\u04a3\7")
        buf.write("\u00d6\2\2\u04a1\u04a4\5\u00a6T\2\u04a2\u04a4\5\u00bc")
        buf.write("_\2\u04a3\u04a1\3\2\2\2\u04a3\u04a2\3\2\2\2\u04a4\u04a5")
        buf.write("\3\2\2\2\u04a5\u04a6\7\u00d7\2\2\u04a6\u00a5\3\2\2\2\u04a7")
        buf.write("\u04a8\bT\1\2\u04a8\u04a9\79\2\2\u04a9\u0502\5\u00a6T")
        buf.write("\62\u04aa\u0502\5\u00b8]\2\u04ab\u04ac\5\u00e6t\2\u04ac")
        buf.write("\u04ad\7\u00d8\2\2\u04ad\u04ae\5\u00a6T\2\u04ae\u04af")
        buf.write("\7\u00d9\2\2\u04af\u0502\3\2\2\2\u04b0\u04b1\7\u00d6\2")
        buf.write("\2\u04b1\u04b2\5\u0114\u008b\2\u04b2\u04b3\7\u00d7\2\2")
        buf.write("\u04b3\u04b4\5\u00a6T/\u04b4\u0502\3\2\2\2\u04b5\u04b6")
        buf.write("\t\6\2\2\u04b6\u0502\5\u00a6T.\u04b7\u04b8\t\7\2\2\u04b8")
        buf.write("\u0502\5\u00a6T-\u04b9\u04ba\t\b\2\2\u04ba\u0502\5\u00ee")
        buf.write("x\2\u04bb\u04bc\5\u00eex\2\u04bc\u04bd\t\b\2\2\u04bd\u0502")
        buf.write("\3\2\2\2\u04be\u04bf\7o\2\2\u04bf\u0502\5\u00a6T*\u04c0")
        buf.write("\u0502\5\u00aaV\2\u04c1\u0502\5\u00eex\2\u04c2\u0502\5")
        buf.write("\u00dep\2\u04c3\u0502\5\u00e8u\2\u04c4\u0502\7\u00e3\2")
        buf.write("\2\u04c5\u0502\7\u00e9\2\2\u04c6\u0502\5\u00a4S\2\u04c7")
        buf.write("\u0502\7\u0085\2\2\u04c8\u04c9\7d\2\2\u04c9\u04ca\7\u00d6")
        buf.write("\2\2\u04ca\u04cb\5\u0104\u0083\2\u04cb\u04cc\7\u00d7\2")
        buf.write("\2\u04cc\u04cd\7\u00df\2\2\u04cd\u04ce\5\u00a6T!\u04ce")
        buf.write("\u0502\3\2\2\2\u04cf\u04d0\7c\2\2\u04d0\u04d1\7\u00d6")
        buf.write("\2\2\u04d1\u04d2\5\u00ecw\2\u04d2\u04d3\7\u00d7\2\2\u04d3")
        buf.write("\u0502\3\2\2\2\u04d4\u04d5\7D\2\2\u04d5\u04d6\7\u00d6")
        buf.write("\2\2\u04d6\u04d7\5\u00eex\2\u04d7\u04d8\7\u00d7\2\2\u04d8")
        buf.write("\u0502\3\2\2\2\u04d9\u04da\7L\2\2\u04da\u04db\7\u00d6")
        buf.write("\2\2\u04db\u04dc\5\u00a6T\2\u04dc\u04dd\7\u00d7\2\2\u04dd")
        buf.write("\u0502\3\2\2\2\u04de\u04e2\7M\2\2\u04df\u04e0\7\u00d6")
        buf.write("\2\2\u04e0\u04e3\7\u00d7\2\2\u04e1\u04e3\5\u00a4S\2\u04e2")
        buf.write("\u04df\3\2\2\2\u04e2\u04e1\3\2\2\2\u04e2\u04e3\3\2\2\2")
        buf.write("\u04e3\u0502\3\2\2\2\u04e4\u04e5\t\t\2\2\u04e5\u0502\5")
        buf.write("\u00a6T\34\u04e6\u04e7\t\n\2\2\u04e7\u0502\5\u00a6T\33")
        buf.write("\u04e8\u0502\5\u00b2Z\2\u04e9\u0502\5\u00b4[\2\u04ea\u04eb")
        buf.write("\7{\2\2\u04eb\u0502\5\u00a6T\t\u04ec\u04ed\5\u00acW\2")
        buf.write("\u04ed\u04ee\7\u00df\2\2\u04ee\u04ef\5\u00a6T\b\u04ef")
        buf.write("\u0502\3\2\2\2\u04f0\u04f1\5\u00a8U\2\u04f1\u04f3\5\u00ba")
        buf.write("^\2\u04f2\u04f4\5.\30\2\u04f3\u04f2\3\2\2\2\u04f3\u04f4")
        buf.write("\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04f6\5\u00a6T\7\u04f6")
        buf.write("\u0502\3\2\2\2\u04f7\u04f8\5\u00a8U\2\u04f8\u04fa\7\u00df")
        buf.write("\2\2\u04f9\u04fb\5.\30\2\u04fa\u04f9\3\2\2\2\u04fa\u04fb")
        buf.write("\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u04ff\7\u00c8\2\2\u04fd")
        buf.write("\u0500\5\u00eex\2\u04fe\u0500\5\u00b8]\2\u04ff\u04fd\3")
        buf.write("\2\2\2\u04ff\u04fe\3\2\2\2\u0500\u0502\3\2\2\2\u0501\u04a7")
        buf.write("\3\2\2\2\u0501\u04aa\3\2\2\2\u0501\u04ab\3\2\2\2\u0501")
        buf.write("\u04b0\3\2\2\2\u0501\u04b5\3\2\2\2\u0501\u04b7\3\2\2\2")
        buf.write("\u0501\u04b9\3\2\2\2\u0501\u04bb\3\2\2\2\u0501\u04be\3")
        buf.write("\2\2\2\u0501\u04c0\3\2\2\2\u0501\u04c1\3\2\2\2\u0501\u04c2")
        buf.write("\3\2\2\2\u0501\u04c3\3\2\2\2\u0501\u04c4\3\2\2\2\u0501")
        buf.write("\u04c5\3\2\2\2\u0501\u04c6\3\2\2\2\u0501\u04c7\3\2\2\2")
        buf.write("\u0501\u04c8\3\2\2\2\u0501\u04cf\3\2\2\2\u0501\u04d4\3")
        buf.write("\2\2\2\u0501\u04d9\3\2\2\2\u0501\u04de\3\2\2\2\u0501\u04e4")
        buf.write("\3\2\2\2\u0501\u04e6\3\2\2\2\u0501\u04e8\3\2\2\2\u0501")
        buf.write("\u04e9\3\2\2\2\u0501\u04ea\3\2\2\2\u0501\u04ec\3\2\2\2")
        buf.write("\u0501\u04f0\3\2\2\2\u0501\u04f7\3\2\2\2\u0502\u053f\3")
        buf.write("\2\2\2\u0503\u0504\f\30\2\2\u0504\u0505\7\u00b2\2\2\u0505")
        buf.write("\u053e\5\u00a6T\30\u0506\u0507\f\26\2\2\u0507\u0508\t")
        buf.write("\13\2\2\u0508\u053e\5\u00a6T\27\u0509\u050a\f\25\2\2\u050a")
        buf.write("\u050b\t\f\2\2\u050b\u053e\5\u00a6T\26\u050c\u050d\f\24")
        buf.write("\2\2\u050d\u050e\t\r\2\2\u050e\u053e\5\u00a6T\25\u050f")
        buf.write("\u0510\f\23\2\2\u0510\u0511\t\16\2\2\u0511\u053e\5\u00a6")
        buf.write("T\24\u0512\u0513\f\22\2\2\u0513\u0514\t\17\2\2\u0514\u053e")
        buf.write("\5\u00a6T\23\u0515\u0516\f\21\2\2\u0516\u0517\7\u00c8")
        buf.write("\2\2\u0517\u053e\5\u00a6T\22\u0518\u0519\f\20\2\2\u0519")
        buf.write("\u051a\7\u00cb\2\2\u051a\u053e\5\u00a6T\21\u051b\u051c")
        buf.write("\f\17\2\2\u051c\u051d\7\u00c9\2\2\u051d\u053e\5\u00a6")
        buf.write("T\20\u051e\u051f\f\16\2\2\u051f\u0520\7\u00bd\2\2\u0520")
        buf.write("\u053e\5\u00a6T\17\u0521\u0522\f\r\2\2\u0522\u0523\7\u00bc")
        buf.write("\2\2\u0523\u053e\5\u00a6T\16\u0524\u0525\f\f\2\2\u0525")
        buf.write("\u0527\7\u00d5\2\2\u0526\u0528\5\u00a6T\2\u0527\u0526")
        buf.write("\3\2\2\2\u0527\u0528\3\2\2\2\u0528\u0529\3\2\2\2\u0529")
        buf.write("\u052a\7\u00dd\2\2\u052a\u053e\5\u00a6T\r\u052b\u052c")
        buf.write("\f\13\2\2\u052c\u052d\7\u00be\2\2\u052d\u053e\5\u00a6")
        buf.write("T\f\u052e\u052f\f\n\2\2\u052f\u0530\7\u00a3\2\2\u0530")
        buf.write("\u053e\5\u00a6T\13\u0531\u0532\f\5\2\2\u0532\u0533\7e")
        buf.write("\2\2\u0533\u053e\5\u00a6T\6\u0534\u0535\f\4\2\2\u0535")
        buf.write("\u0536\7g\2\2\u0536\u053e\5\u00a6T\5\u0537\u0538\f\3\2")
        buf.write("\2\u0538\u0539\7f\2\2\u0539\u053e\5\u00a6T\4\u053a\u053b")
        buf.write("\f\27\2\2\u053b\u053c\7\\\2\2\u053c\u053e\5\u00c8e\2\u053d")
        buf.write("\u0503\3\2\2\2\u053d\u0506\3\2\2\2\u053d\u0509\3\2\2\2")
        buf.write("\u053d\u050c\3\2\2\2\u053d\u050f\3\2\2\2\u053d\u0512\3")
        buf.write("\2\2\2\u053d\u0515\3\2\2\2\u053d\u0518\3\2\2\2\u053d\u051b")
        buf.write("\3\2\2\2\u053d\u051e\3\2\2\2\u053d\u0521\3\2\2\2\u053d")
        buf.write("\u0524\3\2\2\2\u053d\u052b\3\2\2\2\u053d\u052e\3\2\2\2")
        buf.write("\u053d\u0531\3\2\2\2\u053d\u0534\3\2\2\2\u053d\u0537\3")
        buf.write("\2\2\2\u053d\u053a\3\2\2\2\u053e\u0541\3\2\2\2\u053f\u053d")
        buf.write("\3\2\2\2\u053f\u0540\3\2\2\2\u0540\u00a7\3\2\2\2\u0541")
        buf.write("\u053f\3\2\2\2\u0542\u0545\5\u00eex\2\u0543\u0545\5\u00aa")
        buf.write("V\2\u0544\u0542\3\2\2\2\u0544\u0543\3\2\2\2\u0545\u00a9")
        buf.write("\3\2\2\2\u0546\u0547\7/\2\2\u0547\u0549\7\u00d6\2\2\u0548")
        buf.write("\u054a\5\u00be`\2\u0549\u0548\3\2\2\2\u0549\u054a\3\2")
        buf.write("\2\2\u054a\u054b\3\2\2\2\u054b\u0552\7\u00d7\2\2\u054c")
        buf.write("\u054e\7\u00d8\2\2\u054d\u054f\5\u00be`\2\u054e\u054d")
        buf.write("\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0550\3\2\2\2\u0550")
        buf.write("\u0552\7\u00d9\2\2\u0551\u0546\3\2\2\2\u0551\u054c\3\2")
        buf.write("\2\2\u0552\u0557\3\2\2\2\u0553\u0554\7\u00d8\2\2\u0554")
        buf.write("\u0555\5\u00a6T\2\u0555\u0556\7\u00d9\2\2\u0556\u0558")
        buf.write("\3\2\2\2\u0557\u0553\3\2\2\2\u0557\u0558\3\2\2\2\u0558")
        buf.write("\u00ab\3\2\2\2\u0559\u055d\7\u00d8\2\2\u055a\u055c\7\u00dc")
        buf.write("\2\2\u055b\u055a\3\2\2\2\u055c\u055f\3\2\2\2\u055d\u055b")
        buf.write("\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u0560\3\2\2\2\u055f")
        buf.write("\u055d\3\2\2\2\u0560\u0569\5\u00aeX\2\u0561\u0563\7\u00dc")
        buf.write("\2\2\u0562\u0561\3\2\2\2\u0563\u0564\3\2\2\2\u0564\u0562")
        buf.write("\3\2\2\2\u0564\u0565\3\2\2\2\u0565\u0566\3\2\2\2\u0566")
        buf.write("\u0568\5\u00aeX\2\u0567\u0562\3\2\2\2\u0568\u056b\3\2")
        buf.write("\2\2\u0569\u0567\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u056f")
        buf.write("\3\2\2\2\u056b\u0569\3\2\2\2\u056c\u056e\7\u00dc\2\2\u056d")
        buf.write("\u056c\3\2\2\2\u056e\u0571\3\2\2\2\u056f\u056d\3\2\2\2")
        buf.write("\u056f\u0570\3\2\2\2\u0570\u0572\3\2\2\2\u0571\u056f\3")
        buf.write("\2\2\2\u0572\u0573\7\u00d9\2\2\u0573\u0587\3\2\2\2\u0574")
        buf.write("\u0575\7\u00d8\2\2\u0575\u057e\5\u00b0Y\2\u0576\u0578")
        buf.write("\7\u00dc\2\2\u0577\u0576\3\2\2\2\u0578\u0579\3\2\2\2\u0579")
        buf.write("\u0577\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u057b\3\2\2\2")
        buf.write("\u057b\u057d\5\u00b0Y\2\u057c\u0577\3\2\2\2\u057d\u0580")
        buf.write("\3\2\2\2\u057e\u057c\3\2\2\2\u057e\u057f\3\2\2\2\u057f")
        buf.write("\u0582\3\2\2\2\u0580\u057e\3\2\2\2\u0581\u0583\7\u00dc")
        buf.write("\2\2\u0582\u0581\3\2\2\2\u0582\u0583\3\2\2\2\u0583\u0584")
        buf.write("\3\2\2\2\u0584\u0585\7\u00d9\2\2\u0585\u0587\3\2\2\2\u0586")
        buf.write("\u0559\3\2\2\2\u0586\u0574\3\2\2\2\u0587\u00ad\3\2\2\2")
        buf.write("\u0588\u058a\7\u00c8\2\2\u0589\u0588\3\2\2\2\u0589\u058a")
        buf.write("\3\2\2\2\u058a\u058b\3\2\2\2\u058b\u058c\5\u00eex\2\u058c")
        buf.write("\u00af\3\2\2\2\u058d\u058e\5\u00a6T\2\u058e\u058f\7\u00a6")
        buf.write("\2\2\u058f\u0591\3\2\2\2\u0590\u058d\3\2\2\2\u0590\u0591")
        buf.write("\3\2\2\2\u0591\u0593\3\2\2\2\u0592\u0594\7\u00c8\2\2\u0593")
        buf.write("\u0592\3\2\2\2\u0593\u0594\3\2\2\2\u0594\u0595\3\2\2\2")
        buf.write("\u0595\u0596\5\u00eex\2\u0596\u00b1\3\2\2\2\u0597\u0599")
        buf.write("\7x\2\2\u0598\u0597\3\2\2\2\u0598\u0599\3\2\2\2\u0599")
        buf.write("\u059a\3\2\2\2\u059a\u059c\7T\2\2\u059b\u059d\7\u00c8")
        buf.write("\2\2\u059c\u059b\3\2\2\2\u059c\u059d\3\2\2\2\u059d\u059e")
        buf.write("\3\2\2\2\u059e\u059f\7\u00d6\2\2\u059f\u05a0\5t;\2\u05a0")
        buf.write("\u05a2\7\u00d7\2\2\u05a1\u05a3\5\u00c2b\2\u05a2\u05a1")
        buf.write("\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a6\3\2\2\2\u05a4")
        buf.write("\u05a5\7\u00dd\2\2\u05a5\u05a7\5x=\2\u05a6\u05a4\3\2\2")
        buf.write("\2\u05a6\u05a7\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8\u05a9")
        buf.write("\5<\37\2\u05a9\u05b2\3\2\2\2\u05aa\u05ab\7\u0087\2\2\u05ab")
        buf.write("\u05ac\7\u00d6\2\2\u05ac\u05ad\5t;\2\u05ad\u05ae\7\u00d7")
        buf.write("\2\2\u05ae\u05af\7\u00a6\2\2\u05af\u05b0\5\u00a6T\2\u05b0")
        buf.write("\u05b2\3\2\2\2\u05b1\u0598\3\2\2\2\u05b1\u05aa\3\2\2\2")
        buf.write("\u05b2\u00b3\3\2\2\2\u05b3\u05b4\7h\2\2\u05b4\u05b5\7")
        buf.write("\u00d6\2\2\u05b5\u05b6\5\u00a6T\2\u05b6\u05b7\7\u00d7")
        buf.write("\2\2\u05b7\u05b8\7\u00da\2\2\u05b8\u05bd\5\u00b6\\\2\u05b9")
        buf.write("\u05ba\7\u00dc\2\2\u05ba\u05bc\5\u00b6\\\2\u05bb\u05b9")
        buf.write("\3\2\2\2\u05bc\u05bf\3\2\2\2\u05bd\u05bb\3\2\2\2\u05bd")
        buf.write("\u05be\3\2\2\2\u05be\u05c1\3\2\2\2\u05bf\u05bd\3\2\2\2")
        buf.write("\u05c0\u05c2\7\u00dc\2\2\u05c1\u05c0\3\2\2\2\u05c1\u05c2")
        buf.write("\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3\u05c4\7\u00db\2\2\u05c4")
        buf.write("\u00b5\3\2\2\2\u05c5\u05ca\5\u00a6T\2\u05c6\u05c7\7\u00dc")
        buf.write("\2\2\u05c7\u05c9\5\u00a6T\2\u05c8\u05c6\3\2\2\2\u05c9")
        buf.write("\u05cc\3\2\2\2\u05ca\u05c8\3\2\2\2\u05ca\u05cb\3\2\2\2")
        buf.write("\u05cb\u05cd\3\2\2\2\u05cc\u05ca\3\2\2\2\u05cd\u05ce\7")
        buf.write("\u00a6\2\2\u05ce\u05cf\5\u00a6T\2\u05cf\u00b7\3\2\2\2")
        buf.write("\u05d0\u05d1\7j\2\2\u05d1\u05d3\5\u00c8e\2\u05d2\u05d4")
        buf.write("\5\u00d6l\2\u05d3\u05d2\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4")
        buf.write("\u00b9\3\2\2\2\u05d5\u05d6\t\20\2\2\u05d6\u00bb\3\2\2")
        buf.write("\2\u05d7\u05df\7\u0085\2\2\u05d8\u05db\5\u00a6T\2\u05d9")
        buf.write("\u05da\7\u00a6\2\2\u05da\u05dc\5\u00a6T\2\u05db\u05d9")
        buf.write("\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05e0\3\2\2\2\u05dd")
        buf.write("\u05de\7\u0086\2\2\u05de\u05e0\5\u00a6T\2\u05df\u05d8")
        buf.write("\3\2\2\2\u05df\u05dd\3\2\2\2\u05e0\u00bd\3\2\2\2\u05e1")
        buf.write("\u05e6\5\u00c0a\2\u05e2\u05e3\7\u00dc\2\2\u05e3\u05e5")
        buf.write("\5\u00c0a\2\u05e4\u05e2\3\2\2\2\u05e5\u05e8\3\2\2\2\u05e6")
        buf.write("\u05e4\3\2\2\2\u05e6\u05e7\3\2\2\2\u05e7\u05ea\3\2\2\2")
        buf.write("\u05e8\u05e6\3\2\2\2\u05e9\u05eb\7\u00dc\2\2\u05ea\u05e9")
        buf.write("\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb\u00bf\3\2\2\2\u05ec")
        buf.write("\u05ef\5\u00a6T\2\u05ed\u05ee\7\u00a6\2\2\u05ee\u05f0")
        buf.write("\5\u00a6T\2\u05ef\u05ed\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0")
        buf.write("\u05f9\3\2\2\2\u05f1\u05f2\5\u00a6T\2\u05f2\u05f3\7\u00a6")
        buf.write("\2\2\u05f3\u05f5\3\2\2\2\u05f4\u05f1\3\2\2\2\u05f4\u05f5")
        buf.write("\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f7\7\u00c8\2\2\u05f7")
        buf.write("\u05f9\5\u00eex\2\u05f8\u05ec\3\2\2\2\u05f8\u05f4\3\2")
        buf.write("\2\2\u05f9\u00c1\3\2\2\2\u05fa\u05fb\7\u0082\2\2\u05fb")
        buf.write("\u05fc\7\u00d6\2\2\u05fc\u0601\5\u00c4c\2\u05fd\u05fe")
        buf.write("\7\u00dc\2\2\u05fe\u0600\5\u00c4c\2\u05ff\u05fd\3\2\2")
        buf.write("\2\u0600\u0603\3\2\2\2\u0601\u05ff\3\2\2\2\u0601\u0602")
        buf.write("\3\2\2\2\u0602\u0604\3\2\2\2\u0603\u0601\3\2\2\2\u0604")
        buf.write("\u0605\7\u00d7\2\2\u0605\u00c3\3\2\2\2\u0606\u0608\7\u00c8")
        buf.write("\2\2\u0607\u0606\3\2\2\2\u0607\u0608\3\2\2\2\u0608\u0609")
        buf.write("\3\2\2\2\u0609\u060a\7\u00e2\2\2\u060a\u00c5\3\2\2\2\u060b")
        buf.write("\u060d\5\u00ceh\2\u060c\u060e\5,\27\2\u060d\u060c\3\2")
        buf.write("\2\2\u060d\u060e\3\2\2\2\u060e\u0611\3\2\2\2\u060f\u0611")
        buf.write("\7x\2\2\u0610\u060b\3\2\2\2\u0610\u060f\3\2\2\2\u0611")
        buf.write("\u00c7\3\2\2\2\u0612\u0615\5\u00ceh\2\u0613\u0615\5\u00cc")
        buf.write("g\2\u0614\u0612\3\2\2\2\u0614\u0613\3\2\2\2\u0615\u0617")
        buf.write("\3\2\2\2\u0616\u0618\5,\27\2\u0617\u0616\3\2\2\2\u0617")
        buf.write("\u0618\3\2\2\2\u0618\u061d\3\2\2\2\u0619\u061d\5\u0112")
        buf.write("\u008a\2\u061a\u061d\7x\2\2\u061b\u061d\5\u00caf\2\u061c")
        buf.write("\u0614\3\2\2\2\u061c\u0619\3\2\2\2\u061c\u061a\3\2\2\2")
        buf.write("\u061c\u061b\3\2\2\2\u061d\u00c9\3\2\2\2\u061e\u0620\5")
        buf.write(".\30\2\u061f\u061e\3\2\2\2\u061f\u0620\3\2\2\2\u0620\u0622")
        buf.write("\3\2\2\2\u0621\u0623\7p\2\2\u0622\u0621\3\2\2\2\u0622")
        buf.write("\u0623\3\2\2\2\u0623\u0625\3\2\2\2\u0624\u0626\5\u0108")
        buf.write("\u0085\2\u0625\u0624\3\2\2\2\u0625\u0626\3\2\2\2\u0626")
        buf.write("\u0628\3\2\2\2\u0627\u0629\7n\2\2\u0628\u0627\3\2\2\2")
        buf.write("\u0628\u0629\3\2\2\2\u0629\u063f\3\2\2\2\u062a\u062c\5")
        buf.write("\36\20\2\u062b\u062d\5\"\22\2\u062c\u062b\3\2\2\2\u062c")
        buf.write("\u062d\3\2\2\2\u062d\u0630\3\2\2\2\u062e\u062f\7N\2\2")
        buf.write("\u062f\u0631\5\u00c6d\2\u0630\u062e\3\2\2\2\u0630\u0631")
        buf.write("\3\2\2\2\u0631\u0634\3\2\2\2\u0632\u0633\7X\2\2\u0633")
        buf.write("\u0635\5 \21\2\u0634\u0632\3\2\2\2\u0634\u0635\3\2\2\2")
        buf.write("\u0635\u0640\3\2\2\2\u0636\u0637\7b\2\2\u0637\u0639\5")
        buf.write("\u010a\u0086\2\u0638\u063a\5\"\22\2\u0639\u0638\3\2\2")
        buf.write("\2\u0639\u063a\3\2\2\2\u063a\u063d\3\2\2\2\u063b\u063c")
        buf.write("\7N\2\2\u063c\u063e\5 \21\2\u063d\u063b\3\2\2\2\u063d")
        buf.write("\u063e\3\2\2\2\u063e\u0640\3\2\2\2\u063f\u062a\3\2\2\2")
        buf.write("\u063f\u0636\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u0645\7")
        buf.write("\u00da\2\2\u0642\u0644\5\u0082B\2\u0643\u0642\3\2\2\2")
        buf.write("\u0644\u0647\3\2\2\2\u0645\u0643\3\2\2\2\u0645\u0646\3")
        buf.write("\2\2\2\u0646\u0648\3\2\2\2\u0647\u0645\3\2\2\2\u0648\u0649")
        buf.write("\7\u00db\2\2\u0649\u00cb\3\2\2\2\u064a\u064f\5\u00fa~")
        buf.write("\2\u064b\u064c\7\u00c3\2\2\u064c\u064e\5\u00fc\177\2\u064d")
        buf.write("\u064b\3\2\2\2\u064e\u0651\3\2\2\2\u064f\u064d\3\2\2\2")
        buf.write("\u064f\u0650\3\2\2\2\u0650\u00cd\3\2\2\2\u0651\u064f\3")
        buf.write("\2\2\2\u0652\u0654\7i\2\2\u0653\u0652\3\2\2\2\u0653\u0654")
        buf.write("\3\2\2\2\u0654\u0656\3\2\2\2\u0655\u0657\7\u00c4\2\2\u0656")
        buf.write("\u0655\3\2\2\2\u0656\u0657\3\2\2\2\u0657\u0658\3\2\2\2")
        buf.write("\u0658\u0659\5\u00d0i\2\u0659\u00cf\3\2\2\2\u065a\u0668")
        buf.write("\5\u010a\u0086\2\u065b\u0660\5\u010a\u0086\2\u065c\u065d")
        buf.write("\7\u00c4\2\2\u065d\u065f\5\u010a\u0086\2\u065e\u065c\3")
        buf.write("\2\2\2\u065f\u0662\3\2\2\2\u0660\u065e\3\2\2\2\u0660\u0661")
        buf.write("\3\2\2\2\u0661\u0665\3\2\2\2\u0662\u0660\3\2\2\2\u0663")
        buf.write("\u0664\7\u00c4\2\2\u0664\u0666\5\u00d2j\2\u0665\u0663")
        buf.write("\3\2\2\2\u0665\u0666\3\2\2\2\u0666\u0668\3\2\2\2\u0667")
        buf.write("\u065a\3\2\2\2\u0667\u065b\3\2\2\2\u0668\u00d1\3\2\2\2")
        buf.write("\u0669\u066c\5\u010a\u0086\2\u066a\u066b\7\60\2\2\u066b")
        buf.write("\u066d\5\u010a\u0086\2\u066c\u066a\3\2\2\2\u066c\u066d")
        buf.write("\3\2\2\2\u066d\u067d\3\2\2\2\u066e\u066f\7\u00da\2\2\u066f")
        buf.write("\u0674\5\u00d2j\2\u0670\u0671\7\u00dc\2\2\u0671\u0673")
        buf.write("\5\u00d2j\2\u0672\u0670\3\2\2\2\u0673\u0676\3\2\2\2\u0674")
        buf.write("\u0672\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0678\3\2\2\2")
        buf.write("\u0676\u0674\3\2\2\2\u0677\u0679\7\u00dc\2\2\u0678\u0677")
        buf.write("\3\2\2\2\u0678\u0679\3\2\2\2\u0679\u067a\3\2\2\2\u067a")
        buf.write("\u067b\7\u00db\2\2\u067b\u067d\3\2\2\2\u067c\u0669\3\2")
        buf.write("\2\2\u067c\u066e\3\2\2\2\u067d\u00d3\3\2\2\2\u067e\u0683")
        buf.write("\5\u00ceh\2\u067f\u0680\7\u00dc\2\2\u0680\u0682\5\u00ce")
        buf.write("h\2\u0681\u067f\3\2\2\2\u0682\u0685\3\2\2\2\u0683\u0681")
        buf.write("\3\2\2\2\u0683\u0684\3\2\2\2\u0684\u00d5\3\2\2\2\u0685")
        buf.write("\u0683\3\2\2\2\u0686\u0690\7\u00d6\2\2\u0687\u068c\5\u00d8")
        buf.write("m\2\u0688\u0689\7\u00dc\2\2\u0689\u068b\5\u00d8m\2\u068a")
        buf.write("\u0688\3\2\2\2\u068b\u068e\3\2\2\2\u068c\u068a\3\2\2\2")
        buf.write("\u068c\u068d\3\2\2\2\u068d\u0691\3\2\2\2\u068e\u068c\3")
        buf.write("\2\2\2\u068f\u0691\5\u00bc_\2\u0690\u0687\3\2\2\2\u0690")
        buf.write("\u068f\3\2\2\2\u0690\u0691\3\2\2\2\u0691\u0693\3\2\2\2")
        buf.write("\u0692\u0694\7\u00dc\2\2\u0693\u0692\3\2\2\2\u0693\u0694")
        buf.write("\3\2\2\2\u0694\u0695\3\2\2\2\u0695\u0696\7\u00d7\2\2\u0696")
        buf.write("\u00d7\3\2\2\2\u0697\u0699\5\u00dan\2\u0698\u0697\3\2")
        buf.write("\2\2\u0698\u0699\3\2\2\2\u0699\u069b\3\2\2\2\u069a\u069c")
        buf.write("\7\u00c5\2\2\u069b\u069a\3\2\2\2\u069b\u069c\3\2\2\2\u069c")
        buf.write("\u069d\3\2\2\2\u069d\u06a1\5\u00a6T\2\u069e\u069f\7\u00c8")
        buf.write("\2\2\u069f\u06a1\5\u00eex\2\u06a0\u0698\3\2\2\2\u06a0")
        buf.write("\u069e\3\2\2\2\u06a1\u00d9\3\2\2\2\u06a2\u06a3\5\u010a")
        buf.write("\u0086\2\u06a3\u06a4\7\u00dd\2\2\u06a4\u00db\3\2\2\2\u06a5")
        buf.write("\u06c9\5\u00dep\2\u06a6\u06c9\5\u00e8u\2\u06a7\u06a8\7")
        buf.write("/\2\2\u06a8\u06ad\7\u00d6\2\2\u06a9\u06ab\5\u00be`\2\u06aa")
        buf.write("\u06ac\7\u00dc\2\2\u06ab\u06aa\3\2\2\2\u06ab\u06ac\3\2")
        buf.write("\2\2\u06ac\u06ae\3\2\2\2\u06ad\u06a9\3\2\2\2\u06ad\u06ae")
        buf.write("\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06c9\7\u00d7\2\2\u06b0")
        buf.write("\u06b5\7\u00d8\2\2\u06b1\u06b3\5\u00be`\2\u06b2\u06b4")
        buf.write("\7\u00dc\2\2\u06b3\u06b2\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4")
        buf.write("\u06b6\3\2\2\2\u06b5\u06b1\3\2\2\2\u06b5\u06b6\3\2\2\2")
        buf.write("\u06b6\u06b7\3\2\2\2\u06b7\u06c9\7\u00d9\2\2\u06b8\u06b9")
        buf.write("\t\21\2\2\u06b9\u06c9\5\u00dco\2\u06ba\u06bd\5\u00e8u")
        buf.write("\2\u06bb\u06bd\5\u00dep\2\u06bc\u06ba\3\2\2\2\u06bc\u06bb")
        buf.write("\3\2\2\2\u06bd\u06c5\3\2\2\2\u06be\u06c1\7\u00d4\2\2\u06bf")
        buf.write("\u06c2\5\u00e8u\2\u06c0\u06c2\5\u00dep\2\u06c1\u06bf\3")
        buf.write("\2\2\2\u06c1\u06c0\3\2\2\2\u06c2\u06c4\3\2\2\2\u06c3\u06be")
        buf.write("\3\2\2\2\u06c4\u06c7\3\2\2\2\u06c5\u06c3\3\2\2\2\u06c5")
        buf.write("\u06c6\3\2\2\2\u06c6\u06c9\3\2\2\2\u06c7\u06c5\3\2\2\2")
        buf.write("\u06c8\u06a5\3\2\2\2\u06c8\u06a6\3\2\2\2\u06c8\u06a7\3")
        buf.write("\2\2\2\u06c8\u06b0\3\2\2\2\u06c8\u06b8\3\2\2\2\u06c8\u06bc")
        buf.write("\3\2\2\2\u06c9\u00dd\3\2\2\2\u06ca\u06d0\7k\2\2\u06cb")
        buf.write("\u06d0\5\u00e0q\2\u06cc\u06d0\5\u010e\u0088\2\u06cd\u06d0")
        buf.write("\5\u00e4s\2\u06ce\u06d0\5\u00ceh\2\u06cf\u06ca\3\2\2\2")
        buf.write("\u06cf\u06cb\3\2\2\2\u06cf\u06cc\3\2\2\2\u06cf\u06cd\3")
        buf.write("\2\2\2\u06cf\u06ce\3\2\2\2\u06d0\u00df\3\2\2\2\u06d1\u06d6")
        buf.write("\7\u00e6\2\2\u06d2\u06d6\7\63\2\2\u06d3\u06d6\5\u00e2")
        buf.write("r\2\u06d4\u06d6\5\u00e6t\2\u06d5\u06d1\3\2\2\2\u06d5\u06d2")
        buf.write("\3\2\2\2\u06d5\u06d3\3\2\2\2\u06d5\u06d4\3\2\2\2\u06d6")
        buf.write("\u00e1\3\2\2\2\u06d7\u06d8\t\22\2\2\u06d8\u00e3\3\2\2")
        buf.write("\2\u06d9\u06da\t\23\2\2\u06da\u06df\7\u00c2\2\2\u06db")
        buf.write("\u06e0\5\u010a\u0086\2\u06dc\u06e0\7\u008f\2\2\u06dd\u06e0")
        buf.write("\7\u008b\2\2\u06de\u06e0\7\u008c\2\2\u06df\u06db\3\2\2")
        buf.write("\2\u06df\u06dc\3\2\2\2\u06df\u06dd\3\2\2\2\u06df\u06de")
        buf.write("\3\2\2\2\u06e0\u06ec\3\2\2\2\u06e1\u06e5\5\u00c6d\2\u06e2")
        buf.write("\u06e5\5\u0100\u0081\2\u06e3\u06e5\5\u00e8u\2\u06e4\u06e1")
        buf.write("\3\2\2\2\u06e4\u06e2\3\2\2\2\u06e4\u06e3\3\2\2\2\u06e5")
        buf.write("\u06e6\3\2\2\2\u06e6\u06e9\7\u00c2\2\2\u06e7\u06ea\5\u010a")
        buf.write("\u0086\2\u06e8\u06ea\5\u0100\u0081\2\u06e9\u06e7\3\2\2")
        buf.write("\2\u06e9\u06e8\3\2\2\2\u06ea\u06ec\3\2\2\2\u06eb\u06d9")
        buf.write("\3\2\2\2\u06eb\u06e4\3\2\2\2\u06ec\u00e5\3\2\2\2\u06ed")
        buf.write("\u06ee\7\u00e3\2\2\u06ee\u00e7\3\2\2\2\u06ef\u06f1\7\u00ed")
        buf.write("\2\2\u06f0\u06f2\7\u00f5\2\2\u06f1\u06f0\3\2\2\2\u06f2")
        buf.write("\u06f3\3\2\2\2\u06f3\u06f1\3\2\2\2\u06f3\u06f4\3\2\2\2")
        buf.write("\u06f4\u0705\3\2\2\2\u06f5\u06f7\7\u00ec\2\2\u06f6\u06f8")
        buf.write("\7\u00f5\2\2\u06f7\u06f6\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9")
        buf.write("\u06f7\3\2\2\2\u06f9\u06fa\3\2\2\2\u06fa\u0705\3\2\2\2")
        buf.write("\u06fb\u0705\7\u00ea\2\2\u06fc\u0700\7\u00eb\2\2\u06fd")
        buf.write("\u06ff\5\u00eav\2\u06fe\u06fd\3\2\2\2\u06ff\u0702\3\2")
        buf.write("\2\2\u0700\u06fe\3\2\2\2\u0700\u0701\3\2\2\2\u0701\u0703")
        buf.write("\3\2\2\2\u0702\u0700\3\2\2\2\u0703\u0705\7\u00eb\2\2\u0704")
        buf.write("\u06ef\3\2\2\2\u0704\u06f5\3\2\2\2\u0704\u06fb\3\2\2\2")
        buf.write("\u0704\u06fc\3\2\2\2\u0705\u00e9\3\2\2\2\u0706\u070a\7")
        buf.write("\u00f1\2\2\u0707\u070a\7\u00f0\2\2\u0708\u070a\5\u00ee")
        buf.write("x\2\u0709\u0706\3\2\2\2\u0709\u0707\3\2\2\2\u0709\u0708")
        buf.write("\3\2\2\2\u070a\u00eb\3\2\2\2\u070b\u0710\5\u00eex\2\u070c")
        buf.write("\u070d\7\u00dc\2\2\u070d\u070f\5\u00eex\2\u070e\u070c")
        buf.write("\3\2\2\2\u070f\u0712\3\2\2\2\u0710\u070e\3\2\2\2\u0710")
        buf.write("\u0711\3\2\2\2\u0711\u00ed\3\2\2\2\u0712\u0710\3\2\2\2")
        buf.write("\u0713\u0717\5\u00f0y\2\u0714\u0716\5\u00f2z\2\u0715\u0714")
        buf.write("\3\2\2\2\u0716\u0719\3\2\2\2\u0717\u0715\3\2\2\2\u0717")
        buf.write("\u0718\3\2\2\2\u0718\u00ef\3\2\2\2\u0719\u0717\3\2\2\2")
        buf.write("\u071a\u0721\5\u00fa~\2\u071b\u0721\5\u00f4{\2\u071c\u071d")
        buf.write("\7\u00d6\2\2\u071d\u071e\5\u00b8]\2\u071e\u071f\7\u00d7")
        buf.write("\2\2\u071f\u0721\3\2\2\2\u0720\u071a\3\2\2\2\u0720\u071b")
        buf.write("\3\2\2\2\u0720\u071c\3\2\2\2\u0721\u00f1\3\2\2\2\u0722")
        buf.write("\u0723\7\u00c3\2\2\u0723\u0725\5\u00fc\177\2\u0724\u0726")
        buf.write("\5\u00f8}\2\u0725\u0724\3\2\2\2\u0725\u0726\3\2\2\2\u0726")
        buf.write("\u00f3\3\2\2\2\u0727\u0728\5\u00f6|\2\u0728\u0729\5\u00f8")
        buf.write("}\2\u0729\u00f5\3\2\2\2\u072a\u072f\5\u00ceh\2\u072b\u072f")
        buf.write("\5\u00e4s\2\u072c\u072f\5\u00fa~\2\u072d\u072f\5\u00a4")
        buf.write("S\2\u072e\u072a\3\2\2\2\u072e\u072b\3\2\2\2\u072e\u072c")
        buf.write("\3\2\2\2\u072e\u072d\3\2\2\2\u072f\u00f7\3\2\2\2\u0730")
        buf.write("\u0732\5,\27\2\u0731\u0730\3\2\2\2\u0731\u0732\3\2\2\2")
        buf.write("\u0732\u0734\3\2\2\2\u0733\u0735\5\u00d6l\2\u0734\u0733")
        buf.write("\3\2\2\2\u0735\u0736\3\2\2\2\u0736\u0734\3\2\2\2\u0736")
        buf.write("\u0737\3\2\2\2\u0737\u073b\3\2\2\2\u0738\u073a\5\u0102")
        buf.write("\u0082\2\u0739\u0738\3\2\2\2\u073a\u073d\3\2\2\2\u073b")
        buf.write("\u0739\3\2\2\2\u073b\u073c\3\2\2\2\u073c\u00f9\3\2\2\2")
        buf.write("\u073d\u073b\3\2\2\2\u073e\u0741\5\u0100\u0081\2\u073f")
        buf.write("\u0740\7\u00c2\2\2\u0740\u0742\5\u0100\u0081\2\u0741\u073f")
        buf.write("\3\2\2\2\u0741\u0742\3\2\2\2\u0742\u0748\3\2\2\2\u0743")
        buf.write("\u0744\5\u00c6d\2\u0744\u0745\7\u00c2\2\2\u0745\u0746")
        buf.write("\5\u0100\u0081\2\u0746\u0748\3\2\2\2\u0747\u073e\3\2\2")
        buf.write("\2\u0747\u0743\3\2\2\2\u0748\u00fb\3\2\2\2\u0749\u074c")
        buf.write("\5\u00fe\u0080\2\u074a\u074c\5\u0100\u0081\2\u074b\u0749")
        buf.write("\3\2\2\2\u074b\u074a\3\2\2\2\u074c\u00fd\3\2\2\2\u074d")
        buf.write("\u0753\5\u010a\u0086\2\u074e\u074f\7\u00da\2\2\u074f\u0750")
        buf.write("\5\u00a6T\2\u0750\u0751\7\u00db\2\2\u0751\u0753\3\2\2")
        buf.write("\2\u0752\u074d\3\2\2\2\u0752\u074e\3\2\2\2\u0753\u0757")
        buf.write("\3\2\2\2\u0754\u0756\5\u0102\u0082\2\u0755\u0754\3\2\2")
        buf.write("\2\u0756\u0759\3\2\2\2\u0757\u0755\3\2\2\2\u0757\u0758")
        buf.write("\3\2\2\2\u0758\u00ff\3\2\2\2\u0759\u0757\3\2\2\2\u075a")
        buf.write("\u075c\7\u00d3\2\2\u075b\u075a\3\2\2\2\u075c\u075f\3\2")
        buf.write("\2\2\u075d\u075b\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u0766")
        buf.write("\3\2\2\2\u075f\u075d\3\2\2\2\u0760\u0767\7\u00e2\2\2\u0761")
        buf.write("\u0762\7\u00d3\2\2\u0762\u0763\7\u00da\2\2\u0763\u0764")
        buf.write("\5\u00a6T\2\u0764\u0765\7\u00db\2\2\u0765\u0767\3\2\2")
        buf.write("\2\u0766\u0760\3\2\2\2\u0766\u0761\3\2\2\2\u0767\u076b")
        buf.write("\3\2\2\2\u0768\u076a\5\u0102\u0082\2\u0769\u0768\3\2\2")
        buf.write("\2\u076a\u076d\3\2\2\2\u076b\u0769\3\2\2\2\u076b\u076c")
        buf.write("\3\2\2\2\u076c\u0101\3\2\2\2\u076d\u076b\3\2\2\2\u076e")
        buf.write("\u0770\7\u00d8\2\2\u076f\u0771\5\u00a6T\2\u0770\u076f")
        buf.write("\3\2\2\2\u0770\u0771\3\2\2\2\u0771\u0772\3\2\2\2\u0772")
        buf.write("\u0778\7\u00d9\2\2\u0773\u0774\7\u00da\2\2\u0774\u0775")
        buf.write("\5\u00a6T\2\u0775\u0776\7\u00db\2\2\u0776\u0778\3\2\2")
        buf.write("\2\u0777\u076e\3\2\2\2\u0777\u0773\3\2\2\2\u0778\u0103")
        buf.write("\3\2\2\2\u0779\u077b\5\u0106\u0084\2\u077a\u0779\3\2\2")
        buf.write("\2\u077a\u077b\3\2\2\2\u077b\u0782\3\2\2\2\u077c\u077e")
        buf.write("\7\u00dc\2\2\u077d\u077f\5\u0106\u0084\2\u077e\u077d\3")
        buf.write("\2\2\2\u077e\u077f\3\2\2\2\u077f\u0781\3\2\2\2\u0780\u077c")
        buf.write("\3\2\2\2\u0781\u0784\3\2\2\2\u0782\u0780\3\2\2\2\u0782")
        buf.write("\u0783\3\2\2\2\u0783\u0105\3\2\2\2\u0784\u0782\3\2\2\2")
        buf.write("\u0785\u078d\5\u00eex\2\u0786\u0787\7d\2\2\u0787\u0788")
        buf.write("\7\u00d6\2\2\u0788\u0789\5\u0104\u0083\2\u0789\u078a\7")
        buf.write("\u00d7\2\2\u078a\u078d\3\2\2\2\u078b\u078d\5\u00c0a\2")
        buf.write("\u078c\u0785\3\2\2\2\u078c\u0786\3\2\2\2\u078c\u078b\3")
        buf.write("\2\2\2\u078d\u0107\3\2\2\2\u078e\u078f\t\24\2\2\u078f")
        buf.write("\u0109\3\2\2\2\u0790\u0791\t\25\2\2\u0791\u010b\3\2\2")
        buf.write("\2\u0792\u0793\t\26\2\2\u0793\u010d\3\2\2\2\u0794\u0795")
        buf.write("\t\27\2\2\u0795\u010f\3\2\2\2\u0796\u0797\t\30\2\2\u0797")
        buf.write("\u0111\3\2\2\2\u0798\u0799\t\31\2\2\u0799\u0113\3\2\2")
        buf.write("\2\u079a\u079b\t\32\2\2\u079b\u0115\3\2\2\2\u00fe\u0117")
        buf.write("\u011b\u011d\u0125\u0128\u0142\u0146\u014b\u0150\u0156")
        buf.write("\u0164\u0168\u016e\u0173\u0178\u017f\u0185\u018c\u0193")
        buf.write("\u0196\u019a\u019e\u01a5\u01a8\u01ad\u01b0\u01b3\u01b6")
        buf.write("\u01bb\u01bf\u01c3\u01c8\u01cc\u01ce\u01d4\u01e0\u01f1")
        buf.write("\u01f8\u0200\u0204\u0209\u020f\u0217\u021f\u0225\u022c")
        buf.write("\u0233\u0238\u023e\u025b\u0269\u026d\u0276\u027a\u027f")
        buf.write("\u0299\u02a4\u02a8\u02ac\u02b5\u02bf\u02c4\u02ca\u02cf")
        buf.write("\u02d4\u02d9\u02de\u02e4\u02ea\u02f0\u0308\u030d\u0310")
        buf.write("\u031a\u031d\u032a\u0332\u0339\u033c\u0341\u0345\u034e")
        buf.write("\u0352\u036c\u0371\u0378\u037f\u0387\u038a\u0390\u0394")
        buf.write("\u0397\u039c\u03a0\u03a3\u03a6\u03a9\u03b1\u03b8\u03c1")
        buf.write("\u03ce\u03da\u03e0\u03e4\u03eb\u03f1\u03f5\u03fc\u0403")
        buf.write("\u0407\u040e\u0412\u0414\u041a\u0421\u0425\u0429\u0436")
        buf.write("\u0439\u0440\u0447\u044b\u0451\u0455\u045a\u045f\u0466")
        buf.write("\u046e\u0477\u047b\u0481\u048a\u048f\u0496\u049d\u04a3")
        buf.write("\u04e2\u04f3\u04fa\u04ff\u0501\u0527\u053d\u053f\u0544")
        buf.write("\u0549\u054e\u0551\u0557\u055d\u0564\u0569\u056f\u0579")
        buf.write("\u057e\u0582\u0586\u0589\u0590\u0593\u0598\u059c\u05a2")
        buf.write("\u05a6\u05b1\u05bd\u05c1\u05ca\u05d3\u05db\u05df\u05e6")
        buf.write("\u05ea\u05ef\u05f4\u05f8\u0601\u0607\u060d\u0610\u0614")
        buf.write("\u0617\u061c\u061f\u0622\u0625\u0628\u062c\u0630\u0634")
        buf.write("\u0639\u063d\u063f\u0645\u064f\u0653\u0656\u0660\u0665")
        buf.write("\u0667\u066c\u0674\u0678\u067c\u0683\u068c\u0690\u0693")
        buf.write("\u0698\u069b\u06a0\u06ab\u06ad\u06b3\u06b5\u06bc\u06c1")
        buf.write("\u06c5\u06c8\u06cf\u06d5\u06df\u06e4\u06e9\u06eb\u06f3")
        buf.write("\u06f9\u0700\u0704\u0709\u0710\u0717\u0720\u0725\u072e")
        buf.write("\u0731\u0736\u073b\u0741\u0747\u074b\u0752\u0757\u075d")
        buf.write("\u0766\u076b\u0770\u0777\u077a\u077e\u0782\u078c")
        return buf.getvalue()


class PhpParser ( Parser ):

    grammarFileName = "PhpParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "'<?xml'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'?>'", "<INVALID>", "<INVALID>", "'/>'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'#['", "'abstract'", "'array'", "'as'", 
                     "'binary'", "<INVALID>", "<INVALID>", "'break'", "'callable'", 
                     "'case'", "'catch'", "'class'", "'clone'", "'const'", 
                     "'continue'", "'declare'", "'default'", "'do'", "'real'", 
                     "'double'", "'echo'", "'else'", "'elseif'", "'empty'", 
                     "'enum'", "'enddeclare'", "'endfor'", "'endforeach'", 
                     "'endif'", "'endswitch'", "'endwhile'", "'eval'", "'die'", 
                     "'extends'", "'final'", "'finally'", "'float'", "'for'", 
                     "'foreach'", "'function'", "'global'", "'goto'", "'if'", 
                     "'implements'", "'import'", "'include'", "'include_once'", 
                     "'instanceof'", "'insteadof'", "'int8'", "'int16'", 
                     "'int64'", "<INVALID>", "'interface'", "'isset'", "'list'", 
                     "'and'", "'or'", "'xor'", "'match'", "'namespace'", 
                     "'new'", "'null'", "'object'", "'parent'", "'partial'", 
                     "'print'", "'private'", "'protected'", "'public'", 
                     "'readonly'", "'require'", "'require_once'", "'resource'", 
                     "'return'", "'static'", "'string'", "'switch'", "'throw'", 
                     "'trait'", "'try'", "'clrtypeof'", "<INVALID>", "'unicode'", 
                     "'unset'", "'use'", "'var'", "'while'", "'yield'", 
                     "'from'", "'fn'", "'ticks'", "'encoding'", "'strict_types'", 
                     "'__get'", "'__set'", "'__call'", "'__callstatic'", 
                     "'__construct'", "'__destruct'", "'__wakeup'", "'__sleep'", 
                     "'__autoload'", "'__isset'", "'__unset'", "'__tostring'", 
                     "'__invoke'", "'__set_state'", "'__clone'", "'__debuginfo'", 
                     "'__namespace__'", "'__class__'", "'__trait__'", "'__function__'", 
                     "'__method__'", "'__line__'", "'__file__'", "'__dir__'", 
                     "'<=>'", "'<:'", "':>'", "'=>'", "'++'", "'--'", "'==='", 
                     "'!=='", "'=='", "<INVALID>", "'<='", "'>='", "'+='", 
                     "'-='", "'*='", "'**'", "'**='", "'/='", "'.='", "'%='", 
                     "'<<='", "'>>='", "'&='", "'|='", "'^='", "'||'", "'&&'", 
                     "'??'", "'??='", "'<<'", "'>>'", "'::'", "'->'", "'\\'", 
                     "'...'", "<INVALID>", "<INVALID>", "'&'", "'|'", "'!'", 
                     "'^'", "'+'", "'-'", "'*'", "'%'", "<INVALID>", "'~'", 
                     "'@'", "<INVALID>", "'.'", "<INVALID>", "'('", "')'", 
                     "'['", "']'", "<INVALID>", "'}'", "','", "':'", "';'", 
                     "<INVALID>", "'''", "'`'" ]

    symbolicNames = [ "<INVALID>", "SeaWhitespace", "HtmlText", "XmlStart", 
                      "PHPStart", "HtmlScriptOpen", "HtmlStyleOpen", "HtmlComment", 
                      "HtmlDtd", "HtmlOpen", "Shebang", "Error", "XmlText", 
                      "XmlClose", "PHPStartInside", "HtmlClose", "HtmlSlashClose", 
                      "HtmlSlash", "HtmlEquals", "HtmlStartQuoteString", 
                      "HtmlStartDoubleQuoteString", "HtmlHex", "HtmlDecimal", 
                      "HtmlSpace", "HtmlName", "ErrorInside", "PHPStartInsideQuoteString", 
                      "HtmlEndQuoteString", "HtmlQuoteString", "ErrorHtmlQuote", 
                      "PHPStartDoubleQuoteString", "HtmlEndDoubleQuoteString", 
                      "HtmlDoubleQuoteString", "ErrorHtmlDoubleQuote", "ScriptText", 
                      "HtmlScriptClose", "PHPStartInsideScript", "StyleBody", 
                      "PHPEnd", "Whitespace", "MultiLineComment", "SingleLineComment", 
                      "ShellStyleComment", "AttributeStart", "Abstract", 
                      "Array", "As", "BinaryCast", "BoolType", "BooleanConstant", 
                      "Break", "Callable", "Case", "Catch", "Class", "Clone", 
                      "Const", "Continue", "Declare", "Default", "Do", "DoubleCast", 
                      "DoubleType", "Echo", "Else", "ElseIf", "Empty", "Enum_", 
                      "EndDeclare", "EndFor", "EndForeach", "EndIf", "EndSwitch", 
                      "EndWhile", "Eval", "Exit", "Extends", "Final", "Finally", 
                      "FloatCast", "For", "Foreach", "Function_", "Global", 
                      "Goto", "If", "Implements", "Import", "Include", "IncludeOnce", 
                      "InstanceOf", "InsteadOf", "Int8Cast", "Int16Cast", 
                      "Int64Type", "IntType", "Interface", "IsSet", "List", 
                      "LogicalAnd", "LogicalOr", "LogicalXor", "Match_", 
                      "Namespace", "New", "Null", "ObjectType", "Parent_", 
                      "Partial", "Print", "Private", "Protected", "Public", 
                      "Readonly", "Require", "RequireOnce", "Resource", 
                      "Return", "Static", "StringType", "Switch", "Throw", 
                      "Trait", "Try", "Typeof", "UintCast", "UnicodeCast", 
                      "Unset", "Use", "Var", "While", "Yield", "From", "LambdaFn", 
                      "Ticks", "Encoding", "StrictTypes", "Get", "Set", 
                      "Call", "CallStatic", "Constructor", "Destruct", "Wakeup", 
                      "Sleep", "Autoload", "IsSet__", "Unset__", "ToString__", 
                      "Invoke", "SetState", "Clone__", "DebugInfo", "Namespace__", 
                      "Class__", "Traic__", "Function__", "Method__", "Line__", 
                      "File__", "Dir__", "Spaceship", "Lgeneric", "Rgeneric", 
                      "DoubleArrow", "Inc", "Dec", "IsIdentical", "IsNoidentical", 
                      "IsEqual", "IsNotEq", "IsSmallerOrEqual", "IsGreaterOrEqual", 
                      "PlusEqual", "MinusEqual", "MulEqual", "Pow", "PowEqual", 
                      "DivEqual", "Concaequal", "ModEqual", "ShiftLeftEqual", 
                      "ShiftRightEqual", "AndEqual", "OrEqual", "XorEqual", 
                      "BooleanOr", "BooleanAnd", "NullCoalescing", "NullCoalescingEqual", 
                      "ShiftLeft", "ShiftRight", "DoubleColon", "ObjectOperator", 
                      "NamespaceSeparator", "Ellipsis", "Less", "Greater", 
                      "Ampersand", "Pipe", "Bang", "Caret", "Plus", "Minus", 
                      "Asterisk", "Percent", "Divide", "Tilde", "SuppressWarnings", 
                      "Dollar", "Dot", "QuestionMark", "OpenRoundBracket", 
                      "CloseRoundBracket", "OpenSquareBracket", "CloseSquareBracket", 
                      "OpenCurlyBracket", "CloseCurlyBracket", "Comma", 
                      "Colon", "SemiColon", "Eq", "Quote", "BackQuote", 
                      "VarName", "Label", "Octal", "Decimal", "Real", "Hex", 
                      "Binary", "BackQuoteString", "SingleQuoteString", 
                      "DoubleQuote", "StartNowDoc", "StartHereDoc", "ErrorPhp", 
                      "CurlyDollar", "UnicodeEscape", "StringPart", "Comment", 
                      "PHPEndSingleLineComment", "CommentEnd", "HereDocText", 
                      "XmlText2" ]

    RULE_htmlDocument = 0
    RULE_inlineHtml = 1
    RULE_htmlElement = 2
    RULE_scriptText = 3
    RULE_phpBlock = 4
    RULE_importStatement = 5
    RULE_topStatement = 6
    RULE_useDeclaration = 7
    RULE_useDeclarationContentList = 8
    RULE_useDeclarationContent = 9
    RULE_namespaceDeclaration = 10
    RULE_namespaceStatement = 11
    RULE_functionDeclaration = 12
    RULE_classDeclaration = 13
    RULE_classEntryType = 14
    RULE_interfaceList = 15
    RULE_typeParameterListInBrackets = 16
    RULE_typeParameterList = 17
    RULE_typeParameterWithDefaultsList = 18
    RULE_typeParameterDecl = 19
    RULE_typeParameterWithDefaultDecl = 20
    RULE_genericDynamicArgs = 21
    RULE_attributes = 22
    RULE_attributeGroup = 23
    RULE_attribute = 24
    RULE_innerStatementList = 25
    RULE_innerStatement = 26
    RULE_statement = 27
    RULE_emptyStatement_ = 28
    RULE_blockStatement = 29
    RULE_ifStatement = 30
    RULE_elseIfStatement = 31
    RULE_elseIfColonStatement = 32
    RULE_elseStatement = 33
    RULE_elseColonStatement = 34
    RULE_whileStatement = 35
    RULE_doWhileStatement = 36
    RULE_forStatement = 37
    RULE_forInit = 38
    RULE_forUpdate = 39
    RULE_switchStatement = 40
    RULE_switchBlock = 41
    RULE_breakStatement = 42
    RULE_continueStatement = 43
    RULE_returnStatement = 44
    RULE_expressionStatement = 45
    RULE_unsetStatement = 46
    RULE_foreachStatement = 47
    RULE_tryCatchFinally = 48
    RULE_catchClause = 49
    RULE_finallyStatement = 50
    RULE_throwStatement = 51
    RULE_gotoStatement = 52
    RULE_declareStatement = 53
    RULE_inlineHtmlStatement = 54
    RULE_declareList = 55
    RULE_directive = 56
    RULE_formalParameterList = 57
    RULE_formalParameter = 58
    RULE_typeHint = 59
    RULE_globalStatement = 60
    RULE_globalVar = 61
    RULE_echoStatement = 62
    RULE_staticVariableStatement = 63
    RULE_classStatement = 64
    RULE_traitAdaptations = 65
    RULE_traitAdaptationStatement = 66
    RULE_traitPrecedence = 67
    RULE_traitAlias = 68
    RULE_traitMethodReference = 69
    RULE_baseCtorCall = 70
    RULE_returnTypeDecl = 71
    RULE_methodBody = 72
    RULE_propertyModifiers = 73
    RULE_memberModifiers = 74
    RULE_variableInitializer = 75
    RULE_identifierInitializer = 76
    RULE_globalConstantDeclaration = 77
    RULE_enumDeclaration = 78
    RULE_enumItem = 79
    RULE_expressionList = 80
    RULE_parentheses = 81
    RULE_expression = 82
    RULE_assignable = 83
    RULE_arrayCreation = 84
    RULE_arrayDestructuring = 85
    RULE_indexedDestructItem = 86
    RULE_keyedDestructItem = 87
    RULE_lambdaFunctionExpr = 88
    RULE_matchExpr = 89
    RULE_matchItem = 90
    RULE_newExpr = 91
    RULE_assignmentOperator = 92
    RULE_yieldExpression = 93
    RULE_arrayItemList = 94
    RULE_arrayItem = 95
    RULE_lambdaFunctionUseVars = 96
    RULE_lambdaFunctionUseVar = 97
    RULE_qualifiedStaticTypeRef = 98
    RULE_typeRef = 99
    RULE_anonymousClass = 100
    RULE_indirectTypeRef = 101
    RULE_qualifiedNamespaceName = 102
    RULE_namespaceNameList = 103
    RULE_namespaceNameTail = 104
    RULE_qualifiedNamespaceNameList = 105
    RULE_arguments = 106
    RULE_actualArgument = 107
    RULE_argumentName = 108
    RULE_constantInitializer = 109
    RULE_constant = 110
    RULE_literalConstant = 111
    RULE_numericConstant = 112
    RULE_classConstant = 113
    RULE_stringConstant = 114
    RULE_string = 115
    RULE_interpolatedStringPart = 116
    RULE_chainList = 117
    RULE_chain = 118
    RULE_chainOrigin = 119
    RULE_memberAccess = 120
    RULE_functionCall = 121
    RULE_functionCallName = 122
    RULE_actualArguments = 123
    RULE_chainBase = 124
    RULE_keyedFieldName = 125
    RULE_keyedSimpleFieldName = 126
    RULE_keyedVariable = 127
    RULE_squareCurlyExpression = 128
    RULE_assignmentList = 129
    RULE_assignmentListElement = 130
    RULE_modifier = 131
    RULE_identifier = 132
    RULE_memberModifier = 133
    RULE_magicConstant = 134
    RULE_magicMethod = 135
    RULE_primitiveType = 136
    RULE_castOperation = 137

    ruleNames =  [ "htmlDocument", "inlineHtml", "htmlElement", "scriptText", 
                   "phpBlock", "importStatement", "topStatement", "useDeclaration", 
                   "useDeclarationContentList", "useDeclarationContent", 
                   "namespaceDeclaration", "namespaceStatement", "functionDeclaration", 
                   "classDeclaration", "classEntryType", "interfaceList", 
                   "typeParameterListInBrackets", "typeParameterList", "typeParameterWithDefaultsList", 
                   "typeParameterDecl", "typeParameterWithDefaultDecl", 
                   "genericDynamicArgs", "attributes", "attributeGroup", 
                   "attribute", "innerStatementList", "innerStatement", 
                   "statement", "emptyStatement_", "blockStatement", "ifStatement", 
                   "elseIfStatement", "elseIfColonStatement", "elseStatement", 
                   "elseColonStatement", "whileStatement", "doWhileStatement", 
                   "forStatement", "forInit", "forUpdate", "switchStatement", 
                   "switchBlock", "breakStatement", "continueStatement", 
                   "returnStatement", "expressionStatement", "unsetStatement", 
                   "foreachStatement", "tryCatchFinally", "catchClause", 
                   "finallyStatement", "throwStatement", "gotoStatement", 
                   "declareStatement", "inlineHtmlStatement", "declareList", 
                   "directive", "formalParameterList", "formalParameter", 
                   "typeHint", "globalStatement", "globalVar", "echoStatement", 
                   "staticVariableStatement", "classStatement", "traitAdaptations", 
                   "traitAdaptationStatement", "traitPrecedence", "traitAlias", 
                   "traitMethodReference", "baseCtorCall", "returnTypeDecl", 
                   "methodBody", "propertyModifiers", "memberModifiers", 
                   "variableInitializer", "identifierInitializer", "globalConstantDeclaration", 
                   "enumDeclaration", "enumItem", "expressionList", "parentheses", 
                   "expression", "assignable", "arrayCreation", "arrayDestructuring", 
                   "indexedDestructItem", "keyedDestructItem", "lambdaFunctionExpr", 
                   "matchExpr", "matchItem", "newExpr", "assignmentOperator", 
                   "yieldExpression", "arrayItemList", "arrayItem", "lambdaFunctionUseVars", 
                   "lambdaFunctionUseVar", "qualifiedStaticTypeRef", "typeRef", 
                   "anonymousClass", "indirectTypeRef", "qualifiedNamespaceName", 
                   "namespaceNameList", "namespaceNameTail", "qualifiedNamespaceNameList", 
                   "arguments", "actualArgument", "argumentName", "constantInitializer", 
                   "constant", "literalConstant", "numericConstant", "classConstant", 
                   "stringConstant", "string", "interpolatedStringPart", 
                   "chainList", "chain", "chainOrigin", "memberAccess", 
                   "functionCall", "functionCallName", "actualArguments", 
                   "chainBase", "keyedFieldName", "keyedSimpleFieldName", 
                   "keyedVariable", "squareCurlyExpression", "assignmentList", 
                   "assignmentListElement", "modifier", "identifier", "memberModifier", 
                   "magicConstant", "magicMethod", "primitiveType", "castOperation" ]

    EOF = Token.EOF
    SeaWhitespace=1
    HtmlText=2
    XmlStart=3
    PHPStart=4
    HtmlScriptOpen=5
    HtmlStyleOpen=6
    HtmlComment=7
    HtmlDtd=8
    HtmlOpen=9
    Shebang=10
    Error=11
    XmlText=12
    XmlClose=13
    PHPStartInside=14
    HtmlClose=15
    HtmlSlashClose=16
    HtmlSlash=17
    HtmlEquals=18
    HtmlStartQuoteString=19
    HtmlStartDoubleQuoteString=20
    HtmlHex=21
    HtmlDecimal=22
    HtmlSpace=23
    HtmlName=24
    ErrorInside=25
    PHPStartInsideQuoteString=26
    HtmlEndQuoteString=27
    HtmlQuoteString=28
    ErrorHtmlQuote=29
    PHPStartDoubleQuoteString=30
    HtmlEndDoubleQuoteString=31
    HtmlDoubleQuoteString=32
    ErrorHtmlDoubleQuote=33
    ScriptText=34
    HtmlScriptClose=35
    PHPStartInsideScript=36
    StyleBody=37
    PHPEnd=38
    Whitespace=39
    MultiLineComment=40
    SingleLineComment=41
    ShellStyleComment=42
    AttributeStart=43
    Abstract=44
    Array=45
    As=46
    BinaryCast=47
    BoolType=48
    BooleanConstant=49
    Break=50
    Callable=51
    Case=52
    Catch=53
    Class=54
    Clone=55
    Const=56
    Continue=57
    Declare=58
    Default=59
    Do=60
    DoubleCast=61
    DoubleType=62
    Echo=63
    Else=64
    ElseIf=65
    Empty=66
    Enum_=67
    EndDeclare=68
    EndFor=69
    EndForeach=70
    EndIf=71
    EndSwitch=72
    EndWhile=73
    Eval=74
    Exit=75
    Extends=76
    Final=77
    Finally=78
    FloatCast=79
    For=80
    Foreach=81
    Function_=82
    Global=83
    Goto=84
    If=85
    Implements=86
    Import=87
    Include=88
    IncludeOnce=89
    InstanceOf=90
    InsteadOf=91
    Int8Cast=92
    Int16Cast=93
    Int64Type=94
    IntType=95
    Interface=96
    IsSet=97
    List=98
    LogicalAnd=99
    LogicalOr=100
    LogicalXor=101
    Match_=102
    Namespace=103
    New=104
    Null=105
    ObjectType=106
    Parent_=107
    Partial=108
    Print=109
    Private=110
    Protected=111
    Public=112
    Readonly=113
    Require=114
    RequireOnce=115
    Resource=116
    Return=117
    Static=118
    StringType=119
    Switch=120
    Throw=121
    Trait=122
    Try=123
    Typeof=124
    UintCast=125
    UnicodeCast=126
    Unset=127
    Use=128
    Var=129
    While=130
    Yield=131
    From=132
    LambdaFn=133
    Ticks=134
    Encoding=135
    StrictTypes=136
    Get=137
    Set=138
    Call=139
    CallStatic=140
    Constructor=141
    Destruct=142
    Wakeup=143
    Sleep=144
    Autoload=145
    IsSet__=146
    Unset__=147
    ToString__=148
    Invoke=149
    SetState=150
    Clone__=151
    DebugInfo=152
    Namespace__=153
    Class__=154
    Traic__=155
    Function__=156
    Method__=157
    Line__=158
    File__=159
    Dir__=160
    Spaceship=161
    Lgeneric=162
    Rgeneric=163
    DoubleArrow=164
    Inc=165
    Dec=166
    IsIdentical=167
    IsNoidentical=168
    IsEqual=169
    IsNotEq=170
    IsSmallerOrEqual=171
    IsGreaterOrEqual=172
    PlusEqual=173
    MinusEqual=174
    MulEqual=175
    Pow=176
    PowEqual=177
    DivEqual=178
    Concaequal=179
    ModEqual=180
    ShiftLeftEqual=181
    ShiftRightEqual=182
    AndEqual=183
    OrEqual=184
    XorEqual=185
    BooleanOr=186
    BooleanAnd=187
    NullCoalescing=188
    NullCoalescingEqual=189
    ShiftLeft=190
    ShiftRight=191
    DoubleColon=192
    ObjectOperator=193
    NamespaceSeparator=194
    Ellipsis=195
    Less=196
    Greater=197
    Ampersand=198
    Pipe=199
    Bang=200
    Caret=201
    Plus=202
    Minus=203
    Asterisk=204
    Percent=205
    Divide=206
    Tilde=207
    SuppressWarnings=208
    Dollar=209
    Dot=210
    QuestionMark=211
    OpenRoundBracket=212
    CloseRoundBracket=213
    OpenSquareBracket=214
    CloseSquareBracket=215
    OpenCurlyBracket=216
    CloseCurlyBracket=217
    Comma=218
    Colon=219
    SemiColon=220
    Eq=221
    Quote=222
    BackQuote=223
    VarName=224
    Label=225
    Octal=226
    Decimal=227
    Real=228
    Hex=229
    Binary=230
    BackQuoteString=231
    SingleQuoteString=232
    DoubleQuote=233
    StartNowDoc=234
    StartHereDoc=235
    ErrorPhp=236
    CurlyDollar=237
    UnicodeEscape=238
    StringPart=239
    Comment=240
    PHPEndSingleLineComment=241
    CommentEnd=242
    HereDocText=243
    XmlText2=244

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class HtmlDocumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PhpParser.EOF, 0)

        def Shebang(self):
            return self.getToken(PhpParser.Shebang, 0)

        def inlineHtml(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.InlineHtmlContext)
            else:
                return self.getTypedRuleContext(PhpParser.InlineHtmlContext,i)


        def phpBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.PhpBlockContext)
            else:
                return self.getTypedRuleContext(PhpParser.PhpBlockContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_htmlDocument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtmlDocument" ):
                listener.enterHtmlDocument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtmlDocument" ):
                listener.exitHtmlDocument(self)




    def htmlDocument(self):

        localctx = PhpParser.HtmlDocumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_htmlDocument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Shebang:
                self.state = 276
                self.match(PhpParser.Shebang)


            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PhpParser.HtmlText) | (1 << PhpParser.XmlStart) | (1 << PhpParser.HtmlScriptOpen) | (1 << PhpParser.HtmlStyleOpen) | (1 << PhpParser.HtmlDtd) | (1 << PhpParser.HtmlOpen) | (1 << PhpParser.HtmlClose) | (1 << PhpParser.HtmlSlashClose) | (1 << PhpParser.HtmlSlash) | (1 << PhpParser.HtmlEquals) | (1 << PhpParser.HtmlStartQuoteString) | (1 << PhpParser.HtmlStartDoubleQuoteString) | (1 << PhpParser.HtmlHex) | (1 << PhpParser.HtmlDecimal) | (1 << PhpParser.HtmlName) | (1 << PhpParser.HtmlEndQuoteString) | (1 << PhpParser.HtmlQuoteString) | (1 << PhpParser.HtmlEndDoubleQuoteString) | (1 << PhpParser.HtmlDoubleQuoteString) | (1 << PhpParser.ScriptText) | (1 << PhpParser.HtmlScriptClose) | (1 << PhpParser.StyleBody) | (1 << PhpParser.AttributeStart) | (1 << PhpParser.Abstract) | (1 << PhpParser.Array) | (1 << PhpParser.As) | (1 << PhpParser.BinaryCast) | (1 << PhpParser.BoolType) | (1 << PhpParser.BooleanConstant) | (1 << PhpParser.Break) | (1 << PhpParser.Callable) | (1 << PhpParser.Case) | (1 << PhpParser.Catch) | (1 << PhpParser.Class) | (1 << PhpParser.Clone) | (1 << PhpParser.Const) | (1 << PhpParser.Continue) | (1 << PhpParser.Declare) | (1 << PhpParser.Default) | (1 << PhpParser.Do) | (1 << PhpParser.DoubleCast) | (1 << PhpParser.DoubleType) | (1 << PhpParser.Echo))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PhpParser.Else - 64)) | (1 << (PhpParser.ElseIf - 64)) | (1 << (PhpParser.Empty - 64)) | (1 << (PhpParser.Enum_ - 64)) | (1 << (PhpParser.EndDeclare - 64)) | (1 << (PhpParser.EndFor - 64)) | (1 << (PhpParser.EndForeach - 64)) | (1 << (PhpParser.EndIf - 64)) | (1 << (PhpParser.EndSwitch - 64)) | (1 << (PhpParser.EndWhile - 64)) | (1 << (PhpParser.Eval - 64)) | (1 << (PhpParser.Exit - 64)) | (1 << (PhpParser.Extends - 64)) | (1 << (PhpParser.Final - 64)) | (1 << (PhpParser.Finally - 64)) | (1 << (PhpParser.FloatCast - 64)) | (1 << (PhpParser.For - 64)) | (1 << (PhpParser.Foreach - 64)) | (1 << (PhpParser.Function_ - 64)) | (1 << (PhpParser.Global - 64)) | (1 << (PhpParser.Goto - 64)) | (1 << (PhpParser.If - 64)) | (1 << (PhpParser.Implements - 64)) | (1 << (PhpParser.Import - 64)) | (1 << (PhpParser.Include - 64)) | (1 << (PhpParser.IncludeOnce - 64)) | (1 << (PhpParser.InstanceOf - 64)) | (1 << (PhpParser.InsteadOf - 64)) | (1 << (PhpParser.Int8Cast - 64)) | (1 << (PhpParser.Int16Cast - 64)) | (1 << (PhpParser.Int64Type - 64)) | (1 << (PhpParser.IntType - 64)) | (1 << (PhpParser.Interface - 64)) | (1 << (PhpParser.IsSet - 64)) | (1 << (PhpParser.List - 64)) | (1 << (PhpParser.LogicalAnd - 64)) | (1 << (PhpParser.LogicalOr - 64)) | (1 << (PhpParser.LogicalXor - 64)) | (1 << (PhpParser.Match_ - 64)) | (1 << (PhpParser.Namespace - 64)) | (1 << (PhpParser.New - 64)) | (1 << (PhpParser.Null - 64)) | (1 << (PhpParser.ObjectType - 64)) | (1 << (PhpParser.Parent_ - 64)) | (1 << (PhpParser.Partial - 64)) | (1 << (PhpParser.Print - 64)) | (1 << (PhpParser.Private - 64)) | (1 << (PhpParser.Protected - 64)) | (1 << (PhpParser.Public - 64)) | (1 << (PhpParser.Readonly - 64)) | (1 << (PhpParser.Require - 64)) | (1 << (PhpParser.RequireOnce - 64)) | (1 << (PhpParser.Resource - 64)) | (1 << (PhpParser.Return - 64)) | (1 << (PhpParser.Static - 64)) | (1 << (PhpParser.StringType - 64)) | (1 << (PhpParser.Switch - 64)) | (1 << (PhpParser.Throw - 64)) | (1 << (PhpParser.Trait - 64)) | (1 << (PhpParser.Try - 64)) | (1 << (PhpParser.Typeof - 64)) | (1 << (PhpParser.UintCast - 64)) | (1 << (PhpParser.UnicodeCast - 64)) | (1 << (PhpParser.Unset - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PhpParser.Use - 128)) | (1 << (PhpParser.Var - 128)) | (1 << (PhpParser.While - 128)) | (1 << (PhpParser.Yield - 128)) | (1 << (PhpParser.From - 128)) | (1 << (PhpParser.LambdaFn - 128)) | (1 << (PhpParser.Ticks - 128)) | (1 << (PhpParser.Encoding - 128)) | (1 << (PhpParser.StrictTypes - 128)) | (1 << (PhpParser.Get - 128)) | (1 << (PhpParser.Set - 128)) | (1 << (PhpParser.Call - 128)) | (1 << (PhpParser.CallStatic - 128)) | (1 << (PhpParser.Constructor - 128)) | (1 << (PhpParser.Destruct - 128)) | (1 << (PhpParser.Wakeup - 128)) | (1 << (PhpParser.Sleep - 128)) | (1 << (PhpParser.Autoload - 128)) | (1 << (PhpParser.IsSet__ - 128)) | (1 << (PhpParser.Unset__ - 128)) | (1 << (PhpParser.ToString__ - 128)) | (1 << (PhpParser.Invoke - 128)) | (1 << (PhpParser.SetState - 128)) | (1 << (PhpParser.Clone__ - 128)) | (1 << (PhpParser.DebugInfo - 128)) | (1 << (PhpParser.Namespace__ - 128)) | (1 << (PhpParser.Class__ - 128)) | (1 << (PhpParser.Traic__ - 128)) | (1 << (PhpParser.Function__ - 128)) | (1 << (PhpParser.Method__ - 128)) | (1 << (PhpParser.Line__ - 128)) | (1 << (PhpParser.File__ - 128)) | (1 << (PhpParser.Dir__ - 128)) | (1 << (PhpParser.Inc - 128)) | (1 << (PhpParser.Dec - 128)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.OpenCurlyBracket - 194)) | (1 << (PhpParser.SemiColon - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                self.state = 281
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                if la_ == 1:
                    self.state = 279
                    self.inlineHtml()
                    pass

                elif la_ == 2:
                    self.state = 280
                    self.phpBlock()
                    pass


                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 286
            self.match(PhpParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlineHtmlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def htmlElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.HtmlElementContext)
            else:
                return self.getTypedRuleContext(PhpParser.HtmlElementContext,i)


        def scriptText(self):
            return self.getTypedRuleContext(PhpParser.ScriptTextContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_inlineHtml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineHtml" ):
                listener.enterInlineHtml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineHtml" ):
                listener.exitInlineHtml(self)




    def inlineHtml(self):

        localctx = PhpParser.InlineHtmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_inlineHtml)
        try:
            self.state = 294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.HtmlText, PhpParser.XmlStart, PhpParser.HtmlScriptOpen, PhpParser.HtmlStyleOpen, PhpParser.HtmlDtd, PhpParser.HtmlOpen, PhpParser.HtmlClose, PhpParser.HtmlSlashClose, PhpParser.HtmlSlash, PhpParser.HtmlEquals, PhpParser.HtmlStartQuoteString, PhpParser.HtmlStartDoubleQuoteString, PhpParser.HtmlHex, PhpParser.HtmlDecimal, PhpParser.HtmlName, PhpParser.HtmlEndQuoteString, PhpParser.HtmlQuoteString, PhpParser.HtmlEndDoubleQuoteString, PhpParser.HtmlDoubleQuoteString, PhpParser.HtmlScriptClose, PhpParser.StyleBody]:
                self.enterOuterAlt(localctx, 1)
                self.state = 289 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 288
                        self.htmlElement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 291 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

                pass
            elif token in [PhpParser.ScriptText]:
                self.enterOuterAlt(localctx, 2)
                self.state = 293
                self.scriptText()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HtmlElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HtmlDtd(self):
            return self.getToken(PhpParser.HtmlDtd, 0)

        def HtmlClose(self):
            return self.getToken(PhpParser.HtmlClose, 0)

        def HtmlStyleOpen(self):
            return self.getToken(PhpParser.HtmlStyleOpen, 0)

        def HtmlOpen(self):
            return self.getToken(PhpParser.HtmlOpen, 0)

        def HtmlName(self):
            return self.getToken(PhpParser.HtmlName, 0)

        def HtmlSlashClose(self):
            return self.getToken(PhpParser.HtmlSlashClose, 0)

        def HtmlSlash(self):
            return self.getToken(PhpParser.HtmlSlash, 0)

        def HtmlText(self):
            return self.getToken(PhpParser.HtmlText, 0)

        def HtmlEquals(self):
            return self.getToken(PhpParser.HtmlEquals, 0)

        def HtmlStartQuoteString(self):
            return self.getToken(PhpParser.HtmlStartQuoteString, 0)

        def HtmlEndQuoteString(self):
            return self.getToken(PhpParser.HtmlEndQuoteString, 0)

        def HtmlStartDoubleQuoteString(self):
            return self.getToken(PhpParser.HtmlStartDoubleQuoteString, 0)

        def HtmlEndDoubleQuoteString(self):
            return self.getToken(PhpParser.HtmlEndDoubleQuoteString, 0)

        def HtmlHex(self):
            return self.getToken(PhpParser.HtmlHex, 0)

        def HtmlDecimal(self):
            return self.getToken(PhpParser.HtmlDecimal, 0)

        def HtmlQuoteString(self):
            return self.getToken(PhpParser.HtmlQuoteString, 0)

        def HtmlDoubleQuoteString(self):
            return self.getToken(PhpParser.HtmlDoubleQuoteString, 0)

        def StyleBody(self):
            return self.getToken(PhpParser.StyleBody, 0)

        def HtmlScriptOpen(self):
            return self.getToken(PhpParser.HtmlScriptOpen, 0)

        def HtmlScriptClose(self):
            return self.getToken(PhpParser.HtmlScriptClose, 0)

        def XmlStart(self):
            return self.getToken(PhpParser.XmlStart, 0)

        def XmlClose(self):
            return self.getToken(PhpParser.XmlClose, 0)

        def XmlText(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.XmlText)
            else:
                return self.getToken(PhpParser.XmlText, i)

        def getRuleIndex(self):
            return PhpParser.RULE_htmlElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHtmlElement" ):
                listener.enterHtmlElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHtmlElement" ):
                listener.exitHtmlElement(self)




    def htmlElement(self):

        localctx = PhpParser.HtmlElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_htmlElement)
        self._la = 0 # Token type
        try:
            self.state = 324
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.HtmlDtd]:
                self.enterOuterAlt(localctx, 1)
                self.state = 296
                self.match(PhpParser.HtmlDtd)
                pass
            elif token in [PhpParser.HtmlClose]:
                self.enterOuterAlt(localctx, 2)
                self.state = 297
                self.match(PhpParser.HtmlClose)
                pass
            elif token in [PhpParser.HtmlStyleOpen]:
                self.enterOuterAlt(localctx, 3)
                self.state = 298
                self.match(PhpParser.HtmlStyleOpen)
                pass
            elif token in [PhpParser.HtmlOpen]:
                self.enterOuterAlt(localctx, 4)
                self.state = 299
                self.match(PhpParser.HtmlOpen)
                pass
            elif token in [PhpParser.HtmlName]:
                self.enterOuterAlt(localctx, 5)
                self.state = 300
                self.match(PhpParser.HtmlName)
                pass
            elif token in [PhpParser.HtmlSlashClose]:
                self.enterOuterAlt(localctx, 6)
                self.state = 301
                self.match(PhpParser.HtmlSlashClose)
                pass
            elif token in [PhpParser.HtmlSlash]:
                self.enterOuterAlt(localctx, 7)
                self.state = 302
                self.match(PhpParser.HtmlSlash)
                pass
            elif token in [PhpParser.HtmlText]:
                self.enterOuterAlt(localctx, 8)
                self.state = 303
                self.match(PhpParser.HtmlText)
                pass
            elif token in [PhpParser.HtmlEquals]:
                self.enterOuterAlt(localctx, 9)
                self.state = 304
                self.match(PhpParser.HtmlEquals)
                pass
            elif token in [PhpParser.HtmlStartQuoteString]:
                self.enterOuterAlt(localctx, 10)
                self.state = 305
                self.match(PhpParser.HtmlStartQuoteString)
                pass
            elif token in [PhpParser.HtmlEndQuoteString]:
                self.enterOuterAlt(localctx, 11)
                self.state = 306
                self.match(PhpParser.HtmlEndQuoteString)
                pass
            elif token in [PhpParser.HtmlStartDoubleQuoteString]:
                self.enterOuterAlt(localctx, 12)
                self.state = 307
                self.match(PhpParser.HtmlStartDoubleQuoteString)
                pass
            elif token in [PhpParser.HtmlEndDoubleQuoteString]:
                self.enterOuterAlt(localctx, 13)
                self.state = 308
                self.match(PhpParser.HtmlEndDoubleQuoteString)
                pass
            elif token in [PhpParser.HtmlHex]:
                self.enterOuterAlt(localctx, 14)
                self.state = 309
                self.match(PhpParser.HtmlHex)
                pass
            elif token in [PhpParser.HtmlDecimal]:
                self.enterOuterAlt(localctx, 15)
                self.state = 310
                self.match(PhpParser.HtmlDecimal)
                pass
            elif token in [PhpParser.HtmlQuoteString]:
                self.enterOuterAlt(localctx, 16)
                self.state = 311
                self.match(PhpParser.HtmlQuoteString)
                pass
            elif token in [PhpParser.HtmlDoubleQuoteString]:
                self.enterOuterAlt(localctx, 17)
                self.state = 312
                self.match(PhpParser.HtmlDoubleQuoteString)
                pass
            elif token in [PhpParser.StyleBody]:
                self.enterOuterAlt(localctx, 18)
                self.state = 313
                self.match(PhpParser.StyleBody)
                pass
            elif token in [PhpParser.HtmlScriptOpen]:
                self.enterOuterAlt(localctx, 19)
                self.state = 314
                self.match(PhpParser.HtmlScriptOpen)
                pass
            elif token in [PhpParser.HtmlScriptClose]:
                self.enterOuterAlt(localctx, 20)
                self.state = 315
                self.match(PhpParser.HtmlScriptClose)
                pass
            elif token in [PhpParser.XmlStart]:
                self.enterOuterAlt(localctx, 21)
                self.state = 316
                self.match(PhpParser.XmlStart)
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.XmlText:
                    self.state = 317
                    self.match(PhpParser.XmlText)
                    self.state = 322
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 323
                self.match(PhpParser.XmlClose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScriptTextContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ScriptText(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.ScriptText)
            else:
                return self.getToken(PhpParser.ScriptText, i)

        def getRuleIndex(self):
            return PhpParser.RULE_scriptText

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScriptText" ):
                listener.enterScriptText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScriptText" ):
                listener.exitScriptText(self)




    def scriptText(self):

        localctx = PhpParser.ScriptTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_scriptText)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 326
                    self.match(PhpParser.ScriptText)

                else:
                    raise NoViableAltException(self)
                self.state = 329 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PhpBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ImportStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.ImportStatementContext,i)


        def topStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TopStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.TopStatementContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_phpBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhpBlock" ):
                listener.enterPhpBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhpBlock" ):
                listener.exitPhpBlock(self)




    def phpBlock(self):

        localctx = PhpParser.PhpBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_phpBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 331
                    self.importStatement() 
                self.state = 336
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

            self.state = 338 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 337
                    self.topStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 340 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Import(self):
            return self.getToken(PhpParser.Import, 0)

        def Namespace(self):
            return self.getToken(PhpParser.Namespace, 0)

        def namespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.NamespaceNameListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_importStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStatement" ):
                listener.enterImportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStatement" ):
                listener.exitImportStatement(self)




    def importStatement(self):

        localctx = PhpParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_importStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(PhpParser.Import)
            self.state = 343
            self.match(PhpParser.Namespace)
            self.state = 344
            self.namespaceNameList()
            self.state = 345
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def useDeclaration(self):
            return self.getTypedRuleContext(PhpParser.UseDeclarationContext,0)


        def namespaceDeclaration(self):
            return self.getTypedRuleContext(PhpParser.NamespaceDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PhpParser.FunctionDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(PhpParser.ClassDeclarationContext,0)


        def globalConstantDeclaration(self):
            return self.getTypedRuleContext(PhpParser.GlobalConstantDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(PhpParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_topStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopStatement" ):
                listener.enterTopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopStatement" ):
                listener.exitTopStatement(self)




    def topStatement(self):

        localctx = PhpParser.TopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_topStatement)
        try:
            self.state = 354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 347
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 348
                self.useDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 349
                self.namespaceDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 350
                self.functionDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 351
                self.classDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 352
                self.globalConstantDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 353
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Use(self):
            return self.getToken(PhpParser.Use, 0)

        def useDeclarationContentList(self):
            return self.getTypedRuleContext(PhpParser.UseDeclarationContentListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Function_(self):
            return self.getToken(PhpParser.Function_, 0)

        def Const(self):
            return self.getToken(PhpParser.Const, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_useDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDeclaration" ):
                listener.enterUseDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDeclaration" ):
                listener.exitUseDeclaration(self)




    def useDeclaration(self):

        localctx = PhpParser.UseDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_useDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(PhpParser.Use)
            self.state = 358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 357
                _la = self._input.LA(1)
                if not(_la==PhpParser.Const or _la==PhpParser.Function_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 360
            self.useDeclarationContentList()
            self.state = 361
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseDeclarationContentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def useDeclarationContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.UseDeclarationContentContext)
            else:
                return self.getTypedRuleContext(PhpParser.UseDeclarationContentContext,i)


        def NamespaceSeparator(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.NamespaceSeparator)
            else:
                return self.getToken(PhpParser.NamespaceSeparator, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_useDeclarationContentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDeclarationContentList" ):
                listener.enterUseDeclarationContentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDeclarationContentList" ):
                listener.exitUseDeclarationContentList(self)




    def useDeclarationContentList(self):

        localctx = PhpParser.UseDeclarationContentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_useDeclarationContentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.NamespaceSeparator:
                self.state = 363
                self.match(PhpParser.NamespaceSeparator)


            self.state = 366
            self.useDeclarationContent()
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 367
                self.match(PhpParser.Comma)
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.NamespaceSeparator:
                    self.state = 368
                    self.match(PhpParser.NamespaceSeparator)


                self.state = 371
                self.useDeclarationContent()
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseDeclarationContentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.NamespaceNameListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_useDeclarationContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseDeclarationContent" ):
                listener.enterUseDeclarationContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseDeclarationContent" ):
                listener.exitUseDeclarationContent(self)




    def useDeclarationContent(self):

        localctx = PhpParser.UseDeclarationContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_useDeclarationContent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.namespaceNameList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespaceDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(PhpParser.Namespace, 0)

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def namespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.NamespaceNameListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def namespaceStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.NamespaceStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.NamespaceStatementContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_namespaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceDeclaration" ):
                listener.enterNamespaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceDeclaration" ):
                listener.exitNamespaceDeclaration(self)




    def namespaceDeclaration(self):

        localctx = PhpParser.NamespaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_namespaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(PhpParser.Namespace)
            self.state = 394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)))) != 0) or _la==PhpParser.Label:
                    self.state = 380
                    self.namespaceNameList()


                self.state = 383
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PhpParser.HtmlText) | (1 << PhpParser.XmlStart) | (1 << PhpParser.HtmlScriptOpen) | (1 << PhpParser.HtmlStyleOpen) | (1 << PhpParser.HtmlDtd) | (1 << PhpParser.HtmlOpen) | (1 << PhpParser.HtmlClose) | (1 << PhpParser.HtmlSlashClose) | (1 << PhpParser.HtmlSlash) | (1 << PhpParser.HtmlEquals) | (1 << PhpParser.HtmlStartQuoteString) | (1 << PhpParser.HtmlStartDoubleQuoteString) | (1 << PhpParser.HtmlHex) | (1 << PhpParser.HtmlDecimal) | (1 << PhpParser.HtmlName) | (1 << PhpParser.HtmlEndQuoteString) | (1 << PhpParser.HtmlQuoteString) | (1 << PhpParser.HtmlEndDoubleQuoteString) | (1 << PhpParser.HtmlDoubleQuoteString) | (1 << PhpParser.ScriptText) | (1 << PhpParser.HtmlScriptClose) | (1 << PhpParser.StyleBody) | (1 << PhpParser.AttributeStart) | (1 << PhpParser.Abstract) | (1 << PhpParser.Array) | (1 << PhpParser.As) | (1 << PhpParser.BinaryCast) | (1 << PhpParser.BoolType) | (1 << PhpParser.BooleanConstant) | (1 << PhpParser.Break) | (1 << PhpParser.Callable) | (1 << PhpParser.Case) | (1 << PhpParser.Catch) | (1 << PhpParser.Class) | (1 << PhpParser.Clone) | (1 << PhpParser.Const) | (1 << PhpParser.Continue) | (1 << PhpParser.Declare) | (1 << PhpParser.Default) | (1 << PhpParser.Do) | (1 << PhpParser.DoubleCast) | (1 << PhpParser.DoubleType) | (1 << PhpParser.Echo))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PhpParser.Else - 64)) | (1 << (PhpParser.ElseIf - 64)) | (1 << (PhpParser.Empty - 64)) | (1 << (PhpParser.Enum_ - 64)) | (1 << (PhpParser.EndDeclare - 64)) | (1 << (PhpParser.EndFor - 64)) | (1 << (PhpParser.EndForeach - 64)) | (1 << (PhpParser.EndIf - 64)) | (1 << (PhpParser.EndSwitch - 64)) | (1 << (PhpParser.EndWhile - 64)) | (1 << (PhpParser.Eval - 64)) | (1 << (PhpParser.Exit - 64)) | (1 << (PhpParser.Extends - 64)) | (1 << (PhpParser.Final - 64)) | (1 << (PhpParser.Finally - 64)) | (1 << (PhpParser.FloatCast - 64)) | (1 << (PhpParser.For - 64)) | (1 << (PhpParser.Foreach - 64)) | (1 << (PhpParser.Function_ - 64)) | (1 << (PhpParser.Global - 64)) | (1 << (PhpParser.Goto - 64)) | (1 << (PhpParser.If - 64)) | (1 << (PhpParser.Implements - 64)) | (1 << (PhpParser.Import - 64)) | (1 << (PhpParser.Include - 64)) | (1 << (PhpParser.IncludeOnce - 64)) | (1 << (PhpParser.InstanceOf - 64)) | (1 << (PhpParser.InsteadOf - 64)) | (1 << (PhpParser.Int8Cast - 64)) | (1 << (PhpParser.Int16Cast - 64)) | (1 << (PhpParser.Int64Type - 64)) | (1 << (PhpParser.IntType - 64)) | (1 << (PhpParser.Interface - 64)) | (1 << (PhpParser.IsSet - 64)) | (1 << (PhpParser.List - 64)) | (1 << (PhpParser.LogicalAnd - 64)) | (1 << (PhpParser.LogicalOr - 64)) | (1 << (PhpParser.LogicalXor - 64)) | (1 << (PhpParser.Match_ - 64)) | (1 << (PhpParser.Namespace - 64)) | (1 << (PhpParser.New - 64)) | (1 << (PhpParser.Null - 64)) | (1 << (PhpParser.ObjectType - 64)) | (1 << (PhpParser.Parent_ - 64)) | (1 << (PhpParser.Partial - 64)) | (1 << (PhpParser.Print - 64)) | (1 << (PhpParser.Private - 64)) | (1 << (PhpParser.Protected - 64)) | (1 << (PhpParser.Public - 64)) | (1 << (PhpParser.Readonly - 64)) | (1 << (PhpParser.Require - 64)) | (1 << (PhpParser.RequireOnce - 64)) | (1 << (PhpParser.Resource - 64)) | (1 << (PhpParser.Return - 64)) | (1 << (PhpParser.Static - 64)) | (1 << (PhpParser.StringType - 64)) | (1 << (PhpParser.Switch - 64)) | (1 << (PhpParser.Throw - 64)) | (1 << (PhpParser.Trait - 64)) | (1 << (PhpParser.Try - 64)) | (1 << (PhpParser.Typeof - 64)) | (1 << (PhpParser.UintCast - 64)) | (1 << (PhpParser.UnicodeCast - 64)) | (1 << (PhpParser.Unset - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PhpParser.Use - 128)) | (1 << (PhpParser.Var - 128)) | (1 << (PhpParser.While - 128)) | (1 << (PhpParser.Yield - 128)) | (1 << (PhpParser.From - 128)) | (1 << (PhpParser.LambdaFn - 128)) | (1 << (PhpParser.Ticks - 128)) | (1 << (PhpParser.Encoding - 128)) | (1 << (PhpParser.StrictTypes - 128)) | (1 << (PhpParser.Get - 128)) | (1 << (PhpParser.Set - 128)) | (1 << (PhpParser.Call - 128)) | (1 << (PhpParser.CallStatic - 128)) | (1 << (PhpParser.Constructor - 128)) | (1 << (PhpParser.Destruct - 128)) | (1 << (PhpParser.Wakeup - 128)) | (1 << (PhpParser.Sleep - 128)) | (1 << (PhpParser.Autoload - 128)) | (1 << (PhpParser.IsSet__ - 128)) | (1 << (PhpParser.Unset__ - 128)) | (1 << (PhpParser.ToString__ - 128)) | (1 << (PhpParser.Invoke - 128)) | (1 << (PhpParser.SetState - 128)) | (1 << (PhpParser.Clone__ - 128)) | (1 << (PhpParser.DebugInfo - 128)) | (1 << (PhpParser.Namespace__ - 128)) | (1 << (PhpParser.Class__ - 128)) | (1 << (PhpParser.Traic__ - 128)) | (1 << (PhpParser.Function__ - 128)) | (1 << (PhpParser.Method__ - 128)) | (1 << (PhpParser.Line__ - 128)) | (1 << (PhpParser.File__ - 128)) | (1 << (PhpParser.Dir__ - 128)) | (1 << (PhpParser.Inc - 128)) | (1 << (PhpParser.Dec - 128)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.OpenCurlyBracket - 194)) | (1 << (PhpParser.SemiColon - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                    self.state = 384
                    self.namespaceStatement()
                    self.state = 389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 390
                self.match(PhpParser.CloseCurlyBracket)
                pass

            elif la_ == 2:
                self.state = 391
                self.namespaceNameList()
                self.state = 392
                self.match(PhpParser.SemiColon)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespaceStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def useDeclaration(self):
            return self.getTypedRuleContext(PhpParser.UseDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PhpParser.FunctionDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(PhpParser.ClassDeclarationContext,0)


        def globalConstantDeclaration(self):
            return self.getTypedRuleContext(PhpParser.GlobalConstantDeclarationContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_namespaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceStatement" ):
                listener.enterNamespaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceStatement" ):
                listener.exitNamespaceStatement(self)




    def namespaceStatement(self):

        localctx = PhpParser.NamespaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_namespaceStatement)
        try:
            self.state = 401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 396
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 397
                self.useDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 398
                self.functionDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 399
                self.classDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 400
                self.globalConstantDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Function_(self):
            return self.getToken(PhpParser.Function_, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(PhpParser.FormalParameterListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def typeParameterListInBrackets(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterListInBracketsContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def typeHint(self):
            return self.getTypedRuleContext(PhpParser.TypeHintContext,0)


        def QuestionMark(self):
            return self.getToken(PhpParser.QuestionMark, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)




    def functionDeclaration(self):

        localctx = PhpParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.AttributeStart:
                self.state = 403
                self.attributes()


            self.state = 406
            self.match(PhpParser.Function_)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Ampersand:
                self.state = 407
                self.match(PhpParser.Ampersand)


            self.state = 410
            self.identifier()
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Lgeneric:
                self.state = 411
                self.typeParameterListInBrackets()


            self.state = 414
            self.match(PhpParser.OpenRoundBracket)
            self.state = 415
            self.formalParameterList()
            self.state = 416
            self.match(PhpParser.CloseRoundBracket)
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Colon:
                self.state = 417
                self.match(PhpParser.Colon)
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.QuestionMark:
                    self.state = 418
                    self.match(PhpParser.QuestionMark)


                self.state = 421
                self.typeHint(0)


            self.state = 424
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def classEntryType(self):
            return self.getTypedRuleContext(PhpParser.ClassEntryTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Interface(self):
            return self.getToken(PhpParser.Interface, 0)

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def Private(self):
            return self.getToken(PhpParser.Private, 0)

        def modifier(self):
            return self.getTypedRuleContext(PhpParser.ModifierContext,0)


        def Partial(self):
            return self.getToken(PhpParser.Partial, 0)

        def classStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ClassStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.ClassStatementContext,i)


        def typeParameterListInBrackets(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterListInBracketsContext,0)


        def Extends(self):
            return self.getToken(PhpParser.Extends, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def Implements(self):
            return self.getToken(PhpParser.Implements, 0)

        def interfaceList(self):
            return self.getTypedRuleContext(PhpParser.InterfaceListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = PhpParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.AttributeStart:
                self.state = 426
                self.attributes()


            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Private:
                self.state = 429
                self.match(PhpParser.Private)


            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Abstract or _la==PhpParser.Final:
                self.state = 432
                self.modifier()


            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Partial:
                self.state = 435
                self.match(PhpParser.Partial)


            self.state = 460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Class, PhpParser.Trait]:
                self.state = 438
                self.classEntryType()
                self.state = 439
                self.identifier()
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Lgeneric:
                    self.state = 440
                    self.typeParameterListInBrackets()


                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Extends:
                    self.state = 443
                    self.match(PhpParser.Extends)
                    self.state = 444
                    self.qualifiedStaticTypeRef()


                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Implements:
                    self.state = 447
                    self.match(PhpParser.Implements)
                    self.state = 448
                    self.interfaceList()


                pass
            elif token in [PhpParser.Interface]:
                self.state = 451
                self.match(PhpParser.Interface)
                self.state = 452
                self.identifier()
                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Lgeneric:
                    self.state = 453
                    self.typeParameterListInBrackets()


                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Extends:
                    self.state = 456
                    self.match(PhpParser.Extends)
                    self.state = 457
                    self.interfaceList()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 462
            self.match(PhpParser.OpenCurlyBracket)
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PhpParser.AttributeStart) | (1 << PhpParser.Abstract) | (1 << PhpParser.Const))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (PhpParser.Final - 77)) | (1 << (PhpParser.Function_ - 77)) | (1 << (PhpParser.Private - 77)) | (1 << (PhpParser.Protected - 77)) | (1 << (PhpParser.Public - 77)) | (1 << (PhpParser.Readonly - 77)) | (1 << (PhpParser.Static - 77)) | (1 << (PhpParser.Use - 77)) | (1 << (PhpParser.Var - 77)))) != 0):
                self.state = 463
                self.classStatement()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 469
            self.match(PhpParser.CloseCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassEntryTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(PhpParser.Class, 0)

        def Trait(self):
            return self.getToken(PhpParser.Trait, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_classEntryType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassEntryType" ):
                listener.enterClassEntryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassEntryType" ):
                listener.exitClassEntryType(self)




    def classEntryType(self):

        localctx = PhpParser.ClassEntryTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_classEntryType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            _la = self._input.LA(1)
            if not(_la==PhpParser.Class or _la==PhpParser.Trait):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterfaceListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedStaticTypeRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.QualifiedStaticTypeRefContext)
            else:
                return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_interfaceList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceList" ):
                listener.enterInterfaceList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceList" ):
                listener.exitInterfaceList(self)




    def interfaceList(self):

        localctx = PhpParser.InterfaceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_interfaceList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.qualifiedStaticTypeRef()
            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 474
                self.match(PhpParser.Comma)
                self.state = 475
                self.qualifiedStaticTypeRef()
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterListInBracketsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Lgeneric(self):
            return self.getToken(PhpParser.Lgeneric, 0)

        def typeParameterList(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterListContext,0)


        def Rgeneric(self):
            return self.getToken(PhpParser.Rgeneric, 0)

        def typeParameterWithDefaultsList(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterWithDefaultsListContext,0)


        def Comma(self):
            return self.getToken(PhpParser.Comma, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterListInBrackets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterListInBrackets" ):
                listener.enterTypeParameterListInBrackets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterListInBrackets" ):
                listener.exitTypeParameterListInBrackets(self)




    def typeParameterListInBrackets(self):

        localctx = PhpParser.TypeParameterListInBracketsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeParameterListInBrackets)
        try:
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 481
                self.match(PhpParser.Lgeneric)
                self.state = 482
                self.typeParameterList()
                self.state = 483
                self.match(PhpParser.Rgeneric)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 485
                self.match(PhpParser.Lgeneric)
                self.state = 486
                self.typeParameterWithDefaultsList()
                self.state = 487
                self.match(PhpParser.Rgeneric)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 489
                self.match(PhpParser.Lgeneric)
                self.state = 490
                self.typeParameterList()
                self.state = 491
                self.match(PhpParser.Comma)
                self.state = 492
                self.typeParameterWithDefaultsList()
                self.state = 493
                self.match(PhpParser.Rgeneric)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameterDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TypeParameterDeclContext)
            else:
                return self.getTypedRuleContext(PhpParser.TypeParameterDeclContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterList" ):
                listener.enterTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterList" ):
                listener.exitTypeParameterList(self)




    def typeParameterList(self):

        localctx = PhpParser.TypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeParameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.typeParameterDecl()
            self.state = 502
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,37,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 498
                    self.match(PhpParser.Comma)
                    self.state = 499
                    self.typeParameterDecl() 
                self.state = 504
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterWithDefaultsListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameterWithDefaultDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TypeParameterWithDefaultDeclContext)
            else:
                return self.getTypedRuleContext(PhpParser.TypeParameterWithDefaultDeclContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterWithDefaultsList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterWithDefaultsList" ):
                listener.enterTypeParameterWithDefaultsList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterWithDefaultsList" ):
                listener.exitTypeParameterWithDefaultsList(self)




    def typeParameterWithDefaultsList(self):

        localctx = PhpParser.TypeParameterWithDefaultsListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typeParameterWithDefaultsList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.typeParameterWithDefaultDecl()
            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 506
                self.match(PhpParser.Comma)
                self.state = 507
                self.typeParameterWithDefaultDecl()
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterDecl" ):
                listener.enterTypeParameterDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterDecl" ):
                listener.exitTypeParameterDecl(self)




    def typeParameterDecl(self):

        localctx = PhpParser.TypeParameterDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_typeParameterDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.AttributeStart:
                self.state = 513
                self.attributes()


            self.state = 516
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterWithDefaultDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(PhpParser.PrimitiveTypeContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_typeParameterWithDefaultDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterWithDefaultDecl" ):
                listener.enterTypeParameterWithDefaultDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterWithDefaultDecl" ):
                listener.exitTypeParameterWithDefaultDecl(self)




    def typeParameterWithDefaultDecl(self):

        localctx = PhpParser.TypeParameterWithDefaultDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_typeParameterWithDefaultDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.AttributeStart:
                self.state = 518
                self.attributes()


            self.state = 521
            self.identifier()
            self.state = 522
            self.match(PhpParser.Eq)
            self.state = 525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 523
                self.qualifiedStaticTypeRef()
                pass

            elif la_ == 2:
                self.state = 524
                self.primitiveType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericDynamicArgsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Lgeneric(self):
            return self.getToken(PhpParser.Lgeneric, 0)

        def typeRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TypeRefContext)
            else:
                return self.getTypedRuleContext(PhpParser.TypeRefContext,i)


        def Rgeneric(self):
            return self.getToken(PhpParser.Rgeneric, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_genericDynamicArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericDynamicArgs" ):
                listener.enterGenericDynamicArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericDynamicArgs" ):
                listener.exitGenericDynamicArgs(self)




    def genericDynamicArgs(self):

        localctx = PhpParser.GenericDynamicArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_genericDynamicArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.match(PhpParser.Lgeneric)
            self.state = 528
            self.typeRef()
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 529
                self.match(PhpParser.Comma)
                self.state = 530
                self.typeRef()
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 536
            self.match(PhpParser.Rgeneric)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributeGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.AttributeGroupContext)
            else:
                return self.getTypedRuleContext(PhpParser.AttributeGroupContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = PhpParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 538
                self.attributeGroup()
                self.state = 541 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PhpParser.AttributeStart):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AttributeStart(self):
            return self.getToken(PhpParser.AttributeStart, 0)

        def attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.AttributeContext)
            else:
                return self.getTypedRuleContext(PhpParser.AttributeContext,i)


        def CloseSquareBracket(self):
            return self.getToken(PhpParser.CloseSquareBracket, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_attributeGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeGroup" ):
                listener.enterAttributeGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeGroup" ):
                listener.exitAttributeGroup(self)




    def attributeGroup(self):

        localctx = PhpParser.AttributeGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_attributeGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.match(PhpParser.AttributeStart)
            self.state = 547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 544
                self.identifier()
                self.state = 545
                self.match(PhpParser.Colon)


            self.state = 549
            self.attribute()
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 550
                self.match(PhpParser.Comma)
                self.state = 551
                self.attribute()
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 557
            self.match(PhpParser.CloseSquareBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def arguments(self):
            return self.getTypedRuleContext(PhpParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)




    def attribute(self):

        localctx = PhpParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.qualifiedNamespaceName()
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.OpenRoundBracket:
                self.state = 560
                self.arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InnerStatementListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.InnerStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.InnerStatementContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_innerStatementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerStatementList" ):
                listener.enterInnerStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerStatementList" ):
                listener.exitInnerStatementList(self)




    def innerStatementList(self):

        localctx = PhpParser.InnerStatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_innerStatementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 563
                    self.innerStatement() 
                self.state = 568
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InnerStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PhpParser.FunctionDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(PhpParser.ClassDeclarationContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_innerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerStatement" ):
                listener.enterInnerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerStatement" ):
                listener.exitInnerStatement(self)




    def innerStatement(self):

        localctx = PhpParser.InnerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_innerStatement)
        try:
            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 569
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 570
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 571
                self.classDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(PhpParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(PhpParser.WhileStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(PhpParser.DoWhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(PhpParser.ForStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(PhpParser.SwitchStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(PhpParser.BreakStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(PhpParser.ContinueStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(PhpParser.ReturnStatementContext,0)


        def yieldExpression(self):
            return self.getTypedRuleContext(PhpParser.YieldExpressionContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def globalStatement(self):
            return self.getTypedRuleContext(PhpParser.GlobalStatementContext,0)


        def staticVariableStatement(self):
            return self.getTypedRuleContext(PhpParser.StaticVariableStatementContext,0)


        def echoStatement(self):
            return self.getTypedRuleContext(PhpParser.EchoStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(PhpParser.ExpressionStatementContext,0)


        def unsetStatement(self):
            return self.getTypedRuleContext(PhpParser.UnsetStatementContext,0)


        def foreachStatement(self):
            return self.getTypedRuleContext(PhpParser.ForeachStatementContext,0)


        def tryCatchFinally(self):
            return self.getTypedRuleContext(PhpParser.TryCatchFinallyContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(PhpParser.ThrowStatementContext,0)


        def gotoStatement(self):
            return self.getTypedRuleContext(PhpParser.GotoStatementContext,0)


        def declareStatement(self):
            return self.getTypedRuleContext(PhpParser.DeclareStatementContext,0)


        def emptyStatement_(self):
            return self.getTypedRuleContext(PhpParser.EmptyStatement_Context,0)


        def inlineHtmlStatement(self):
            return self.getTypedRuleContext(PhpParser.InlineHtmlStatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = PhpParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_statement)
        try:
            self.state = 601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                self.identifier()
                self.state = 575
                self.match(PhpParser.Colon)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.blockStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 578
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 579
                self.whileStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 580
                self.doWhileStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 581
                self.forStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 582
                self.switchStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 583
                self.breakStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 584
                self.continueStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 585
                self.returnStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 586
                self.yieldExpression()
                self.state = 587
                self.match(PhpParser.SemiColon)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 589
                self.globalStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 590
                self.staticVariableStatement()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 591
                self.echoStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 592
                self.expressionStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 593
                self.unsetStatement()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 594
                self.foreachStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 595
                self.tryCatchFinally()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 596
                self.throwStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 597
                self.gotoStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 598
                self.declareStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 599
                self.emptyStatement_()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 600
                self.inlineHtmlStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmptyStatement_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_emptyStatement_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement_" ):
                listener.enterEmptyStatement_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement_" ):
                listener.exitEmptyStatement_(self)




    def emptyStatement_(self):

        localctx = PhpParser.EmptyStatement_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_emptyStatement_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = PhpParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_blockStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(PhpParser.OpenCurlyBracket)
            self.state = 606
            self.innerStatementList()
            self.state = 607
            self.match(PhpParser.CloseCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(PhpParser.If, 0)

        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def elseIfStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ElseIfStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.ElseIfStatementContext,i)


        def elseStatement(self):
            return self.getTypedRuleContext(PhpParser.ElseStatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndIf(self):
            return self.getToken(PhpParser.EndIf, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def elseIfColonStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ElseIfColonStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.ElseIfColonStatementContext,i)


        def elseColonStatement(self):
            return self.getTypedRuleContext(PhpParser.ElseColonStatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = PhpParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 609
                self.match(PhpParser.If)
                self.state = 610
                self.parentheses()
                self.state = 611
                self.statement()
                self.state = 615
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 612
                        self.elseIfStatement() 
                    self.state = 617
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

                self.state = 619
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 618
                    self.elseStatement()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 621
                self.match(PhpParser.If)
                self.state = 622
                self.parentheses()
                self.state = 623
                self.match(PhpParser.Colon)
                self.state = 624
                self.innerStatementList()
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.ElseIf:
                    self.state = 625
                    self.elseIfColonStatement()
                    self.state = 630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Else:
                    self.state = 631
                    self.elseColonStatement()


                self.state = 634
                self.match(PhpParser.EndIf)
                self.state = 635
                self.match(PhpParser.SemiColon)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseIfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElseIf(self):
            return self.getToken(PhpParser.ElseIf, 0)

        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_elseIfStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfStatement" ):
                listener.enterElseIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfStatement" ):
                listener.exitElseIfStatement(self)




    def elseIfStatement(self):

        localctx = PhpParser.ElseIfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_elseIfStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(PhpParser.ElseIf)
            self.state = 640
            self.parentheses()
            self.state = 641
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseIfColonStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ElseIf(self):
            return self.getToken(PhpParser.ElseIf, 0)

        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_elseIfColonStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseIfColonStatement" ):
                listener.enterElseIfColonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseIfColonStatement" ):
                listener.exitElseIfColonStatement(self)




    def elseIfColonStatement(self):

        localctx = PhpParser.ElseIfColonStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_elseIfColonStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(PhpParser.ElseIf)
            self.state = 644
            self.parentheses()
            self.state = 645
            self.match(PhpParser.Colon)
            self.state = 646
            self.innerStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(PhpParser.Else, 0)

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_elseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseStatement" ):
                listener.enterElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseStatement" ):
                listener.exitElseStatement(self)




    def elseStatement(self):

        localctx = PhpParser.ElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_elseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 648
            self.match(PhpParser.Else)
            self.state = 649
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElseColonStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Else(self):
            return self.getToken(PhpParser.Else, 0)

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_elseColonStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseColonStatement" ):
                listener.enterElseColonStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseColonStatement" ):
                listener.exitElseColonStatement(self)




    def elseColonStatement(self):

        localctx = PhpParser.ElseColonStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_elseColonStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(PhpParser.Else)
            self.state = 652
            self.match(PhpParser.Colon)
            self.state = 653
            self.innerStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(PhpParser.While, 0)

        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndWhile(self):
            return self.getToken(PhpParser.EndWhile, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = PhpParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(PhpParser.While)
            self.state = 656
            self.parentheses()
            self.state = 663
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.HtmlText, PhpParser.XmlStart, PhpParser.HtmlScriptOpen, PhpParser.HtmlStyleOpen, PhpParser.HtmlDtd, PhpParser.HtmlOpen, PhpParser.HtmlClose, PhpParser.HtmlSlashClose, PhpParser.HtmlSlash, PhpParser.HtmlEquals, PhpParser.HtmlStartQuoteString, PhpParser.HtmlStartDoubleQuoteString, PhpParser.HtmlHex, PhpParser.HtmlDecimal, PhpParser.HtmlName, PhpParser.HtmlEndQuoteString, PhpParser.HtmlQuoteString, PhpParser.HtmlEndDoubleQuoteString, PhpParser.HtmlDoubleQuoteString, PhpParser.ScriptText, PhpParser.HtmlScriptClose, PhpParser.StyleBody, PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.Enum_, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function_, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Match_, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.From, PhpParser.LambdaFn, PhpParser.Ticks, PhpParser.Encoding, PhpParser.StrictTypes, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.Inc, PhpParser.Dec, PhpParser.NamespaceSeparator, PhpParser.Bang, PhpParser.Plus, PhpParser.Minus, PhpParser.Tilde, PhpParser.SuppressWarnings, PhpParser.Dollar, PhpParser.OpenRoundBracket, PhpParser.OpenSquareBracket, PhpParser.OpenCurlyBracket, PhpParser.SemiColon, PhpParser.VarName, PhpParser.Label, PhpParser.Octal, PhpParser.Decimal, PhpParser.Real, PhpParser.Hex, PhpParser.Binary, PhpParser.BackQuoteString, PhpParser.SingleQuoteString, PhpParser.DoubleQuote, PhpParser.StartNowDoc, PhpParser.StartHereDoc]:
                self.state = 657
                self.statement()
                pass
            elif token in [PhpParser.Colon]:
                self.state = 658
                self.match(PhpParser.Colon)
                self.state = 659
                self.innerStatementList()
                self.state = 660
                self.match(PhpParser.EndWhile)
                self.state = 661
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoWhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Do(self):
            return self.getToken(PhpParser.Do, 0)

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def While(self):
            return self.getToken(PhpParser.While, 0)

        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = PhpParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(PhpParser.Do)
            self.state = 666
            self.statement()
            self.state = 667
            self.match(PhpParser.While)
            self.state = 668
            self.parentheses()
            self.state = 669
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(PhpParser.For, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.SemiColon)
            else:
                return self.getToken(PhpParser.SemiColon, i)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndFor(self):
            return self.getToken(PhpParser.EndFor, 0)

        def forInit(self):
            return self.getTypedRuleContext(PhpParser.ForInitContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(PhpParser.ExpressionListContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(PhpParser.ForUpdateContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = PhpParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self.match(PhpParser.For)
            self.state = 672
            self.match(PhpParser.OpenRoundBracket)
            self.state = 674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                self.state = 673
                self.forInit()


            self.state = 676
            self.match(PhpParser.SemiColon)
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                self.state = 677
                self.expressionList()


            self.state = 680
            self.match(PhpParser.SemiColon)
            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                self.state = 681
                self.forUpdate()


            self.state = 684
            self.match(PhpParser.CloseRoundBracket)
            self.state = 691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.HtmlText, PhpParser.XmlStart, PhpParser.HtmlScriptOpen, PhpParser.HtmlStyleOpen, PhpParser.HtmlDtd, PhpParser.HtmlOpen, PhpParser.HtmlClose, PhpParser.HtmlSlashClose, PhpParser.HtmlSlash, PhpParser.HtmlEquals, PhpParser.HtmlStartQuoteString, PhpParser.HtmlStartDoubleQuoteString, PhpParser.HtmlHex, PhpParser.HtmlDecimal, PhpParser.HtmlName, PhpParser.HtmlEndQuoteString, PhpParser.HtmlQuoteString, PhpParser.HtmlEndDoubleQuoteString, PhpParser.HtmlDoubleQuoteString, PhpParser.ScriptText, PhpParser.HtmlScriptClose, PhpParser.StyleBody, PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.Enum_, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function_, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Match_, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.From, PhpParser.LambdaFn, PhpParser.Ticks, PhpParser.Encoding, PhpParser.StrictTypes, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.Inc, PhpParser.Dec, PhpParser.NamespaceSeparator, PhpParser.Bang, PhpParser.Plus, PhpParser.Minus, PhpParser.Tilde, PhpParser.SuppressWarnings, PhpParser.Dollar, PhpParser.OpenRoundBracket, PhpParser.OpenSquareBracket, PhpParser.OpenCurlyBracket, PhpParser.SemiColon, PhpParser.VarName, PhpParser.Label, PhpParser.Octal, PhpParser.Decimal, PhpParser.Real, PhpParser.Hex, PhpParser.Binary, PhpParser.BackQuoteString, PhpParser.SingleQuoteString, PhpParser.DoubleQuote, PhpParser.StartNowDoc, PhpParser.StartHereDoc]:
                self.state = 685
                self.statement()
                pass
            elif token in [PhpParser.Colon]:
                self.state = 686
                self.match(PhpParser.Colon)
                self.state = 687
                self.innerStatementList()
                self.state = 688
                self.match(PhpParser.EndFor)
                self.state = 689
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForInitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(PhpParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = PhpParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_forInit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForUpdateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(PhpParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_forUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForUpdate" ):
                listener.enterForUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForUpdate" ):
                listener.exitForUpdate(self)




    def forUpdate(self):

        localctx = PhpParser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(PhpParser.Switch, 0)

        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def EndSwitch(self):
            return self.getToken(PhpParser.EndSwitch, 0)

        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.SemiColon)
            else:
                return self.getToken(PhpParser.SemiColon, i)

        def switchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.SwitchBlockContext)
            else:
                return self.getTypedRuleContext(PhpParser.SwitchBlockContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = PhpParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_switchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(PhpParser.Switch)
            self.state = 698
            self.parentheses()
            self.state = 722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.OpenCurlyBracket]:
                self.state = 699
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.SemiColon:
                    self.state = 700
                    self.match(PhpParser.SemiColon)


                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.Case or _la==PhpParser.Default:
                    self.state = 703
                    self.switchBlock()
                    self.state = 708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 709
                self.match(PhpParser.CloseCurlyBracket)
                pass
            elif token in [PhpParser.Colon]:
                self.state = 710
                self.match(PhpParser.Colon)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.SemiColon:
                    self.state = 711
                    self.match(PhpParser.SemiColon)


                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.Case or _la==PhpParser.Default:
                    self.state = 714
                    self.switchBlock()
                    self.state = 719
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 720
                self.match(PhpParser.EndSwitch)
                self.state = 721
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SwitchBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Colon)
            else:
                return self.getToken(PhpParser.Colon, i)

        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.SemiColon)
            else:
                return self.getToken(PhpParser.SemiColon, i)

        def Case(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Case)
            else:
                return self.getToken(PhpParser.Case, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def Default(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Default)
            else:
                return self.getToken(PhpParser.Default, i)

        def getRuleIndex(self):
            return PhpParser.RULE_switchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlock" ):
                listener.enterSwitchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlock" ):
                listener.exitSwitchBlock(self)




    def switchBlock(self):

        localctx = PhpParser.SwitchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_switchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 727
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PhpParser.Case]:
                        self.state = 724
                        self.match(PhpParser.Case)
                        self.state = 725
                        self.expression(0)
                        pass
                    elif token in [PhpParser.Default]:
                        self.state = 726
                        self.match(PhpParser.Default)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 729
                    _la = self._input.LA(1)
                    if not(_la==PhpParser.Colon or _la==PhpParser.SemiColon):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 732 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 734
            self.innerStatementList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BreakStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(PhpParser.Break, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = PhpParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_breakStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.match(PhpParser.Break)
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                self.state = 737
                self.expression(0)


            self.state = 740
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Continue(self):
            return self.getToken(PhpParser.Continue, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = PhpParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_continueStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(PhpParser.Continue)
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                self.state = 743
                self.expression(0)


            self.state = 746
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Return(self):
            return self.getToken(PhpParser.Return, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = PhpParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(PhpParser.Return)
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                self.state = 749
                self.expression(0)


            self.state = 752
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = PhpParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.expression(0)
            self.state = 755
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnsetStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Unset(self):
            return self.getToken(PhpParser.Unset, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def chainList(self):
            return self.getTypedRuleContext(PhpParser.ChainListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_unsetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsetStatement" ):
                listener.enterUnsetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsetStatement" ):
                listener.exitUnsetStatement(self)




    def unsetStatement(self):

        localctx = PhpParser.UnsetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_unsetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(PhpParser.Unset)
            self.state = 758
            self.match(PhpParser.OpenRoundBracket)
            self.state = 759
            self.chainList()
            self.state = 760
            self.match(PhpParser.CloseRoundBracket)
            self.state = 761
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForeachStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Foreach(self):
            return self.getToken(PhpParser.Foreach, 0)

        def OpenRoundBracket(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.OpenRoundBracket)
            else:
                return self.getToken(PhpParser.OpenRoundBracket, i)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def As(self):
            return self.getToken(PhpParser.As, 0)

        def arrayDestructuring(self):
            return self.getTypedRuleContext(PhpParser.ArrayDestructuringContext,0)


        def CloseRoundBracket(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.CloseRoundBracket)
            else:
                return self.getToken(PhpParser.CloseRoundBracket, i)

        def chain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ChainContext)
            else:
                return self.getTypedRuleContext(PhpParser.ChainContext,i)


        def assignable(self):
            return self.getTypedRuleContext(PhpParser.AssignableContext,0)


        def List(self):
            return self.getToken(PhpParser.List, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(PhpParser.AssignmentListContext,0)


        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndForeach(self):
            return self.getToken(PhpParser.EndForeach, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Ampersand(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Ampersand)
            else:
                return self.getToken(PhpParser.Ampersand, i)

        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_foreachStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeachStatement" ):
                listener.enterForeachStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeachStatement" ):
                listener.exitForeachStatement(self)




    def foreachStatement(self):

        localctx = PhpParser.ForeachStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_foreachStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(PhpParser.Foreach)
            self.state = 808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 764
                self.match(PhpParser.OpenRoundBracket)
                self.state = 765
                self.expression(0)
                self.state = 766
                self.match(PhpParser.As)
                self.state = 767
                self.arrayDestructuring()
                self.state = 768
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 2:
                self.state = 770
                self.match(PhpParser.OpenRoundBracket)
                self.state = 771
                self.chain()
                self.state = 772
                self.match(PhpParser.As)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Ampersand:
                    self.state = 773
                    self.match(PhpParser.Ampersand)


                self.state = 776
                self.assignable()
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.DoubleArrow:
                    self.state = 777
                    self.match(PhpParser.DoubleArrow)
                    self.state = 779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PhpParser.Ampersand:
                        self.state = 778
                        self.match(PhpParser.Ampersand)


                    self.state = 781
                    self.chain()


                self.state = 784
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 3:
                self.state = 786
                self.match(PhpParser.OpenRoundBracket)
                self.state = 787
                self.expression(0)
                self.state = 788
                self.match(PhpParser.As)
                self.state = 789
                self.assignable()
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.DoubleArrow:
                    self.state = 790
                    self.match(PhpParser.DoubleArrow)
                    self.state = 792
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PhpParser.Ampersand:
                        self.state = 791
                        self.match(PhpParser.Ampersand)


                    self.state = 794
                    self.chain()


                self.state = 797
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 4:
                self.state = 799
                self.match(PhpParser.OpenRoundBracket)
                self.state = 800
                self.chain()
                self.state = 801
                self.match(PhpParser.As)
                self.state = 802
                self.match(PhpParser.List)
                self.state = 803
                self.match(PhpParser.OpenRoundBracket)
                self.state = 804
                self.assignmentList()
                self.state = 805
                self.match(PhpParser.CloseRoundBracket)
                self.state = 806
                self.match(PhpParser.CloseRoundBracket)
                pass


            self.state = 816
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.HtmlText, PhpParser.XmlStart, PhpParser.HtmlScriptOpen, PhpParser.HtmlStyleOpen, PhpParser.HtmlDtd, PhpParser.HtmlOpen, PhpParser.HtmlClose, PhpParser.HtmlSlashClose, PhpParser.HtmlSlash, PhpParser.HtmlEquals, PhpParser.HtmlStartQuoteString, PhpParser.HtmlStartDoubleQuoteString, PhpParser.HtmlHex, PhpParser.HtmlDecimal, PhpParser.HtmlName, PhpParser.HtmlEndQuoteString, PhpParser.HtmlQuoteString, PhpParser.HtmlEndDoubleQuoteString, PhpParser.HtmlDoubleQuoteString, PhpParser.ScriptText, PhpParser.HtmlScriptClose, PhpParser.StyleBody, PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.Enum_, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function_, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Match_, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.From, PhpParser.LambdaFn, PhpParser.Ticks, PhpParser.Encoding, PhpParser.StrictTypes, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.Inc, PhpParser.Dec, PhpParser.NamespaceSeparator, PhpParser.Bang, PhpParser.Plus, PhpParser.Minus, PhpParser.Tilde, PhpParser.SuppressWarnings, PhpParser.Dollar, PhpParser.OpenRoundBracket, PhpParser.OpenSquareBracket, PhpParser.OpenCurlyBracket, PhpParser.SemiColon, PhpParser.VarName, PhpParser.Label, PhpParser.Octal, PhpParser.Decimal, PhpParser.Real, PhpParser.Hex, PhpParser.Binary, PhpParser.BackQuoteString, PhpParser.SingleQuoteString, PhpParser.DoubleQuote, PhpParser.StartNowDoc, PhpParser.StartHereDoc]:
                self.state = 810
                self.statement()
                pass
            elif token in [PhpParser.Colon]:
                self.state = 811
                self.match(PhpParser.Colon)
                self.state = 812
                self.innerStatementList()
                self.state = 813
                self.match(PhpParser.EndForeach)
                self.state = 814
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryCatchFinallyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(PhpParser.Try, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def finallyStatement(self):
            return self.getTypedRuleContext(PhpParser.FinallyStatementContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(PhpParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_tryCatchFinally

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatchFinally" ):
                listener.enterTryCatchFinally(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatchFinally" ):
                listener.exitTryCatchFinally(self)




    def tryCatchFinally(self):

        localctx = PhpParser.TryCatchFinallyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_tryCatchFinally)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(PhpParser.Try)
            self.state = 819
            self.blockStatement()
            self.state = 835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 821 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 820
                        self.catchClause()

                    else:
                        raise NoViableAltException(self)
                    self.state = 823 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                self.state = 826
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 825
                    self.finallyStatement()


                pass

            elif la_ == 2:
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.Catch:
                    self.state = 828
                    self.catchClause()
                    self.state = 833
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 834
                self.finallyStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(PhpParser.Catch, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def qualifiedStaticTypeRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.QualifiedStaticTypeRefContext)
            else:
                return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,i)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def Pipe(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Pipe)
            else:
                return self.getToken(PhpParser.Pipe, i)

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = PhpParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_catchClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.match(PhpParser.Catch)
            self.state = 838
            self.match(PhpParser.OpenRoundBracket)
            self.state = 839
            self.qualifiedStaticTypeRef()
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Pipe:
                self.state = 840
                self.match(PhpParser.Pipe)
                self.state = 841
                self.qualifiedStaticTypeRef()
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.VarName:
                self.state = 847
                self.match(PhpParser.VarName)


            self.state = 850
            self.match(PhpParser.CloseRoundBracket)
            self.state = 851
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FinallyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Finally(self):
            return self.getToken(PhpParser.Finally, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_finallyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyStatement" ):
                listener.enterFinallyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyStatement" ):
                listener.exitFinallyStatement(self)




    def finallyStatement(self):

        localctx = PhpParser.FinallyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_finallyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(PhpParser.Finally)
            self.state = 854
            self.blockStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThrowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(PhpParser.Throw, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = PhpParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(PhpParser.Throw)
            self.state = 857
            self.expression(0)
            self.state = 858
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GotoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(PhpParser.Goto, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_gotoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGotoStatement" ):
                listener.enterGotoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGotoStatement" ):
                listener.exitGotoStatement(self)




    def gotoStatement(self):

        localctx = PhpParser.GotoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_gotoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(PhpParser.Goto)
            self.state = 861
            self.identifier()
            self.state = 862
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclareStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Declare(self):
            return self.getToken(PhpParser.Declare, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def declareList(self):
            return self.getTypedRuleContext(PhpParser.DeclareListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def statement(self):
            return self.getTypedRuleContext(PhpParser.StatementContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def innerStatementList(self):
            return self.getTypedRuleContext(PhpParser.InnerStatementListContext,0)


        def EndDeclare(self):
            return self.getToken(PhpParser.EndDeclare, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_declareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareStatement" ):
                listener.enterDeclareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareStatement" ):
                listener.exitDeclareStatement(self)




    def declareStatement(self):

        localctx = PhpParser.DeclareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_declareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(PhpParser.Declare)
            self.state = 865
            self.match(PhpParser.OpenRoundBracket)
            self.state = 866
            self.declareList()
            self.state = 867
            self.match(PhpParser.CloseRoundBracket)
            self.state = 874
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.HtmlText, PhpParser.XmlStart, PhpParser.HtmlScriptOpen, PhpParser.HtmlStyleOpen, PhpParser.HtmlDtd, PhpParser.HtmlOpen, PhpParser.HtmlClose, PhpParser.HtmlSlashClose, PhpParser.HtmlSlash, PhpParser.HtmlEquals, PhpParser.HtmlStartQuoteString, PhpParser.HtmlStartDoubleQuoteString, PhpParser.HtmlHex, PhpParser.HtmlDecimal, PhpParser.HtmlName, PhpParser.HtmlEndQuoteString, PhpParser.HtmlQuoteString, PhpParser.HtmlEndDoubleQuoteString, PhpParser.HtmlDoubleQuoteString, PhpParser.ScriptText, PhpParser.HtmlScriptClose, PhpParser.StyleBody, PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.Enum_, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function_, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Match_, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.From, PhpParser.LambdaFn, PhpParser.Ticks, PhpParser.Encoding, PhpParser.StrictTypes, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.Inc, PhpParser.Dec, PhpParser.NamespaceSeparator, PhpParser.Bang, PhpParser.Plus, PhpParser.Minus, PhpParser.Tilde, PhpParser.SuppressWarnings, PhpParser.Dollar, PhpParser.OpenRoundBracket, PhpParser.OpenSquareBracket, PhpParser.OpenCurlyBracket, PhpParser.SemiColon, PhpParser.VarName, PhpParser.Label, PhpParser.Octal, PhpParser.Decimal, PhpParser.Real, PhpParser.Hex, PhpParser.Binary, PhpParser.BackQuoteString, PhpParser.SingleQuoteString, PhpParser.DoubleQuote, PhpParser.StartNowDoc, PhpParser.StartHereDoc]:
                self.state = 868
                self.statement()
                pass
            elif token in [PhpParser.Colon]:
                self.state = 869
                self.match(PhpParser.Colon)
                self.state = 870
                self.innerStatementList()
                self.state = 871
                self.match(PhpParser.EndDeclare)
                self.state = 872
                self.match(PhpParser.SemiColon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InlineHtmlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inlineHtml(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.InlineHtmlContext)
            else:
                return self.getTypedRuleContext(PhpParser.InlineHtmlContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_inlineHtmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineHtmlStatement" ):
                listener.enterInlineHtmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineHtmlStatement" ):
                listener.exitInlineHtmlStatement(self)




    def inlineHtmlStatement(self):

        localctx = PhpParser.InlineHtmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_inlineHtmlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 876
                    self.inlineHtml()

                else:
                    raise NoViableAltException(self)
                self.state = 879 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclareListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.DirectiveContext)
            else:
                return self.getTypedRuleContext(PhpParser.DirectiveContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_declareList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareList" ):
                listener.enterDeclareList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareList" ):
                listener.exitDeclareList(self)




    def declareList(self):

        localctx = PhpParser.DeclareListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_declareList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.directive()
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 882
                self.match(PhpParser.Comma)
                self.state = 883
                self.directive()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ticks(self):
            return self.getToken(PhpParser.Ticks, 0)

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def numericConstant(self):
            return self.getTypedRuleContext(PhpParser.NumericConstantContext,0)


        def Real(self):
            return self.getToken(PhpParser.Real, 0)

        def Encoding(self):
            return self.getToken(PhpParser.Encoding, 0)

        def SingleQuoteString(self):
            return self.getToken(PhpParser.SingleQuoteString, 0)

        def StrictTypes(self):
            return self.getToken(PhpParser.StrictTypes, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirective" ):
                listener.enterDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirective" ):
                listener.exitDirective(self)




    def directive(self):

        localctx = PhpParser.DirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_directive)
        try:
            self.state = 901
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Ticks]:
                self.enterOuterAlt(localctx, 1)
                self.state = 889
                self.match(PhpParser.Ticks)
                self.state = 890
                self.match(PhpParser.Eq)
                self.state = 893
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PhpParser.Octal, PhpParser.Decimal, PhpParser.Hex, PhpParser.Binary]:
                    self.state = 891
                    self.numericConstant()
                    pass
                elif token in [PhpParser.Real]:
                    self.state = 892
                    self.match(PhpParser.Real)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [PhpParser.Encoding]:
                self.enterOuterAlt(localctx, 2)
                self.state = 895
                self.match(PhpParser.Encoding)
                self.state = 896
                self.match(PhpParser.Eq)
                self.state = 897
                self.match(PhpParser.SingleQuoteString)
                pass
            elif token in [PhpParser.StrictTypes]:
                self.enterOuterAlt(localctx, 3)
                self.state = 898
                self.match(PhpParser.StrictTypes)
                self.state = 899
                self.match(PhpParser.Eq)
                self.state = 900
                self.numericConstant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(PhpParser.FormalParameterContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = PhpParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & ((1 << (PhpParser.AttributeStart - 43)) | (1 << (PhpParser.Abstract - 43)) | (1 << (PhpParser.Array - 43)) | (1 << (PhpParser.As - 43)) | (1 << (PhpParser.BinaryCast - 43)) | (1 << (PhpParser.BoolType - 43)) | (1 << (PhpParser.BooleanConstant - 43)) | (1 << (PhpParser.Break - 43)) | (1 << (PhpParser.Callable - 43)) | (1 << (PhpParser.Case - 43)) | (1 << (PhpParser.Catch - 43)) | (1 << (PhpParser.Class - 43)) | (1 << (PhpParser.Clone - 43)) | (1 << (PhpParser.Const - 43)) | (1 << (PhpParser.Continue - 43)) | (1 << (PhpParser.Declare - 43)) | (1 << (PhpParser.Default - 43)) | (1 << (PhpParser.Do - 43)) | (1 << (PhpParser.DoubleCast - 43)) | (1 << (PhpParser.DoubleType - 43)) | (1 << (PhpParser.Echo - 43)) | (1 << (PhpParser.Else - 43)) | (1 << (PhpParser.ElseIf - 43)) | (1 << (PhpParser.Empty - 43)) | (1 << (PhpParser.Enum_ - 43)) | (1 << (PhpParser.EndDeclare - 43)) | (1 << (PhpParser.EndFor - 43)) | (1 << (PhpParser.EndForeach - 43)) | (1 << (PhpParser.EndIf - 43)) | (1 << (PhpParser.EndSwitch - 43)) | (1 << (PhpParser.EndWhile - 43)) | (1 << (PhpParser.Eval - 43)) | (1 << (PhpParser.Exit - 43)) | (1 << (PhpParser.Extends - 43)) | (1 << (PhpParser.Final - 43)) | (1 << (PhpParser.Finally - 43)) | (1 << (PhpParser.FloatCast - 43)) | (1 << (PhpParser.For - 43)) | (1 << (PhpParser.Foreach - 43)) | (1 << (PhpParser.Function_ - 43)) | (1 << (PhpParser.Global - 43)) | (1 << (PhpParser.Goto - 43)) | (1 << (PhpParser.If - 43)) | (1 << (PhpParser.Implements - 43)) | (1 << (PhpParser.Import - 43)) | (1 << (PhpParser.Include - 43)) | (1 << (PhpParser.IncludeOnce - 43)) | (1 << (PhpParser.InstanceOf - 43)) | (1 << (PhpParser.InsteadOf - 43)) | (1 << (PhpParser.Int8Cast - 43)) | (1 << (PhpParser.Int16Cast - 43)) | (1 << (PhpParser.Int64Type - 43)) | (1 << (PhpParser.IntType - 43)) | (1 << (PhpParser.Interface - 43)) | (1 << (PhpParser.IsSet - 43)) | (1 << (PhpParser.List - 43)) | (1 << (PhpParser.LogicalAnd - 43)) | (1 << (PhpParser.LogicalOr - 43)) | (1 << (PhpParser.LogicalXor - 43)) | (1 << (PhpParser.Match_ - 43)) | (1 << (PhpParser.Namespace - 43)) | (1 << (PhpParser.New - 43)) | (1 << (PhpParser.Null - 43)) | (1 << (PhpParser.ObjectType - 43)))) != 0) or ((((_la - 107)) & ~0x3f) == 0 and ((1 << (_la - 107)) & ((1 << (PhpParser.Parent_ - 107)) | (1 << (PhpParser.Partial - 107)) | (1 << (PhpParser.Print - 107)) | (1 << (PhpParser.Private - 107)) | (1 << (PhpParser.Protected - 107)) | (1 << (PhpParser.Public - 107)) | (1 << (PhpParser.Readonly - 107)) | (1 << (PhpParser.Require - 107)) | (1 << (PhpParser.RequireOnce - 107)) | (1 << (PhpParser.Resource - 107)) | (1 << (PhpParser.Return - 107)) | (1 << (PhpParser.Static - 107)) | (1 << (PhpParser.StringType - 107)) | (1 << (PhpParser.Switch - 107)) | (1 << (PhpParser.Throw - 107)) | (1 << (PhpParser.Trait - 107)) | (1 << (PhpParser.Try - 107)) | (1 << (PhpParser.Typeof - 107)) | (1 << (PhpParser.UintCast - 107)) | (1 << (PhpParser.UnicodeCast - 107)) | (1 << (PhpParser.Unset - 107)) | (1 << (PhpParser.Use - 107)) | (1 << (PhpParser.Var - 107)) | (1 << (PhpParser.While - 107)) | (1 << (PhpParser.Yield - 107)) | (1 << (PhpParser.From - 107)) | (1 << (PhpParser.LambdaFn - 107)) | (1 << (PhpParser.Ticks - 107)) | (1 << (PhpParser.Encoding - 107)) | (1 << (PhpParser.StrictTypes - 107)) | (1 << (PhpParser.Get - 107)) | (1 << (PhpParser.Set - 107)) | (1 << (PhpParser.Call - 107)) | (1 << (PhpParser.CallStatic - 107)) | (1 << (PhpParser.Constructor - 107)) | (1 << (PhpParser.Destruct - 107)) | (1 << (PhpParser.Wakeup - 107)) | (1 << (PhpParser.Sleep - 107)) | (1 << (PhpParser.Autoload - 107)) | (1 << (PhpParser.IsSet__ - 107)) | (1 << (PhpParser.Unset__ - 107)) | (1 << (PhpParser.ToString__ - 107)) | (1 << (PhpParser.Invoke - 107)) | (1 << (PhpParser.SetState - 107)) | (1 << (PhpParser.Clone__ - 107)) | (1 << (PhpParser.DebugInfo - 107)) | (1 << (PhpParser.Namespace__ - 107)) | (1 << (PhpParser.Class__ - 107)) | (1 << (PhpParser.Traic__ - 107)) | (1 << (PhpParser.Function__ - 107)) | (1 << (PhpParser.Method__ - 107)) | (1 << (PhpParser.Line__ - 107)) | (1 << (PhpParser.File__ - 107)) | (1 << (PhpParser.Dir__ - 107)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Ellipsis - 194)) | (1 << (PhpParser.Ampersand - 194)) | (1 << (PhpParser.QuestionMark - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)))) != 0):
                self.state = 903
                self.formalParameter()


            self.state = 910
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 906
                    self.match(PhpParser.Comma)
                    self.state = 907
                    self.formalParameter() 
                self.state = 912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Comma:
                self.state = 913
                self.match(PhpParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FormalParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableInitializer(self):
            return self.getTypedRuleContext(PhpParser.VariableInitializerContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def memberModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.MemberModifierContext)
            else:
                return self.getTypedRuleContext(PhpParser.MemberModifierContext,i)


        def QuestionMark(self):
            return self.getToken(PhpParser.QuestionMark, 0)

        def typeHint(self):
            return self.getTypedRuleContext(PhpParser.TypeHintContext,0)


        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def Ellipsis(self):
            return self.getToken(PhpParser.Ellipsis, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = PhpParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_formalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.AttributeStart:
                self.state = 916
                self.attributes()


            self.state = 922
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 919
                    self.memberModifier() 
                self.state = 924
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.QuestionMark:
                self.state = 925
                self.match(PhpParser.QuestionMark)


            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)))) != 0) or _la==PhpParser.NamespaceSeparator or _la==PhpParser.Label:
                self.state = 928
                self.typeHint(0)


            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Ampersand:
                self.state = 931
                self.match(PhpParser.Ampersand)


            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Ellipsis:
                self.state = 934
                self.match(PhpParser.Ellipsis)


            self.state = 937
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeHintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def Callable(self):
            return self.getToken(PhpParser.Callable, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(PhpParser.PrimitiveTypeContext,0)


        def typeHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TypeHintContext)
            else:
                return self.getTypedRuleContext(PhpParser.TypeHintContext,i)


        def Pipe(self):
            return self.getToken(PhpParser.Pipe, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_typeHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeHint" ):
                listener.enterTypeHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeHint" ):
                listener.exitTypeHint(self)



    def typeHint(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PhpParser.TypeHintContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_typeHint, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 940
                self.qualifiedStaticTypeRef()
                pass

            elif la_ == 2:
                self.state = 941
                self.match(PhpParser.Callable)
                pass

            elif la_ == 3:
                self.state = 942
                self.primitiveType()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 950
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PhpParser.TypeHintContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeHint)
                    self.state = 945
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 946
                    self.match(PhpParser.Pipe)
                    self.state = 947
                    self.typeHint(2) 
                self.state = 952
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class GlobalStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Global(self):
            return self.getToken(PhpParser.Global, 0)

        def globalVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.GlobalVarContext)
            else:
                return self.getTypedRuleContext(PhpParser.GlobalVarContext,i)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_globalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalStatement" ):
                listener.enterGlobalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalStatement" ):
                listener.exitGlobalStatement(self)




    def globalStatement(self):

        localctx = PhpParser.GlobalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_globalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(PhpParser.Global)
            self.state = 954
            self.globalVar()
            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 955
                self.match(PhpParser.Comma)
                self.state = 956
                self.globalVar()
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 962
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobalVarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def Dollar(self):
            return self.getToken(PhpParser.Dollar, 0)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_globalVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalVar" ):
                listener.enterGlobalVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalVar" ):
                listener.exitGlobalVar(self)




    def globalVar(self):

        localctx = PhpParser.GlobalVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_globalVar)
        try:
            self.state = 972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 964
                self.match(PhpParser.VarName)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 965
                self.match(PhpParser.Dollar)
                self.state = 966
                self.chain()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 967
                self.match(PhpParser.Dollar)
                self.state = 968
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 969
                self.expression(0)
                self.state = 970
                self.match(PhpParser.CloseCurlyBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EchoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Echo(self):
            return self.getToken(PhpParser.Echo, 0)

        def expressionList(self):
            return self.getTypedRuleContext(PhpParser.ExpressionListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_echoStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEchoStatement" ):
                listener.enterEchoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEchoStatement" ):
                listener.exitEchoStatement(self)




    def echoStatement(self):

        localctx = PhpParser.EchoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_echoStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(PhpParser.Echo)
            self.state = 975
            self.expressionList()
            self.state = 976
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StaticVariableStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(PhpParser.VariableInitializerContext,i)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_staticVariableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticVariableStatement" ):
                listener.enterStaticVariableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticVariableStatement" ):
                listener.exitStaticVariableStatement(self)




    def staticVariableStatement(self):

        localctx = PhpParser.StaticVariableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_staticVariableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.match(PhpParser.Static)
            self.state = 979
            self.variableInitializer()
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 980
                self.match(PhpParser.Comma)
                self.state = 981
                self.variableInitializer()
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 987
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyModifiers(self):
            return self.getTypedRuleContext(PhpParser.PropertyModifiersContext,0)


        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(PhpParser.VariableInitializerContext,i)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def Const(self):
            return self.getToken(PhpParser.Const, 0)

        def identifierInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.IdentifierInitializerContext)
            else:
                return self.getTypedRuleContext(PhpParser.IdentifierInitializerContext,i)


        def Function_(self):
            return self.getToken(PhpParser.Function_, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(PhpParser.FormalParameterListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def methodBody(self):
            return self.getTypedRuleContext(PhpParser.MethodBodyContext,0)


        def typeHint(self):
            return self.getTypedRuleContext(PhpParser.TypeHintContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def memberModifiers(self):
            return self.getTypedRuleContext(PhpParser.MemberModifiersContext,0)


        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def typeParameterListInBrackets(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterListInBracketsContext,0)


        def baseCtorCall(self):
            return self.getTypedRuleContext(PhpParser.BaseCtorCallContext,0)


        def returnTypeDecl(self):
            return self.getTypedRuleContext(PhpParser.ReturnTypeDeclContext,0)


        def Use(self):
            return self.getToken(PhpParser.Use, 0)

        def qualifiedNamespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameListContext,0)


        def traitAdaptations(self):
            return self.getTypedRuleContext(PhpParser.TraitAdaptationsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_classStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassStatement" ):
                listener.enterClassStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassStatement" ):
                listener.exitClassStatement(self)




    def classStatement(self):

        localctx = PhpParser.ClassStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_classStatement)
        self._la = 0 # Token type
        try:
            self.state = 1048
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.AttributeStart, PhpParser.Abstract, PhpParser.Const, PhpParser.Final, PhpParser.Function_, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Static, PhpParser.Var]:
                self.enterOuterAlt(localctx, 1)
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.AttributeStart:
                    self.state = 989
                    self.attributes()


                self.state = 1042
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 992
                    self.propertyModifiers()
                    self.state = 994
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)))) != 0) or _la==PhpParser.NamespaceSeparator or _la==PhpParser.Label:
                        self.state = 993
                        self.typeHint(0)


                    self.state = 996
                    self.variableInitializer()
                    self.state = 1001
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PhpParser.Comma:
                        self.state = 997
                        self.match(PhpParser.Comma)
                        self.state = 998
                        self.variableInitializer()
                        self.state = 1003
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1004
                    self.match(PhpParser.SemiColon)
                    pass

                elif la_ == 2:
                    self.state = 1007
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PhpParser.Abstract or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (PhpParser.Final - 77)) | (1 << (PhpParser.Private - 77)) | (1 << (PhpParser.Protected - 77)) | (1 << (PhpParser.Public - 77)) | (1 << (PhpParser.Readonly - 77)) | (1 << (PhpParser.Static - 77)))) != 0):
                        self.state = 1006
                        self.memberModifiers()


                    self.state = 1040
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PhpParser.Const]:
                        self.state = 1009
                        self.match(PhpParser.Const)
                        self.state = 1011
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                        if la_ == 1:
                            self.state = 1010
                            self.typeHint(0)


                        self.state = 1013
                        self.identifierInitializer()
                        self.state = 1018
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==PhpParser.Comma:
                            self.state = 1014
                            self.match(PhpParser.Comma)
                            self.state = 1015
                            self.identifierInitializer()
                            self.state = 1020
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1021
                        self.match(PhpParser.SemiColon)
                        pass
                    elif token in [PhpParser.Function_]:
                        self.state = 1023
                        self.match(PhpParser.Function_)
                        self.state = 1025
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PhpParser.Ampersand:
                            self.state = 1024
                            self.match(PhpParser.Ampersand)


                        self.state = 1027
                        self.identifier()
                        self.state = 1029
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PhpParser.Lgeneric:
                            self.state = 1028
                            self.typeParameterListInBrackets()


                        self.state = 1031
                        self.match(PhpParser.OpenRoundBracket)
                        self.state = 1032
                        self.formalParameterList()
                        self.state = 1033
                        self.match(PhpParser.CloseRoundBracket)
                        self.state = 1036
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                        if la_ == 1:
                            self.state = 1034
                            self.baseCtorCall()

                        elif la_ == 2:
                            self.state = 1035
                            self.returnTypeDecl()


                        self.state = 1038
                        self.methodBody()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                pass
            elif token in [PhpParser.Use]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1044
                self.match(PhpParser.Use)
                self.state = 1045
                self.qualifiedNamespaceNameList()
                self.state = 1046
                self.traitAdaptations()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TraitAdaptationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def traitAdaptationStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.TraitAdaptationStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.TraitAdaptationStatementContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_traitAdaptations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitAdaptations" ):
                listener.enterTraitAdaptations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitAdaptations" ):
                listener.exitTraitAdaptations(self)




    def traitAdaptations(self):

        localctx = PhpParser.TraitAdaptationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_traitAdaptations)
        self._la = 0 # Token type
        try:
            self.state = 1059
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.SemiColon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1050
                self.match(PhpParser.SemiColon)
                pass
            elif token in [PhpParser.OpenCurlyBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1051
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)))) != 0) or _la==PhpParser.NamespaceSeparator or _la==PhpParser.Label:
                    self.state = 1052
                    self.traitAdaptationStatement()
                    self.state = 1057
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1058
                self.match(PhpParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TraitAdaptationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traitPrecedence(self):
            return self.getTypedRuleContext(PhpParser.TraitPrecedenceContext,0)


        def traitAlias(self):
            return self.getTypedRuleContext(PhpParser.TraitAliasContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_traitAdaptationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitAdaptationStatement" ):
                listener.enterTraitAdaptationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitAdaptationStatement" ):
                listener.exitTraitAdaptationStatement(self)




    def traitAdaptationStatement(self):

        localctx = PhpParser.TraitAdaptationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_traitAdaptationStatement)
        try:
            self.state = 1063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1061
                self.traitPrecedence()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1062
                self.traitAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TraitPrecedenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def DoubleColon(self):
            return self.getToken(PhpParser.DoubleColon, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def InsteadOf(self):
            return self.getToken(PhpParser.InsteadOf, 0)

        def qualifiedNamespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameListContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_traitPrecedence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitPrecedence" ):
                listener.enterTraitPrecedence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitPrecedence" ):
                listener.exitTraitPrecedence(self)




    def traitPrecedence(self):

        localctx = PhpParser.TraitPrecedenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_traitPrecedence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.qualifiedNamespaceName()
            self.state = 1066
            self.match(PhpParser.DoubleColon)
            self.state = 1067
            self.identifier()
            self.state = 1068
            self.match(PhpParser.InsteadOf)
            self.state = 1069
            self.qualifiedNamespaceNameList()
            self.state = 1070
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TraitAliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def traitMethodReference(self):
            return self.getTypedRuleContext(PhpParser.TraitMethodReferenceContext,0)


        def As(self):
            return self.getToken(PhpParser.As, 0)

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def memberModifier(self):
            return self.getTypedRuleContext(PhpParser.MemberModifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_traitAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitAlias" ):
                listener.enterTraitAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitAlias" ):
                listener.exitTraitAlias(self)




    def traitAlias(self):

        localctx = PhpParser.TraitAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_traitAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.traitMethodReference()
            self.state = 1073
            self.match(PhpParser.As)
            self.state = 1079
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1074
                self.memberModifier()
                pass

            elif la_ == 2:
                self.state = 1076
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1075
                    self.memberModifier()


                self.state = 1078
                self.identifier()
                pass


            self.state = 1081
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TraitMethodReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def DoubleColon(self):
            return self.getToken(PhpParser.DoubleColon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_traitMethodReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTraitMethodReference" ):
                listener.enterTraitMethodReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTraitMethodReference" ):
                listener.exitTraitMethodReference(self)




    def traitMethodReference(self):

        localctx = PhpParser.TraitMethodReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_traitMethodReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 1083
                self.qualifiedNamespaceName()
                self.state = 1084
                self.match(PhpParser.DoubleColon)


            self.state = 1088
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BaseCtorCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(PhpParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_baseCtorCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseCtorCall" ):
                listener.enterBaseCtorCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseCtorCall" ):
                listener.exitBaseCtorCall(self)




    def baseCtorCall(self):

        localctx = PhpParser.BaseCtorCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_baseCtorCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self.match(PhpParser.Colon)
            self.state = 1091
            self.identifier()
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.OpenRoundBracket:
                self.state = 1092
                self.arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnTypeDeclContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def typeHint(self):
            return self.getTypedRuleContext(PhpParser.TypeHintContext,0)


        def QuestionMark(self):
            return self.getToken(PhpParser.QuestionMark, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_returnTypeDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnTypeDecl" ):
                listener.enterReturnTypeDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnTypeDecl" ):
                listener.exitReturnTypeDecl(self)




    def returnTypeDecl(self):

        localctx = PhpParser.ReturnTypeDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_returnTypeDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(PhpParser.Colon)
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.QuestionMark:
                self.state = 1096
                self.match(PhpParser.QuestionMark)


            self.state = 1099
            self.typeHint(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MethodBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = PhpParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_methodBody)
        try:
            self.state = 1103
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.SemiColon]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1101
                self.match(PhpParser.SemiColon)
                pass
            elif token in [PhpParser.OpenCurlyBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1102
                self.blockStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberModifiers(self):
            return self.getTypedRuleContext(PhpParser.MemberModifiersContext,0)


        def Var(self):
            return self.getToken(PhpParser.Var, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_propertyModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyModifiers" ):
                listener.enterPropertyModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyModifiers" ):
                listener.exitPropertyModifiers(self)




    def propertyModifiers(self):

        localctx = PhpParser.PropertyModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_propertyModifiers)
        try:
            self.state = 1107
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Abstract, PhpParser.Final, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Static]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1105
                self.memberModifiers()
                pass
            elif token in [PhpParser.Var]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1106
                self.match(PhpParser.Var)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.MemberModifierContext)
            else:
                return self.getTypedRuleContext(PhpParser.MemberModifierContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_memberModifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberModifiers" ):
                listener.enterMemberModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberModifiers" ):
                listener.exitMemberModifiers(self)




    def memberModifiers(self):

        localctx = PhpParser.MemberModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_memberModifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1109
                    self.memberModifier()

                else:
                    raise NoViableAltException(self)
                self.state = 1112 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def constantInitializer(self):
            return self.getTypedRuleContext(PhpParser.ConstantInitializerContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)




    def variableInitializer(self):

        localctx = PhpParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_variableInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.match(PhpParser.VarName)
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Eq:
                self.state = 1115
                self.match(PhpParser.Eq)
                self.state = 1116
                self.constantInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def constantInitializer(self):
            return self.getTypedRuleContext(PhpParser.ConstantInitializerContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_identifierInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierInitializer" ):
                listener.enterIdentifierInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierInitializer" ):
                listener.exitIdentifierInitializer(self)




    def identifierInitializer(self):

        localctx = PhpParser.IdentifierInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_identifierInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.identifier()
            self.state = 1120
            self.match(PhpParser.Eq)
            self.state = 1121
            self.constantInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobalConstantDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(PhpParser.Const, 0)

        def identifierInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.IdentifierInitializerContext)
            else:
                return self.getTypedRuleContext(PhpParser.IdentifierInitializerContext,i)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_globalConstantDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalConstantDeclaration" ):
                listener.enterGlobalConstantDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalConstantDeclaration" ):
                listener.exitGlobalConstantDeclaration(self)




    def globalConstantDeclaration(self):

        localctx = PhpParser.GlobalConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_globalConstantDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.AttributeStart:
                self.state = 1123
                self.attributes()


            self.state = 1126
            self.match(PhpParser.Const)
            self.state = 1127
            self.identifierInitializer()
            self.state = 1132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 1128
                self.match(PhpParser.Comma)
                self.state = 1129
                self.identifierInitializer()
                self.state = 1134
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1135
            self.match(PhpParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum_(self):
            return self.getToken(PhpParser.Enum_, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def Implements(self):
            return self.getToken(PhpParser.Implements, 0)

        def interfaceList(self):
            return self.getTypedRuleContext(PhpParser.InterfaceListContext,0)


        def enumItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.EnumItemContext)
            else:
                return self.getTypedRuleContext(PhpParser.EnumItemContext,i)


        def IntType(self):
            return self.getToken(PhpParser.IntType, 0)

        def StringType(self):
            return self.getToken(PhpParser.StringType, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = PhpParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(PhpParser.Enum_)
            self.state = 1138
            self.identifier()
            self.state = 1141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Colon:
                self.state = 1139
                self.match(PhpParser.Colon)
                self.state = 1140
                _la = self._input.LA(1)
                if not(_la==PhpParser.IntType or _la==PhpParser.StringType):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Implements:
                self.state = 1143
                self.match(PhpParser.Implements)
                self.state = 1144
                self.interfaceList()


            self.state = 1147
            self.match(PhpParser.OpenCurlyBracket)
            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PhpParser.AttributeStart) | (1 << PhpParser.Abstract) | (1 << PhpParser.Case))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (PhpParser.Final - 77)) | (1 << (PhpParser.Function_ - 77)) | (1 << (PhpParser.Private - 77)) | (1 << (PhpParser.Protected - 77)) | (1 << (PhpParser.Public - 77)) | (1 << (PhpParser.Readonly - 77)) | (1 << (PhpParser.Static - 77)) | (1 << (PhpParser.Use - 77)))) != 0):
                self.state = 1148
                self.enumItem()
                self.state = 1153
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1154
            self.match(PhpParser.CloseCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(PhpParser.Case, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def SemiColon(self):
            return self.getToken(PhpParser.SemiColon, 0)

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(PhpParser.FunctionDeclarationContext,0)


        def memberModifiers(self):
            return self.getTypedRuleContext(PhpParser.MemberModifiersContext,0)


        def Use(self):
            return self.getToken(PhpParser.Use, 0)

        def qualifiedNamespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameListContext,0)


        def traitAdaptations(self):
            return self.getTypedRuleContext(PhpParser.TraitAdaptationsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_enumItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumItem" ):
                listener.enterEnumItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumItem" ):
                listener.exitEnumItem(self)




    def enumItem(self):

        localctx = PhpParser.EnumItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_enumItem)
        self._la = 0 # Token type
        try:
            self.state = 1172
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Case]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1156
                self.match(PhpParser.Case)
                self.state = 1157
                self.identifier()
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Eq:
                    self.state = 1158
                    self.match(PhpParser.Eq)
                    self.state = 1159
                    self.expression(0)


                self.state = 1162
                self.match(PhpParser.SemiColon)
                pass
            elif token in [PhpParser.AttributeStart, PhpParser.Abstract, PhpParser.Final, PhpParser.Function_, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Static]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Abstract or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (PhpParser.Final - 77)) | (1 << (PhpParser.Private - 77)) | (1 << (PhpParser.Protected - 77)) | (1 << (PhpParser.Public - 77)) | (1 << (PhpParser.Readonly - 77)) | (1 << (PhpParser.Static - 77)))) != 0):
                    self.state = 1164
                    self.memberModifiers()


                self.state = 1167
                self.functionDeclaration()
                pass
            elif token in [PhpParser.Use]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1168
                self.match(PhpParser.Use)
                self.state = 1169
                self.qualifiedNamespaceNameList()
                self.state = 1170
                self.traitAdaptations()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = PhpParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.expression(0)
            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 1175
                self.match(PhpParser.Comma)
                self.state = 1176
                self.expression(0)
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParenthesesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def yieldExpression(self):
            return self.getTypedRuleContext(PhpParser.YieldExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_parentheses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParentheses" ):
                listener.enterParentheses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParentheses" ):
                listener.exitParentheses(self)




    def parentheses(self):

        localctx = PhpParser.ParenthesesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_parentheses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.match(PhpParser.OpenRoundBracket)
            self.state = 1185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1183
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1184
                self.yieldExpression()
                pass


            self.state = 1187
            self.match(PhpParser.CloseRoundBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PhpParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ChainExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainExpression" ):
                listener.enterChainExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainExpression" ):
                listener.exitChainExpression(self)


    class SpecialWordExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Yield(self):
            return self.getToken(PhpParser.Yield, 0)
        def List(self):
            return self.getToken(PhpParser.List, 0)
        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)
        def assignmentList(self):
            return self.getTypedRuleContext(PhpParser.AssignmentListContext,0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)
        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def IsSet(self):
            return self.getToken(PhpParser.IsSet, 0)
        def chainList(self):
            return self.getTypedRuleContext(PhpParser.ChainListContext,0)

        def Empty(self):
            return self.getToken(PhpParser.Empty, 0)
        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)

        def Eval(self):
            return self.getToken(PhpParser.Eval, 0)
        def Exit(self):
            return self.getToken(PhpParser.Exit, 0)
        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)

        def Include(self):
            return self.getToken(PhpParser.Include, 0)
        def IncludeOnce(self):
            return self.getToken(PhpParser.IncludeOnce, 0)
        def Require(self):
            return self.getToken(PhpParser.Require, 0)
        def RequireOnce(self):
            return self.getToken(PhpParser.RequireOnce, 0)
        def Throw(self):
            return self.getToken(PhpParser.Throw, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialWordExpression" ):
                listener.enterSpecialWordExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialWordExpression" ):
                listener.exitSpecialWordExpression(self)


    class ArrayCreationExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrayCreation(self):
            return self.getTypedRuleContext(PhpParser.ArrayCreationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreationExpression" ):
                listener.enterArrayCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreationExpression" ):
                listener.exitArrayCreationExpression(self)


    class BackQuoteStringExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BackQuoteString(self):
            return self.getToken(PhpParser.BackQuoteString, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuoteStringExpression" ):
                listener.enterBackQuoteStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuoteStringExpression" ):
                listener.exitBackQuoteStringExpression(self)


    class MatchExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def matchExpr(self):
            return self.getTypedRuleContext(PhpParser.MatchExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchExpression" ):
                listener.enterMatchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchExpression" ):
                listener.exitMatchExpression(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def LogicalAnd(self):
            return self.getToken(PhpParser.LogicalAnd, 0)
        def LogicalXor(self):
            return self.getToken(PhpParser.LogicalXor, 0)
        def LogicalOr(self):
            return self.getToken(PhpParser.LogicalOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)


    class PrintExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Print(self):
            return self.getToken(PhpParser.Print, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintExpression" ):
                listener.enterPrintExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintExpression" ):
                listener.exitPrintExpression(self)


    class AssignmentExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def assignable(self):
            return self.getTypedRuleContext(PhpParser.AssignableContext,0)

        def assignmentOperator(self):
            return self.getTypedRuleContext(PhpParser.AssignmentOperatorContext,0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)
        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)
        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)

        def newExpr(self):
            return self.getTypedRuleContext(PhpParser.NewExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)


    class PostfixIncDecExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)

        def Inc(self):
            return self.getToken(PhpParser.Inc, 0)
        def Dec(self):
            return self.getToken(PhpParser.Dec, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixIncDecExpression" ):
                listener.enterPostfixIncDecExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixIncDecExpression" ):
                listener.exitPostfixIncDecExpression(self)


    class CloneExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Clone(self):
            return self.getToken(PhpParser.Clone, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloneExpression" ):
                listener.enterCloneExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloneExpression" ):
                listener.exitCloneExpression(self)


    class UnaryOperatorExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def Tilde(self):
            return self.getToken(PhpParser.Tilde, 0)
        def SuppressWarnings(self):
            return self.getToken(PhpParser.SuppressWarnings, 0)
        def Bang(self):
            return self.getToken(PhpParser.Bang, 0)
        def Plus(self):
            return self.getToken(PhpParser.Plus, 0)
        def Minus(self):
            return self.getToken(PhpParser.Minus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperatorExpression" ):
                listener.enterUnaryOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperatorExpression" ):
                listener.exitUnaryOperatorExpression(self)


    class NewExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def newExpr(self):
            return self.getTypedRuleContext(PhpParser.NewExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)


    class ParenthesisExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisExpression" ):
                listener.enterParenthesisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisExpression" ):
                listener.exitParenthesisExpression(self)


    class SpaceshipExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Spaceship(self):
            return self.getToken(PhpParser.Spaceship, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpaceshipExpression" ):
                listener.enterSpaceshipExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpaceshipExpression" ):
                listener.exitSpaceshipExpression(self)


    class ConditionalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)
        def QuestionMark(self):
            return self.getToken(PhpParser.QuestionMark, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)


    class NullCoalescingExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def NullCoalescing(self):
            return self.getToken(PhpParser.NullCoalescing, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullCoalescingExpression" ):
                listener.enterNullCoalescingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullCoalescingExpression" ):
                listener.exitNullCoalescingExpression(self)


    class ArithmeticExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Pow(self):
            return self.getToken(PhpParser.Pow, 0)
        def Asterisk(self):
            return self.getToken(PhpParser.Asterisk, 0)
        def Divide(self):
            return self.getToken(PhpParser.Divide, 0)
        def Percent(self):
            return self.getToken(PhpParser.Percent, 0)
        def Plus(self):
            return self.getToken(PhpParser.Plus, 0)
        def Minus(self):
            return self.getToken(PhpParser.Minus, 0)
        def Dot(self):
            return self.getToken(PhpParser.Dot, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticExpression" ):
                listener.enterArithmeticExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticExpression" ):
                listener.exitArithmeticExpression(self)


    class IndexerExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringConstant(self):
            return self.getTypedRuleContext(PhpParser.StringConstantContext,0)

        def OpenSquareBracket(self):
            return self.getToken(PhpParser.OpenSquareBracket, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def CloseSquareBracket(self):
            return self.getToken(PhpParser.CloseSquareBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexerExpression" ):
                listener.enterIndexerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexerExpression" ):
                listener.exitIndexerExpression(self)


    class ScalarExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(PhpParser.ConstantContext,0)

        def string(self):
            return self.getTypedRuleContext(PhpParser.StringContext,0)

        def Label(self):
            return self.getToken(PhpParser.Label, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarExpression" ):
                listener.enterScalarExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarExpression" ):
                listener.exitScalarExpression(self)


    class PrefixIncDecExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)

        def Inc(self):
            return self.getToken(PhpParser.Inc, 0)
        def Dec(self):
            return self.getToken(PhpParser.Dec, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixIncDecExpression" ):
                listener.enterPrefixIncDecExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixIncDecExpression" ):
                listener.exitPrefixIncDecExpression(self)


    class ComparisonExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def ShiftLeft(self):
            return self.getToken(PhpParser.ShiftLeft, 0)
        def ShiftRight(self):
            return self.getToken(PhpParser.ShiftRight, 0)
        def Less(self):
            return self.getToken(PhpParser.Less, 0)
        def IsSmallerOrEqual(self):
            return self.getToken(PhpParser.IsSmallerOrEqual, 0)
        def Greater(self):
            return self.getToken(PhpParser.Greater, 0)
        def IsGreaterOrEqual(self):
            return self.getToken(PhpParser.IsGreaterOrEqual, 0)
        def IsIdentical(self):
            return self.getToken(PhpParser.IsIdentical, 0)
        def IsNoidentical(self):
            return self.getToken(PhpParser.IsNoidentical, 0)
        def IsEqual(self):
            return self.getToken(PhpParser.IsEqual, 0)
        def IsNotEq(self):
            return self.getToken(PhpParser.IsNotEq, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpression" ):
                listener.enterComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpression" ):
                listener.exitComparisonExpression(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)
        def castOperation(self):
            return self.getTypedRuleContext(PhpParser.CastOperationContext,0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)


    class InstanceOfExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)

        def InstanceOf(self):
            return self.getToken(PhpParser.InstanceOf, 0)
        def typeRef(self):
            return self.getTypedRuleContext(PhpParser.TypeRefContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceOfExpression" ):
                listener.enterInstanceOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceOfExpression" ):
                listener.exitInstanceOfExpression(self)


    class ArrayDestructExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrayDestructuring(self):
            return self.getTypedRuleContext(PhpParser.ArrayDestructuringContext,0)

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)
        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDestructExpression" ):
                listener.enterArrayDestructExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDestructExpression" ):
                listener.exitArrayDestructExpression(self)


    class LambdaFunctionExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lambdaFunctionExpr(self):
            return self.getTypedRuleContext(PhpParser.LambdaFunctionExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionExpression" ):
                listener.enterLambdaFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionExpression" ):
                listener.exitLambdaFunctionExpression(self)


    class BitwiseExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PhpParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)
        def Caret(self):
            return self.getToken(PhpParser.Caret, 0)
        def Pipe(self):
            return self.getToken(PhpParser.Pipe, 0)
        def BooleanAnd(self):
            return self.getToken(PhpParser.BooleanAnd, 0)
        def BooleanOr(self):
            return self.getToken(PhpParser.BooleanOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseExpression" ):
                listener.enterBitwiseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseExpression" ):
                listener.exitBitwiseExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PhpParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 164
        self.enterRecursionRule(localctx, 164, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                localctx = PhpParser.CloneExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1190
                self.match(PhpParser.Clone)
                self.state = 1191
                self.expression(48)
                pass

            elif la_ == 2:
                localctx = PhpParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1192
                self.newExpr()
                pass

            elif la_ == 3:
                localctx = PhpParser.IndexerExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1193
                self.stringConstant()
                self.state = 1194
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1195
                self.expression(0)
                self.state = 1196
                self.match(PhpParser.CloseSquareBracket)
                pass

            elif la_ == 4:
                localctx = PhpParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1198
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1199
                self.castOperation()
                self.state = 1200
                self.match(PhpParser.CloseRoundBracket)
                self.state = 1201
                self.expression(45)
                pass

            elif la_ == 5:
                localctx = PhpParser.UnaryOperatorExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1203
                _la = self._input.LA(1)
                if not(_la==PhpParser.Tilde or _la==PhpParser.SuppressWarnings):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1204
                self.expression(44)
                pass

            elif la_ == 6:
                localctx = PhpParser.UnaryOperatorExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1205
                _la = self._input.LA(1)
                if not(((((_la - 200)) & ~0x3f) == 0 and ((1 << (_la - 200)) & ((1 << (PhpParser.Bang - 200)) | (1 << (PhpParser.Plus - 200)) | (1 << (PhpParser.Minus - 200)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1206
                self.expression(43)
                pass

            elif la_ == 7:
                localctx = PhpParser.PrefixIncDecExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1207
                _la = self._input.LA(1)
                if not(_la==PhpParser.Inc or _la==PhpParser.Dec):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1208
                self.chain()
                pass

            elif la_ == 8:
                localctx = PhpParser.PostfixIncDecExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1209
                self.chain()
                self.state = 1210
                _la = self._input.LA(1)
                if not(_la==PhpParser.Inc or _la==PhpParser.Dec):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                localctx = PhpParser.PrintExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1212
                self.match(PhpParser.Print)
                self.state = 1213
                self.expression(40)
                pass

            elif la_ == 10:
                localctx = PhpParser.ArrayCreationExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1214
                self.arrayCreation()
                pass

            elif la_ == 11:
                localctx = PhpParser.ChainExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1215
                self.chain()
                pass

            elif la_ == 12:
                localctx = PhpParser.ScalarExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1216
                self.constant()
                pass

            elif la_ == 13:
                localctx = PhpParser.ScalarExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1217
                self.string()
                pass

            elif la_ == 14:
                localctx = PhpParser.ScalarExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1218
                self.match(PhpParser.Label)
                pass

            elif la_ == 15:
                localctx = PhpParser.BackQuoteStringExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1219
                self.match(PhpParser.BackQuoteString)
                pass

            elif la_ == 16:
                localctx = PhpParser.ParenthesisExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1220
                self.parentheses()
                pass

            elif la_ == 17:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1221
                self.match(PhpParser.Yield)
                pass

            elif la_ == 18:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1222
                self.match(PhpParser.List)
                self.state = 1223
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1224
                self.assignmentList()
                self.state = 1225
                self.match(PhpParser.CloseRoundBracket)
                self.state = 1226
                self.match(PhpParser.Eq)
                self.state = 1227
                self.expression(31)
                pass

            elif la_ == 19:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1229
                self.match(PhpParser.IsSet)
                self.state = 1230
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1231
                self.chainList()
                self.state = 1232
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 20:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1234
                self.match(PhpParser.Empty)
                self.state = 1235
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1236
                self.chain()
                self.state = 1237
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 21:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1239
                self.match(PhpParser.Eval)
                self.state = 1240
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1241
                self.expression(0)
                self.state = 1242
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 22:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1244
                self.match(PhpParser.Exit)
                self.state = 1248
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1245
                    self.match(PhpParser.OpenRoundBracket)
                    self.state = 1246
                    self.match(PhpParser.CloseRoundBracket)

                elif la_ == 2:
                    self.state = 1247
                    self.parentheses()


                pass

            elif la_ == 23:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1250
                _la = self._input.LA(1)
                if not(_la==PhpParser.Include or _la==PhpParser.IncludeOnce):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1251
                self.expression(26)
                pass

            elif la_ == 24:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1252
                _la = self._input.LA(1)
                if not(_la==PhpParser.Require or _la==PhpParser.RequireOnce):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1253
                self.expression(25)
                pass

            elif la_ == 25:
                localctx = PhpParser.LambdaFunctionExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1254
                self.lambdaFunctionExpr()
                pass

            elif la_ == 26:
                localctx = PhpParser.MatchExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1255
                self.matchExpr()
                pass

            elif la_ == 27:
                localctx = PhpParser.SpecialWordExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1256
                self.match(PhpParser.Throw)
                self.state = 1257
                self.expression(7)
                pass

            elif la_ == 28:
                localctx = PhpParser.ArrayDestructExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1258
                self.arrayDestructuring()
                self.state = 1259
                self.match(PhpParser.Eq)
                self.state = 1260
                self.expression(6)
                pass

            elif la_ == 29:
                localctx = PhpParser.AssignmentExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1262
                self.assignable()
                self.state = 1263
                self.assignmentOperator()
                self.state = 1265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.AttributeStart:
                    self.state = 1264
                    self.attributes()


                self.state = 1267
                self.expression(5)
                pass

            elif la_ == 30:
                localctx = PhpParser.AssignmentExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1269
                self.assignable()
                self.state = 1270
                self.match(PhpParser.Eq)
                self.state = 1272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.AttributeStart:
                    self.state = 1271
                    self.attributes()


                self.state = 1274
                self.match(PhpParser.Ampersand)
                self.state = 1277
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1275
                    self.chain()
                    pass

                elif la_ == 2:
                    self.state = 1276
                    self.newExpr()
                    pass


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1341
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1339
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                    if la_ == 1:
                        localctx = PhpParser.ArithmeticExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1281
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1282
                        localctx.op = self.match(PhpParser.Pow)
                        self.state = 1283
                        self.expression(22)
                        pass

                    elif la_ == 2:
                        localctx = PhpParser.ArithmeticExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1284
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 1285
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & ((1 << (PhpParser.Asterisk - 204)) | (1 << (PhpParser.Percent - 204)) | (1 << (PhpParser.Divide - 204)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1286
                        self.expression(21)
                        pass

                    elif la_ == 3:
                        localctx = PhpParser.ArithmeticExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1287
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 1288
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (PhpParser.Plus - 202)) | (1 << (PhpParser.Minus - 202)) | (1 << (PhpParser.Dot - 202)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1289
                        self.expression(20)
                        pass

                    elif la_ == 4:
                        localctx = PhpParser.ComparisonExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1290
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1291
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==PhpParser.ShiftLeft or _la==PhpParser.ShiftRight):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1292
                        self.expression(19)
                        pass

                    elif la_ == 5:
                        localctx = PhpParser.ComparisonExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1293
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 1294
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 171)) & ~0x3f) == 0 and ((1 << (_la - 171)) & ((1 << (PhpParser.IsSmallerOrEqual - 171)) | (1 << (PhpParser.IsGreaterOrEqual - 171)) | (1 << (PhpParser.Less - 171)) | (1 << (PhpParser.Greater - 171)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1295
                        self.expression(18)
                        pass

                    elif la_ == 6:
                        localctx = PhpParser.ComparisonExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1296
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 1297
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 167)) & ~0x3f) == 0 and ((1 << (_la - 167)) & ((1 << (PhpParser.IsIdentical - 167)) | (1 << (PhpParser.IsNoidentical - 167)) | (1 << (PhpParser.IsEqual - 167)) | (1 << (PhpParser.IsNotEq - 167)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1298
                        self.expression(17)
                        pass

                    elif la_ == 7:
                        localctx = PhpParser.BitwiseExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1299
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 1300
                        localctx.op = self.match(PhpParser.Ampersand)
                        self.state = 1301
                        self.expression(16)
                        pass

                    elif la_ == 8:
                        localctx = PhpParser.BitwiseExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1302
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1303
                        localctx.op = self.match(PhpParser.Caret)
                        self.state = 1304
                        self.expression(15)
                        pass

                    elif la_ == 9:
                        localctx = PhpParser.BitwiseExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1305
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1306
                        localctx.op = self.match(PhpParser.Pipe)
                        self.state = 1307
                        self.expression(14)
                        pass

                    elif la_ == 10:
                        localctx = PhpParser.BitwiseExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1308
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1309
                        localctx.op = self.match(PhpParser.BooleanAnd)
                        self.state = 1310
                        self.expression(13)
                        pass

                    elif la_ == 11:
                        localctx = PhpParser.BitwiseExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1311
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1312
                        localctx.op = self.match(PhpParser.BooleanOr)
                        self.state = 1313
                        self.expression(12)
                        pass

                    elif la_ == 12:
                        localctx = PhpParser.ConditionalExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1314
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1315
                        localctx.op = self.match(PhpParser.QuestionMark)
                        self.state = 1317
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                            self.state = 1316
                            self.expression(0)


                        self.state = 1319
                        self.match(PhpParser.Colon)
                        self.state = 1320
                        self.expression(11)
                        pass

                    elif la_ == 13:
                        localctx = PhpParser.NullCoalescingExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1321
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1322
                        localctx.op = self.match(PhpParser.NullCoalescing)
                        self.state = 1323
                        self.expression(10)
                        pass

                    elif la_ == 14:
                        localctx = PhpParser.SpaceshipExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1324
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1325
                        localctx.op = self.match(PhpParser.Spaceship)
                        self.state = 1326
                        self.expression(9)
                        pass

                    elif la_ == 15:
                        localctx = PhpParser.LogicalExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1327
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1328
                        localctx.op = self.match(PhpParser.LogicalAnd)
                        self.state = 1329
                        self.expression(4)
                        pass

                    elif la_ == 16:
                        localctx = PhpParser.LogicalExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1330
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1331
                        localctx.op = self.match(PhpParser.LogicalXor)
                        self.state = 1332
                        self.expression(3)
                        pass

                    elif la_ == 17:
                        localctx = PhpParser.LogicalExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1333
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1334
                        localctx.op = self.match(PhpParser.LogicalOr)
                        self.state = 1335
                        self.expression(2)
                        pass

                    elif la_ == 18:
                        localctx = PhpParser.InstanceOfExpressionContext(self, PhpParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1336
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 1337
                        self.match(PhpParser.InstanceOf)
                        self.state = 1338
                        self.typeRef()
                        pass

             
                self.state = 1343
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AssignableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def arrayCreation(self):
            return self.getTypedRuleContext(PhpParser.ArrayCreationContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_assignable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignable" ):
                listener.enterAssignable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignable" ):
                listener.exitAssignable(self)




    def assignable(self):

        localctx = PhpParser.AssignableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_assignable)
        try:
            self.state = 1346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1344
                self.chain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1345
                self.arrayCreation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayCreationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Array(self):
            return self.getToken(PhpParser.Array, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def OpenSquareBracket(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.OpenSquareBracket)
            else:
                return self.getToken(PhpParser.OpenSquareBracket, i)

        def CloseSquareBracket(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.CloseSquareBracket)
            else:
                return self.getToken(PhpParser.CloseSquareBracket, i)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def arrayItemList(self):
            return self.getTypedRuleContext(PhpParser.ArrayItemListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_arrayCreation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreation" ):
                listener.enterArrayCreation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreation" ):
                listener.exitArrayCreation(self)




    def arrayCreation(self):

        localctx = PhpParser.ArrayCreationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_arrayCreation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Array]:
                self.state = 1348
                self.match(PhpParser.Array)
                self.state = 1349
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Ampersand - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                    self.state = 1350
                    self.arrayItemList()


                self.state = 1353
                self.match(PhpParser.CloseRoundBracket)
                pass
            elif token in [PhpParser.OpenSquareBracket]:
                self.state = 1354
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Ampersand - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                    self.state = 1355
                    self.arrayItemList()


                self.state = 1358
                self.match(PhpParser.CloseSquareBracket)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1365
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1361
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1362
                self.expression(0)
                self.state = 1363
                self.match(PhpParser.CloseSquareBracket)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayDestructuringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenSquareBracket(self):
            return self.getToken(PhpParser.OpenSquareBracket, 0)

        def indexedDestructItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.IndexedDestructItemContext)
            else:
                return self.getTypedRuleContext(PhpParser.IndexedDestructItemContext,i)


        def CloseSquareBracket(self):
            return self.getToken(PhpParser.CloseSquareBracket, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def keyedDestructItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.KeyedDestructItemContext)
            else:
                return self.getTypedRuleContext(PhpParser.KeyedDestructItemContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_arrayDestructuring

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDestructuring" ):
                listener.enterArrayDestructuring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDestructuring" ):
                listener.exitArrayDestructuring(self)




    def arrayDestructuring(self):

        localctx = PhpParser.ArrayDestructuringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_arrayDestructuring)
        self._la = 0 # Token type
        try:
            self.state = 1412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1367
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.Comma:
                    self.state = 1368
                    self.match(PhpParser.Comma)
                    self.state = 1373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1374
                self.indexedDestructItem()
                self.state = 1383
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1376 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1375
                            self.match(PhpParser.Comma)
                            self.state = 1378 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==PhpParser.Comma):
                                break

                        self.state = 1380
                        self.indexedDestructItem() 
                    self.state = 1385
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                self.state = 1389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.Comma:
                    self.state = 1386
                    self.match(PhpParser.Comma)
                    self.state = 1391
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1392
                self.match(PhpParser.CloseSquareBracket)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1394
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1395
                self.keyedDestructItem()
                self.state = 1404
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1397 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 1396
                            self.match(PhpParser.Comma)
                            self.state = 1399 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==PhpParser.Comma):
                                break

                        self.state = 1401
                        self.keyedDestructItem() 
                    self.state = 1406
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

                self.state = 1408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Comma:
                    self.state = 1407
                    self.match(PhpParser.Comma)


                self.state = 1410
                self.match(PhpParser.CloseSquareBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexedDestructItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_indexedDestructItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexedDestructItem" ):
                listener.enterIndexedDestructItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexedDestructItem" ):
                listener.exitIndexedDestructItem(self)




    def indexedDestructItem(self):

        localctx = PhpParser.IndexedDestructItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_indexedDestructItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Ampersand:
                self.state = 1414
                self.match(PhpParser.Ampersand)


            self.state = 1417
            self.chain()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeyedDestructItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_keyedDestructItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedDestructItem" ):
                listener.enterKeyedDestructItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedDestructItem" ):
                listener.exitKeyedDestructItem(self)




    def keyedDestructItem(self):

        localctx = PhpParser.KeyedDestructItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_keyedDestructItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1419
                self.expression(0)
                self.state = 1420
                self.match(PhpParser.DoubleArrow)


            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Ampersand:
                self.state = 1424
                self.match(PhpParser.Ampersand)


            self.state = 1427
            self.chain()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaFunctionExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Function_(self):
            return self.getToken(PhpParser.Function_, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(PhpParser.FormalParameterListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def blockStatement(self):
            return self.getTypedRuleContext(PhpParser.BlockStatementContext,0)


        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def lambdaFunctionUseVars(self):
            return self.getTypedRuleContext(PhpParser.LambdaFunctionUseVarsContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def typeHint(self):
            return self.getTypedRuleContext(PhpParser.TypeHintContext,0)


        def LambdaFn(self):
            return self.getToken(PhpParser.LambdaFn, 0)

        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_lambdaFunctionExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionExpr" ):
                listener.enterLambdaFunctionExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionExpr" ):
                listener.exitLambdaFunctionExpr(self)




    def lambdaFunctionExpr(self):

        localctx = PhpParser.LambdaFunctionExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_lambdaFunctionExpr)
        self._la = 0 # Token type
        try:
            self.state = 1455
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Function_, PhpParser.Static]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Static:
                    self.state = 1429
                    self.match(PhpParser.Static)


                self.state = 1432
                self.match(PhpParser.Function_)
                self.state = 1434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Ampersand:
                    self.state = 1433
                    self.match(PhpParser.Ampersand)


                self.state = 1436
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1437
                self.formalParameterList()
                self.state = 1438
                self.match(PhpParser.CloseRoundBracket)
                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Use:
                    self.state = 1439
                    self.lambdaFunctionUseVars()


                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Colon:
                    self.state = 1442
                    self.match(PhpParser.Colon)
                    self.state = 1443
                    self.typeHint(0)


                self.state = 1446
                self.blockStatement()
                pass
            elif token in [PhpParser.LambdaFn]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1448
                self.match(PhpParser.LambdaFn)
                self.state = 1449
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1450
                self.formalParameterList()
                self.state = 1451
                self.match(PhpParser.CloseRoundBracket)
                self.state = 1452
                self.match(PhpParser.DoubleArrow)
                self.state = 1453
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MatchExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Match_(self):
            return self.getToken(PhpParser.Match_, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def matchItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.MatchItemContext)
            else:
                return self.getTypedRuleContext(PhpParser.MatchItemContext,i)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_matchExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchExpr" ):
                listener.enterMatchExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchExpr" ):
                listener.exitMatchExpr(self)




    def matchExpr(self):

        localctx = PhpParser.MatchExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_matchExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1457
            self.match(PhpParser.Match_)
            self.state = 1458
            self.match(PhpParser.OpenRoundBracket)
            self.state = 1459
            self.expression(0)
            self.state = 1460
            self.match(PhpParser.CloseRoundBracket)
            self.state = 1461
            self.match(PhpParser.OpenCurlyBracket)
            self.state = 1462
            self.matchItem()
            self.state = 1467
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1463
                    self.match(PhpParser.Comma)
                    self.state = 1464
                    self.matchItem() 
                self.state = 1469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

            self.state = 1471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Comma:
                self.state = 1470
                self.match(PhpParser.Comma)


            self.state = 1473
            self.match(PhpParser.CloseCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MatchItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_matchItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchItem" ):
                listener.enterMatchItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchItem" ):
                listener.exitMatchItem(self)




    def matchItem(self):

        localctx = PhpParser.MatchItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_matchItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1475
            self.expression(0)
            self.state = 1480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 1476
                self.match(PhpParser.Comma)
                self.state = 1477
                self.expression(0)
                self.state = 1482
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1483
            self.match(PhpParser.DoubleArrow)
            self.state = 1484
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NewExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(PhpParser.New, 0)

        def typeRef(self):
            return self.getTypedRuleContext(PhpParser.TypeRefContext,0)


        def arguments(self):
            return self.getTypedRuleContext(PhpParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_newExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpr" ):
                listener.enterNewExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpr" ):
                listener.exitNewExpr(self)




    def newExpr(self):

        localctx = PhpParser.NewExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_newExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self.match(PhpParser.New)
            self.state = 1487
            self.typeRef()
            self.state = 1489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1488
                self.arguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Eq(self):
            return self.getToken(PhpParser.Eq, 0)

        def PlusEqual(self):
            return self.getToken(PhpParser.PlusEqual, 0)

        def MinusEqual(self):
            return self.getToken(PhpParser.MinusEqual, 0)

        def MulEqual(self):
            return self.getToken(PhpParser.MulEqual, 0)

        def PowEqual(self):
            return self.getToken(PhpParser.PowEqual, 0)

        def DivEqual(self):
            return self.getToken(PhpParser.DivEqual, 0)

        def Concaequal(self):
            return self.getToken(PhpParser.Concaequal, 0)

        def ModEqual(self):
            return self.getToken(PhpParser.ModEqual, 0)

        def AndEqual(self):
            return self.getToken(PhpParser.AndEqual, 0)

        def OrEqual(self):
            return self.getToken(PhpParser.OrEqual, 0)

        def XorEqual(self):
            return self.getToken(PhpParser.XorEqual, 0)

        def ShiftLeftEqual(self):
            return self.getToken(PhpParser.ShiftLeftEqual, 0)

        def ShiftRightEqual(self):
            return self.getToken(PhpParser.ShiftRightEqual, 0)

        def NullCoalescingEqual(self):
            return self.getToken(PhpParser.NullCoalescingEqual, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = PhpParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            _la = self._input.LA(1)
            if not(((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & ((1 << (PhpParser.PlusEqual - 173)) | (1 << (PhpParser.MinusEqual - 173)) | (1 << (PhpParser.MulEqual - 173)) | (1 << (PhpParser.PowEqual - 173)) | (1 << (PhpParser.DivEqual - 173)) | (1 << (PhpParser.Concaequal - 173)) | (1 << (PhpParser.ModEqual - 173)) | (1 << (PhpParser.ShiftLeftEqual - 173)) | (1 << (PhpParser.ShiftRightEqual - 173)) | (1 << (PhpParser.AndEqual - 173)) | (1 << (PhpParser.OrEqual - 173)) | (1 << (PhpParser.XorEqual - 173)) | (1 << (PhpParser.NullCoalescingEqual - 173)) | (1 << (PhpParser.Eq - 173)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class YieldExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Yield(self):
            return self.getToken(PhpParser.Yield, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def From(self):
            return self.getToken(PhpParser.From, 0)

        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_yieldExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldExpression" ):
                listener.enterYieldExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldExpression" ):
                listener.exitYieldExpression(self)




    def yieldExpression(self):

        localctx = PhpParser.YieldExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_yieldExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1493
            self.match(PhpParser.Yield)
            self.state = 1501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 1494
                self.expression(0)
                self.state = 1497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.DoubleArrow:
                    self.state = 1495
                    self.match(PhpParser.DoubleArrow)
                    self.state = 1496
                    self.expression(0)


                pass

            elif la_ == 2:
                self.state = 1499
                self.match(PhpParser.From)
                self.state = 1500
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayItemListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ArrayItemContext)
            else:
                return self.getTypedRuleContext(PhpParser.ArrayItemContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_arrayItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayItemList" ):
                listener.enterArrayItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayItemList" ):
                listener.exitArrayItemList(self)




    def arrayItemList(self):

        localctx = PhpParser.ArrayItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_arrayItemList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1503
            self.arrayItem()
            self.state = 1508
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1504
                    self.match(PhpParser.Comma)
                    self.state = 1505
                    self.arrayItem() 
                self.state = 1510
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

            self.state = 1512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1511
                self.match(PhpParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.ExpressionContext,i)


        def DoubleArrow(self):
            return self.getToken(PhpParser.DoubleArrow, 0)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_arrayItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayItem" ):
                listener.enterArrayItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayItem" ):
                listener.exitArrayItem(self)




    def arrayItem(self):

        localctx = PhpParser.ArrayItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_arrayItem)
        self._la = 0 # Token type
        try:
            self.state = 1526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1514
                self.expression(0)
                self.state = 1517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.DoubleArrow:
                    self.state = 1515
                    self.match(PhpParser.DoubleArrow)
                    self.state = 1516
                    self.expression(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                    self.state = 1519
                    self.expression(0)
                    self.state = 1520
                    self.match(PhpParser.DoubleArrow)


                self.state = 1524
                self.match(PhpParser.Ampersand)
                self.state = 1525
                self.chain()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaFunctionUseVarsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Use(self):
            return self.getToken(PhpParser.Use, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def lambdaFunctionUseVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.LambdaFunctionUseVarContext)
            else:
                return self.getTypedRuleContext(PhpParser.LambdaFunctionUseVarContext,i)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_lambdaFunctionUseVars

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionUseVars" ):
                listener.enterLambdaFunctionUseVars(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionUseVars" ):
                listener.exitLambdaFunctionUseVars(self)




    def lambdaFunctionUseVars(self):

        localctx = PhpParser.LambdaFunctionUseVarsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_lambdaFunctionUseVars)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1528
            self.match(PhpParser.Use)
            self.state = 1529
            self.match(PhpParser.OpenRoundBracket)
            self.state = 1530
            self.lambdaFunctionUseVar()
            self.state = 1535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 1531
                self.match(PhpParser.Comma)
                self.state = 1532
                self.lambdaFunctionUseVar()
                self.state = 1537
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1538
            self.match(PhpParser.CloseRoundBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LambdaFunctionUseVarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_lambdaFunctionUseVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaFunctionUseVar" ):
                listener.enterLambdaFunctionUseVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaFunctionUseVar" ):
                listener.exitLambdaFunctionUseVar(self)




    def lambdaFunctionUseVar(self):

        localctx = PhpParser.LambdaFunctionUseVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_lambdaFunctionUseVar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Ampersand:
                self.state = 1540
                self.match(PhpParser.Ampersand)


            self.state = 1543
            self.match(PhpParser.VarName)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedStaticTypeRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def genericDynamicArgs(self):
            return self.getTypedRuleContext(PhpParser.GenericDynamicArgsContext,0)


        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_qualifiedStaticTypeRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedStaticTypeRef" ):
                listener.enterQualifiedStaticTypeRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedStaticTypeRef" ):
                listener.exitQualifiedStaticTypeRef(self)




    def qualifiedStaticTypeRef(self):

        localctx = PhpParser.QualifiedStaticTypeRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_qualifiedStaticTypeRef)
        try:
            self.state = 1550
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1545
                self.qualifiedNamespaceName()
                self.state = 1547
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                if la_ == 1:
                    self.state = 1546
                    self.genericDynamicArgs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1549
                self.match(PhpParser.Static)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def indirectTypeRef(self):
            return self.getTypedRuleContext(PhpParser.IndirectTypeRefContext,0)


        def genericDynamicArgs(self):
            return self.getTypedRuleContext(PhpParser.GenericDynamicArgsContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(PhpParser.PrimitiveTypeContext,0)


        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def anonymousClass(self):
            return self.getTypedRuleContext(PhpParser.AnonymousClassContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_typeRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeRef" ):
                listener.enterTypeRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeRef" ):
                listener.exitTypeRef(self)




    def typeRef(self):

        localctx = PhpParser.TypeRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_typeRef)
        try:
            self.state = 1562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1554
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                if la_ == 1:
                    self.state = 1552
                    self.qualifiedNamespaceName()
                    pass

                elif la_ == 2:
                    self.state = 1553
                    self.indirectTypeRef()
                    pass


                self.state = 1557
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
                if la_ == 1:
                    self.state = 1556
                    self.genericDynamicArgs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1559
                self.primitiveType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1560
                self.match(PhpParser.Static)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1561
                self.anonymousClass()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnonymousClassContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def classEntryType(self):
            return self.getTypedRuleContext(PhpParser.ClassEntryTypeContext,0)


        def Interface(self):
            return self.getToken(PhpParser.Interface, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PhpParser.AttributesContext,0)


        def Private(self):
            return self.getToken(PhpParser.Private, 0)

        def modifier(self):
            return self.getTypedRuleContext(PhpParser.ModifierContext,0)


        def Partial(self):
            return self.getToken(PhpParser.Partial, 0)

        def classStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ClassStatementContext)
            else:
                return self.getTypedRuleContext(PhpParser.ClassStatementContext,i)


        def typeParameterListInBrackets(self):
            return self.getTypedRuleContext(PhpParser.TypeParameterListInBracketsContext,0)


        def Extends(self):
            return self.getToken(PhpParser.Extends, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def Implements(self):
            return self.getToken(PhpParser.Implements, 0)

        def interfaceList(self):
            return self.getTypedRuleContext(PhpParser.InterfaceListContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_anonymousClass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousClass" ):
                listener.enterAnonymousClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousClass" ):
                listener.exitAnonymousClass(self)




    def anonymousClass(self):

        localctx = PhpParser.AnonymousClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_anonymousClass)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.AttributeStart:
                self.state = 1564
                self.attributes()


            self.state = 1568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Private:
                self.state = 1567
                self.match(PhpParser.Private)


            self.state = 1571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Abstract or _la==PhpParser.Final:
                self.state = 1570
                self.modifier()


            self.state = 1574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Partial:
                self.state = 1573
                self.match(PhpParser.Partial)


            self.state = 1597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Class, PhpParser.Trait]:
                self.state = 1576
                self.classEntryType()
                self.state = 1578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Lgeneric:
                    self.state = 1577
                    self.typeParameterListInBrackets()


                self.state = 1582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Extends:
                    self.state = 1580
                    self.match(PhpParser.Extends)
                    self.state = 1581
                    self.qualifiedStaticTypeRef()


                self.state = 1586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Implements:
                    self.state = 1584
                    self.match(PhpParser.Implements)
                    self.state = 1585
                    self.interfaceList()


                pass
            elif token in [PhpParser.Interface]:
                self.state = 1588
                self.match(PhpParser.Interface)
                self.state = 1589
                self.identifier()
                self.state = 1591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Lgeneric:
                    self.state = 1590
                    self.typeParameterListInBrackets()


                self.state = 1595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Extends:
                    self.state = 1593
                    self.match(PhpParser.Extends)
                    self.state = 1594
                    self.interfaceList()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1599
            self.match(PhpParser.OpenCurlyBracket)
            self.state = 1603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PhpParser.AttributeStart) | (1 << PhpParser.Abstract) | (1 << PhpParser.Const))) != 0) or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (PhpParser.Final - 77)) | (1 << (PhpParser.Function_ - 77)) | (1 << (PhpParser.Private - 77)) | (1 << (PhpParser.Protected - 77)) | (1 << (PhpParser.Public - 77)) | (1 << (PhpParser.Readonly - 77)) | (1 << (PhpParser.Static - 77)) | (1 << (PhpParser.Use - 77)) | (1 << (PhpParser.Var - 77)))) != 0):
                self.state = 1600
                self.classStatement()
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1606
            self.match(PhpParser.CloseCurlyBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndirectTypeRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chainBase(self):
            return self.getTypedRuleContext(PhpParser.ChainBaseContext,0)


        def ObjectOperator(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.ObjectOperator)
            else:
                return self.getToken(PhpParser.ObjectOperator, i)

        def keyedFieldName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.KeyedFieldNameContext)
            else:
                return self.getTypedRuleContext(PhpParser.KeyedFieldNameContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_indirectTypeRef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndirectTypeRef" ):
                listener.enterIndirectTypeRef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndirectTypeRef" ):
                listener.exitIndirectTypeRef(self)




    def indirectTypeRef(self):

        localctx = PhpParser.IndirectTypeRefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_indirectTypeRef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.chainBase()
            self.state = 1613
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1609
                    self.match(PhpParser.ObjectOperator)
                    self.state = 1610
                    self.keyedFieldName() 
                self.state = 1615
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNamespaceNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespaceNameList(self):
            return self.getTypedRuleContext(PhpParser.NamespaceNameListContext,0)


        def Namespace(self):
            return self.getToken(PhpParser.Namespace, 0)

        def NamespaceSeparator(self):
            return self.getToken(PhpParser.NamespaceSeparator, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_qualifiedNamespaceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNamespaceName" ):
                listener.enterQualifiedNamespaceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNamespaceName" ):
                listener.exitQualifiedNamespaceName(self)




    def qualifiedNamespaceName(self):

        localctx = PhpParser.QualifiedNamespaceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_qualifiedNamespaceName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1616
                self.match(PhpParser.Namespace)


            self.state = 1620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.NamespaceSeparator:
                self.state = 1619
                self.match(PhpParser.NamespaceSeparator)


            self.state = 1622
            self.namespaceNameList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespaceNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PhpParser.IdentifierContext,i)


        def NamespaceSeparator(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.NamespaceSeparator)
            else:
                return self.getToken(PhpParser.NamespaceSeparator, i)

        def namespaceNameTail(self):
            return self.getTypedRuleContext(PhpParser.NamespaceNameTailContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_namespaceNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceNameList" ):
                listener.enterNamespaceNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceNameList" ):
                listener.exitNamespaceNameList(self)




    def namespaceNameList(self):

        localctx = PhpParser.NamespaceNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_namespaceNameList)
        try:
            self.state = 1637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1624
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1625
                self.identifier()
                self.state = 1630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,197,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1626
                        self.match(PhpParser.NamespaceSeparator)
                        self.state = 1627
                        self.identifier() 
                    self.state = 1632
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,197,self._ctx)

                self.state = 1635
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1633
                    self.match(PhpParser.NamespaceSeparator)
                    self.state = 1634
                    self.namespaceNameTail()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamespaceNameTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PhpParser.IdentifierContext,i)


        def As(self):
            return self.getToken(PhpParser.As, 0)

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def namespaceNameTail(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.NamespaceNameTailContext)
            else:
                return self.getTypedRuleContext(PhpParser.NamespaceNameTailContext,i)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_namespaceNameTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespaceNameTail" ):
                listener.enterNamespaceNameTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespaceNameTail" ):
                listener.exitNamespaceNameTail(self)




    def namespaceNameTail(self):

        localctx = PhpParser.NamespaceNameTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_namespaceNameTail)
        self._la = 0 # Token type
        try:
            self.state = 1658
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.Enum_, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function_, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Match_, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.From, PhpParser.LambdaFn, PhpParser.Ticks, PhpParser.Encoding, PhpParser.StrictTypes, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.Label]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1639
                self.identifier()
                self.state = 1642
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
                if la_ == 1:
                    self.state = 1640
                    self.match(PhpParser.As)
                    self.state = 1641
                    self.identifier()


                pass
            elif token in [PhpParser.OpenCurlyBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1644
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 1645
                self.namespaceNameTail()
                self.state = 1650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1646
                        self.match(PhpParser.Comma)
                        self.state = 1647
                        self.namespaceNameTail() 
                    self.state = 1652
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

                self.state = 1654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Comma:
                    self.state = 1653
                    self.match(PhpParser.Comma)


                self.state = 1656
                self.match(PhpParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedNamespaceNameListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.QualifiedNamespaceNameContext)
            else:
                return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_qualifiedNamespaceNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNamespaceNameList" ):
                listener.enterQualifiedNamespaceNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNamespaceNameList" ):
                listener.exitQualifiedNamespaceNameList(self)




    def qualifiedNamespaceNameList(self):

        localctx = PhpParser.QualifiedNamespaceNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_qualifiedNamespaceNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1660
            self.qualifiedNamespaceName()
            self.state = 1665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 1661
                self.match(PhpParser.Comma)
                self.state = 1662
                self.qualifiedNamespaceName()
                self.state = 1667
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def actualArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ActualArgumentContext)
            else:
                return self.getTypedRuleContext(PhpParser.ActualArgumentContext,i)


        def yieldExpression(self):
            return self.getTypedRuleContext(PhpParser.YieldExpressionContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = PhpParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1668
            self.match(PhpParser.OpenRoundBracket)
            self.state = 1678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,206,self._ctx)
            if la_ == 1:
                self.state = 1669
                self.actualArgument()
                self.state = 1674
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1670
                        self.match(PhpParser.Comma)
                        self.state = 1671
                        self.actualArgument() 
                    self.state = 1676
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,205,self._ctx)


            elif la_ == 2:
                self.state = 1677
                self.yieldExpression()


            self.state = 1681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Comma:
                self.state = 1680
                self.match(PhpParser.Comma)


            self.state = 1683
            self.match(PhpParser.CloseRoundBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActualArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def argumentName(self):
            return self.getTypedRuleContext(PhpParser.ArgumentNameContext,0)


        def Ellipsis(self):
            return self.getToken(PhpParser.Ellipsis, 0)

        def Ampersand(self):
            return self.getToken(PhpParser.Ampersand, 0)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_actualArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActualArgument" ):
                listener.enterActualArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActualArgument" ):
                listener.exitActualArgument(self)




    def actualArgument(self):

        localctx = PhpParser.ActualArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_actualArgument)
        self._la = 0 # Token type
        try:
            self.state = 1694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.Enum_, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function_, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Match_, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.From, PhpParser.LambdaFn, PhpParser.Ticks, PhpParser.Encoding, PhpParser.StrictTypes, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.Inc, PhpParser.Dec, PhpParser.NamespaceSeparator, PhpParser.Ellipsis, PhpParser.Bang, PhpParser.Plus, PhpParser.Minus, PhpParser.Tilde, PhpParser.SuppressWarnings, PhpParser.Dollar, PhpParser.OpenRoundBracket, PhpParser.OpenSquareBracket, PhpParser.VarName, PhpParser.Label, PhpParser.Octal, PhpParser.Decimal, PhpParser.Real, PhpParser.Hex, PhpParser.Binary, PhpParser.BackQuoteString, PhpParser.SingleQuoteString, PhpParser.DoubleQuote, PhpParser.StartNowDoc, PhpParser.StartHereDoc]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1686
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                if la_ == 1:
                    self.state = 1685
                    self.argumentName()


                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PhpParser.Ellipsis:
                    self.state = 1688
                    self.match(PhpParser.Ellipsis)


                self.state = 1691
                self.expression(0)
                pass
            elif token in [PhpParser.Ampersand]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1692
                self.match(PhpParser.Ampersand)
                self.state = 1693
                self.chain()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Colon(self):
            return self.getToken(PhpParser.Colon, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_argumentName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentName" ):
                listener.enterArgumentName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentName" ):
                listener.exitArgumentName(self)




    def argumentName(self):

        localctx = PhpParser.ArgumentNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_argumentName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.identifier()
            self.state = 1697
            self.match(PhpParser.Colon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ConstantContext)
            else:
                return self.getTypedRuleContext(PhpParser.ConstantContext,i)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.StringContext)
            else:
                return self.getTypedRuleContext(PhpParser.StringContext,i)


        def Array(self):
            return self.getToken(PhpParser.Array, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def arrayItemList(self):
            return self.getTypedRuleContext(PhpParser.ArrayItemListContext,0)


        def Comma(self):
            return self.getToken(PhpParser.Comma, 0)

        def OpenSquareBracket(self):
            return self.getToken(PhpParser.OpenSquareBracket, 0)

        def CloseSquareBracket(self):
            return self.getToken(PhpParser.CloseSquareBracket, 0)

        def constantInitializer(self):
            return self.getTypedRuleContext(PhpParser.ConstantInitializerContext,0)


        def Plus(self):
            return self.getToken(PhpParser.Plus, 0)

        def Minus(self):
            return self.getToken(PhpParser.Minus, 0)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Dot)
            else:
                return self.getToken(PhpParser.Dot, i)

        def getRuleIndex(self):
            return PhpParser.RULE_constantInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantInitializer" ):
                listener.enterConstantInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantInitializer" ):
                listener.exitConstantInitializer(self)




    def constantInitializer(self):

        localctx = PhpParser.ConstantInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_constantInitializer)
        self._la = 0 # Token type
        try:
            self.state = 1734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1699
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1700
                self.string()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1701
                self.match(PhpParser.Array)
                self.state = 1702
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Ampersand - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                    self.state = 1703
                    self.arrayItemList()
                    self.state = 1705
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PhpParser.Comma:
                        self.state = 1704
                        self.match(PhpParser.Comma)




                self.state = 1709
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1710
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Ampersand - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                    self.state = 1711
                    self.arrayItemList()
                    self.state = 1713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PhpParser.Comma:
                        self.state = 1712
                        self.match(PhpParser.Comma)




                self.state = 1717
                self.match(PhpParser.CloseSquareBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1718
                _la = self._input.LA(1)
                if not(_la==PhpParser.Plus or _la==PhpParser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1719
                self.constantInitializer()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1722
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 1720
                    self.string()
                    pass

                elif la_ == 2:
                    self.state = 1721
                    self.constant()
                    pass


                self.state = 1731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PhpParser.Dot:
                    self.state = 1724
                    self.match(PhpParser.Dot)
                    self.state = 1727
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                    if la_ == 1:
                        self.state = 1725
                        self.string()
                        pass

                    elif la_ == 2:
                        self.state = 1726
                        self.constant()
                        pass


                    self.state = 1733
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Null(self):
            return self.getToken(PhpParser.Null, 0)

        def literalConstant(self):
            return self.getTypedRuleContext(PhpParser.LiteralConstantContext,0)


        def magicConstant(self):
            return self.getTypedRuleContext(PhpParser.MagicConstantContext,0)


        def classConstant(self):
            return self.getTypedRuleContext(PhpParser.ClassConstantContext,0)


        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = PhpParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_constant)
        try:
            self.state = 1741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1736
                self.match(PhpParser.Null)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1737
                self.literalConstant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1738
                self.magicConstant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1739
                self.classConstant()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1740
                self.qualifiedNamespaceName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(PhpParser.Real, 0)

        def BooleanConstant(self):
            return self.getToken(PhpParser.BooleanConstant, 0)

        def numericConstant(self):
            return self.getTypedRuleContext(PhpParser.NumericConstantContext,0)


        def stringConstant(self):
            return self.getTypedRuleContext(PhpParser.StringConstantContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_literalConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralConstant" ):
                listener.enterLiteralConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralConstant" ):
                listener.exitLiteralConstant(self)




    def literalConstant(self):

        localctx = PhpParser.LiteralConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_literalConstant)
        try:
            self.state = 1747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Real]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1743
                self.match(PhpParser.Real)
                pass
            elif token in [PhpParser.BooleanConstant]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1744
                self.match(PhpParser.BooleanConstant)
                pass
            elif token in [PhpParser.Octal, PhpParser.Decimal, PhpParser.Hex, PhpParser.Binary]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1745
                self.numericConstant()
                pass
            elif token in [PhpParser.Label]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1746
                self.stringConstant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Octal(self):
            return self.getToken(PhpParser.Octal, 0)

        def Decimal(self):
            return self.getToken(PhpParser.Decimal, 0)

        def Hex(self):
            return self.getToken(PhpParser.Hex, 0)

        def Binary(self):
            return self.getToken(PhpParser.Binary, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_numericConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericConstant" ):
                listener.enterNumericConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericConstant" ):
                listener.exitNumericConstant(self)




    def numericConstant(self):

        localctx = PhpParser.NumericConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_numericConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1749
            _la = self._input.LA(1)
            if not(((((_la - 226)) & ~0x3f) == 0 and ((1 << (_la - 226)) & ((1 << (PhpParser.Octal - 226)) | (1 << (PhpParser.Decimal - 226)) | (1 << (PhpParser.Hex - 226)) | (1 << (PhpParser.Binary - 226)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DoubleColon(self):
            return self.getToken(PhpParser.DoubleColon, 0)

        def Class(self):
            return self.getToken(PhpParser.Class, 0)

        def Parent_(self):
            return self.getToken(PhpParser.Parent_, 0)

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def Constructor(self):
            return self.getToken(PhpParser.Constructor, 0)

        def Get(self):
            return self.getToken(PhpParser.Get, 0)

        def Set(self):
            return self.getToken(PhpParser.Set, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def keyedVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.KeyedVariableContext)
            else:
                return self.getTypedRuleContext(PhpParser.KeyedVariableContext,i)


        def string(self):
            return self.getTypedRuleContext(PhpParser.StringContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_classConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassConstant" ):
                listener.enterClassConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassConstant" ):
                listener.exitClassConstant(self)




    def classConstant(self):

        localctx = PhpParser.ClassConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_classConstant)
        self._la = 0 # Token type
        try:
            self.state = 1769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1751
                _la = self._input.LA(1)
                if not(_la==PhpParser.Class or _la==PhpParser.Parent_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1752
                self.match(PhpParser.DoubleColon)
                self.state = 1757
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                if la_ == 1:
                    self.state = 1753
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 1754
                    self.match(PhpParser.Constructor)
                    pass

                elif la_ == 3:
                    self.state = 1755
                    self.match(PhpParser.Get)
                    pass

                elif la_ == 4:
                    self.state = 1756
                    self.match(PhpParser.Set)
                    pass


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1762
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.Enum_, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function_, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Match_, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.From, PhpParser.LambdaFn, PhpParser.Ticks, PhpParser.Encoding, PhpParser.StrictTypes, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.NamespaceSeparator, PhpParser.Label]:
                    self.state = 1759
                    self.qualifiedStaticTypeRef()
                    pass
                elif token in [PhpParser.Dollar, PhpParser.VarName]:
                    self.state = 1760
                    self.keyedVariable()
                    pass
                elif token in [PhpParser.SingleQuoteString, PhpParser.DoubleQuote, PhpParser.StartNowDoc, PhpParser.StartHereDoc]:
                    self.state = 1761
                    self.string()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1764
                self.match(PhpParser.DoubleColon)
                self.state = 1767
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.Enum_, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function_, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Match_, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.From, PhpParser.LambdaFn, PhpParser.Ticks, PhpParser.Encoding, PhpParser.StrictTypes, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.Label]:
                    self.state = 1765
                    self.identifier()
                    pass
                elif token in [PhpParser.Dollar, PhpParser.VarName]:
                    self.state = 1766
                    self.keyedVariable()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Label(self):
            return self.getToken(PhpParser.Label, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_stringConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringConstant" ):
                listener.enterStringConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringConstant" ):
                listener.exitStringConstant(self)




    def stringConstant(self):

        localctx = PhpParser.StringConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_stringConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1771
            self.match(PhpParser.Label)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StartHereDoc(self):
            return self.getToken(PhpParser.StartHereDoc, 0)

        def HereDocText(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.HereDocText)
            else:
                return self.getToken(PhpParser.HereDocText, i)

        def StartNowDoc(self):
            return self.getToken(PhpParser.StartNowDoc, 0)

        def SingleQuoteString(self):
            return self.getToken(PhpParser.SingleQuoteString, 0)

        def DoubleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.DoubleQuote)
            else:
                return self.getToken(PhpParser.DoubleQuote, i)

        def interpolatedStringPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.InterpolatedStringPartContext)
            else:
                return self.getTypedRuleContext(PhpParser.InterpolatedStringPartContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)




    def string(self):

        localctx = PhpParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_string)
        try:
            self.state = 1794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.StartHereDoc]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1773
                self.match(PhpParser.StartHereDoc)
                self.state = 1775 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1774
                        self.match(PhpParser.HereDocText)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1777 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

                pass
            elif token in [PhpParser.StartNowDoc]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1779
                self.match(PhpParser.StartNowDoc)
                self.state = 1781 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1780
                        self.match(PhpParser.HereDocText)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1783 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

                pass
            elif token in [PhpParser.SingleQuoteString]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1785
                self.match(PhpParser.SingleQuoteString)
                pass
            elif token in [PhpParser.DoubleQuote]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1786
                self.match(PhpParser.DoubleQuote)
                self.state = 1790
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1787
                        self.interpolatedStringPart() 
                    self.state = 1792
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

                self.state = 1793
                self.match(PhpParser.DoubleQuote)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InterpolatedStringPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringPart(self):
            return self.getToken(PhpParser.StringPart, 0)

        def UnicodeEscape(self):
            return self.getToken(PhpParser.UnicodeEscape, 0)

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_interpolatedStringPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterpolatedStringPart" ):
                listener.enterInterpolatedStringPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterpolatedStringPart" ):
                listener.exitInterpolatedStringPart(self)




    def interpolatedStringPart(self):

        localctx = PhpParser.InterpolatedStringPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_interpolatedStringPart)
        try:
            self.state = 1799
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.StringPart]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1796
                self.match(PhpParser.StringPart)
                pass
            elif token in [PhpParser.UnicodeEscape]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1797
                self.match(PhpParser.UnicodeEscape)
                pass
            elif token in [PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.Enum_, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function_, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Match_, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.From, PhpParser.LambdaFn, PhpParser.Ticks, PhpParser.Encoding, PhpParser.StrictTypes, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.NamespaceSeparator, PhpParser.Dollar, PhpParser.OpenRoundBracket, PhpParser.VarName, PhpParser.Label, PhpParser.SingleQuoteString, PhpParser.DoubleQuote, PhpParser.StartNowDoc, PhpParser.StartHereDoc]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1798
                self.chain()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChainListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ChainContext)
            else:
                return self.getTypedRuleContext(PhpParser.ChainContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_chainList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainList" ):
                listener.enterChainList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainList" ):
                listener.exitChainList(self)




    def chainList(self):

        localctx = PhpParser.ChainListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_chainList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self.chain()
            self.state = 1806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 1802
                self.match(PhpParser.Comma)
                self.state = 1803
                self.chain()
                self.state = 1808
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chainOrigin(self):
            return self.getTypedRuleContext(PhpParser.ChainOriginContext,0)


        def memberAccess(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.MemberAccessContext)
            else:
                return self.getTypedRuleContext(PhpParser.MemberAccessContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_chain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChain" ):
                listener.enterChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChain" ):
                listener.exitChain(self)




    def chain(self):

        localctx = PhpParser.ChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_chain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1809
            self.chainOrigin()
            self.state = 1813
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1810
                    self.memberAccess() 
                self.state = 1815
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChainOriginContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chainBase(self):
            return self.getTypedRuleContext(PhpParser.ChainBaseContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(PhpParser.FunctionCallContext,0)


        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def newExpr(self):
            return self.getTypedRuleContext(PhpParser.NewExprContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_chainOrigin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainOrigin" ):
                listener.enterChainOrigin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainOrigin" ):
                listener.exitChainOrigin(self)




    def chainOrigin(self):

        localctx = PhpParser.ChainOriginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_chainOrigin)
        try:
            self.state = 1822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1816
                self.chainBase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1817
                self.functionCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1818
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1819
                self.newExpr()
                self.state = 1820
                self.match(PhpParser.CloseRoundBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberAccessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ObjectOperator(self):
            return self.getToken(PhpParser.ObjectOperator, 0)

        def keyedFieldName(self):
            return self.getTypedRuleContext(PhpParser.KeyedFieldNameContext,0)


        def actualArguments(self):
            return self.getTypedRuleContext(PhpParser.ActualArgumentsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_memberAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccess" ):
                listener.enterMemberAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccess" ):
                listener.exitMemberAccess(self)




    def memberAccess(self):

        localctx = PhpParser.MemberAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_memberAccess)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.match(PhpParser.ObjectOperator)
            self.state = 1825
            self.keyedFieldName()
            self.state = 1827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                self.state = 1826
                self.actualArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCallName(self):
            return self.getTypedRuleContext(PhpParser.FunctionCallNameContext,0)


        def actualArguments(self):
            return self.getTypedRuleContext(PhpParser.ActualArgumentsContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = PhpParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829
            self.functionCallName()
            self.state = 1830
            self.actualArguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedNamespaceName(self):
            return self.getTypedRuleContext(PhpParser.QualifiedNamespaceNameContext,0)


        def classConstant(self):
            return self.getTypedRuleContext(PhpParser.ClassConstantContext,0)


        def chainBase(self):
            return self.getTypedRuleContext(PhpParser.ChainBaseContext,0)


        def parentheses(self):
            return self.getTypedRuleContext(PhpParser.ParenthesesContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_functionCallName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallName" ):
                listener.enterFunctionCallName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallName" ):
                listener.exitFunctionCallName(self)




    def functionCallName(self):

        localctx = PhpParser.FunctionCallNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_functionCallName)
        try:
            self.state = 1836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1832
                self.qualifiedNamespaceName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1833
                self.classConstant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1834
                self.chainBase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1835
                self.parentheses()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ActualArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericDynamicArgs(self):
            return self.getTypedRuleContext(PhpParser.GenericDynamicArgsContext,0)


        def arguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.ArgumentsContext)
            else:
                return self.getTypedRuleContext(PhpParser.ArgumentsContext,i)


        def squareCurlyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.SquareCurlyExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.SquareCurlyExpressionContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_actualArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActualArguments" ):
                listener.enterActualArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActualArguments" ):
                listener.exitActualArguments(self)




    def actualArguments(self):

        localctx = PhpParser.ActualArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_actualArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PhpParser.Lgeneric:
                self.state = 1838
                self.genericDynamicArgs()


            self.state = 1842 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1841
                    self.arguments()

                else:
                    raise NoViableAltException(self)
                self.state = 1844 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

            self.state = 1849
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1846
                    self.squareCurlyExpression() 
                self.state = 1851
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChainBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyedVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.KeyedVariableContext)
            else:
                return self.getTypedRuleContext(PhpParser.KeyedVariableContext,i)


        def DoubleColon(self):
            return self.getToken(PhpParser.DoubleColon, 0)

        def qualifiedStaticTypeRef(self):
            return self.getTypedRuleContext(PhpParser.QualifiedStaticTypeRefContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_chainBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChainBase" ):
                listener.enterChainBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChainBase" ):
                listener.exitChainBase(self)




    def chainBase(self):

        localctx = PhpParser.ChainBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_chainBase)
        try:
            self.state = 1861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Dollar, PhpParser.VarName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1852
                self.keyedVariable()
                self.state = 1855
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1853
                    self.match(PhpParser.DoubleColon)
                    self.state = 1854
                    self.keyedVariable()


                pass
            elif token in [PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.Enum_, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function_, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Match_, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.From, PhpParser.LambdaFn, PhpParser.Ticks, PhpParser.Encoding, PhpParser.StrictTypes, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.NamespaceSeparator, PhpParser.Label]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1857
                self.qualifiedStaticTypeRef()
                self.state = 1858
                self.match(PhpParser.DoubleColon)
                self.state = 1859
                self.keyedVariable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeyedFieldNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyedSimpleFieldName(self):
            return self.getTypedRuleContext(PhpParser.KeyedSimpleFieldNameContext,0)


        def keyedVariable(self):
            return self.getTypedRuleContext(PhpParser.KeyedVariableContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_keyedFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedFieldName" ):
                listener.enterKeyedFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedFieldName" ):
                listener.exitKeyedFieldName(self)




    def keyedFieldName(self):

        localctx = PhpParser.KeyedFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_keyedFieldName)
        try:
            self.state = 1865
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.Enum_, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function_, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Match_, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.From, PhpParser.LambdaFn, PhpParser.Ticks, PhpParser.Encoding, PhpParser.StrictTypes, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.OpenCurlyBracket, PhpParser.Label]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1863
                self.keyedSimpleFieldName()
                pass
            elif token in [PhpParser.Dollar, PhpParser.VarName]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1864
                self.keyedVariable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeyedSimpleFieldNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PhpParser.IdentifierContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def squareCurlyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.SquareCurlyExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.SquareCurlyExpressionContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_keyedSimpleFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedSimpleFieldName" ):
                listener.enterKeyedSimpleFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedSimpleFieldName" ):
                listener.exitKeyedSimpleFieldName(self)




    def keyedSimpleFieldName(self):

        localctx = PhpParser.KeyedSimpleFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_keyedSimpleFieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.Abstract, PhpParser.Array, PhpParser.As, PhpParser.BinaryCast, PhpParser.BoolType, PhpParser.BooleanConstant, PhpParser.Break, PhpParser.Callable, PhpParser.Case, PhpParser.Catch, PhpParser.Class, PhpParser.Clone, PhpParser.Const, PhpParser.Continue, PhpParser.Declare, PhpParser.Default, PhpParser.Do, PhpParser.DoubleCast, PhpParser.DoubleType, PhpParser.Echo, PhpParser.Else, PhpParser.ElseIf, PhpParser.Empty, PhpParser.Enum_, PhpParser.EndDeclare, PhpParser.EndFor, PhpParser.EndForeach, PhpParser.EndIf, PhpParser.EndSwitch, PhpParser.EndWhile, PhpParser.Eval, PhpParser.Exit, PhpParser.Extends, PhpParser.Final, PhpParser.Finally, PhpParser.FloatCast, PhpParser.For, PhpParser.Foreach, PhpParser.Function_, PhpParser.Global, PhpParser.Goto, PhpParser.If, PhpParser.Implements, PhpParser.Import, PhpParser.Include, PhpParser.IncludeOnce, PhpParser.InstanceOf, PhpParser.InsteadOf, PhpParser.Int8Cast, PhpParser.Int16Cast, PhpParser.Int64Type, PhpParser.IntType, PhpParser.Interface, PhpParser.IsSet, PhpParser.List, PhpParser.LogicalAnd, PhpParser.LogicalOr, PhpParser.LogicalXor, PhpParser.Match_, PhpParser.Namespace, PhpParser.New, PhpParser.Null, PhpParser.ObjectType, PhpParser.Parent_, PhpParser.Partial, PhpParser.Print, PhpParser.Private, PhpParser.Protected, PhpParser.Public, PhpParser.Readonly, PhpParser.Require, PhpParser.RequireOnce, PhpParser.Resource, PhpParser.Return, PhpParser.Static, PhpParser.StringType, PhpParser.Switch, PhpParser.Throw, PhpParser.Trait, PhpParser.Try, PhpParser.Typeof, PhpParser.UintCast, PhpParser.UnicodeCast, PhpParser.Unset, PhpParser.Use, PhpParser.Var, PhpParser.While, PhpParser.Yield, PhpParser.From, PhpParser.LambdaFn, PhpParser.Ticks, PhpParser.Encoding, PhpParser.StrictTypes, PhpParser.Get, PhpParser.Set, PhpParser.Call, PhpParser.CallStatic, PhpParser.Constructor, PhpParser.Destruct, PhpParser.Wakeup, PhpParser.Sleep, PhpParser.Autoload, PhpParser.IsSet__, PhpParser.Unset__, PhpParser.ToString__, PhpParser.Invoke, PhpParser.SetState, PhpParser.Clone__, PhpParser.DebugInfo, PhpParser.Namespace__, PhpParser.Class__, PhpParser.Traic__, PhpParser.Function__, PhpParser.Method__, PhpParser.Line__, PhpParser.File__, PhpParser.Dir__, PhpParser.Label]:
                self.state = 1867
                self.identifier()
                pass
            elif token in [PhpParser.OpenCurlyBracket]:
                self.state = 1868
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 1869
                self.expression(0)
                self.state = 1870
                self.match(PhpParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1877
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1874
                    self.squareCurlyExpression() 
                self.state = 1879
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeyedVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarName(self):
            return self.getToken(PhpParser.VarName, 0)

        def Dollar(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Dollar)
            else:
                return self.getToken(PhpParser.Dollar, i)

        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def squareCurlyExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.SquareCurlyExpressionContext)
            else:
                return self.getTypedRuleContext(PhpParser.SquareCurlyExpressionContext,i)


        def getRuleIndex(self):
            return PhpParser.RULE_keyedVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyedVariable" ):
                listener.enterKeyedVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyedVariable" ):
                listener.exitKeyedVariable(self)




    def keyedVariable(self):

        localctx = PhpParser.KeyedVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_keyedVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1883
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1880
                    self.match(PhpParser.Dollar) 
                self.state = 1885
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

            self.state = 1892
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.VarName]:
                self.state = 1886
                self.match(PhpParser.VarName)
                pass
            elif token in [PhpParser.Dollar]:
                self.state = 1887
                self.match(PhpParser.Dollar)
                self.state = 1888
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 1889
                self.expression(0)
                self.state = 1890
                self.match(PhpParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1897
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1894
                    self.squareCurlyExpression() 
                self.state = 1899
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SquareCurlyExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenSquareBracket(self):
            return self.getToken(PhpParser.OpenSquareBracket, 0)

        def CloseSquareBracket(self):
            return self.getToken(PhpParser.CloseSquareBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(PhpParser.ExpressionContext,0)


        def OpenCurlyBracket(self):
            return self.getToken(PhpParser.OpenCurlyBracket, 0)

        def CloseCurlyBracket(self):
            return self.getToken(PhpParser.CloseCurlyBracket, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_squareCurlyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSquareCurlyExpression" ):
                listener.enterSquareCurlyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSquareCurlyExpression" ):
                listener.exitSquareCurlyExpression(self)




    def squareCurlyExpression(self):

        localctx = PhpParser.SquareCurlyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_squareCurlyExpression)
        self._la = 0 # Token type
        try:
            self.state = 1909
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PhpParser.OpenSquareBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1900
                self.match(PhpParser.OpenSquareBracket)
                self.state = 1902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                    self.state = 1901
                    self.expression(0)


                self.state = 1904
                self.match(PhpParser.CloseSquareBracket)
                pass
            elif token in [PhpParser.OpenCurlyBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1905
                self.match(PhpParser.OpenCurlyBracket)
                self.state = 1906
                self.expression(0)
                self.state = 1907
                self.match(PhpParser.CloseCurlyBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PhpParser.AssignmentListElementContext)
            else:
                return self.getTypedRuleContext(PhpParser.AssignmentListElementContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(PhpParser.Comma)
            else:
                return self.getToken(PhpParser.Comma, i)

        def getRuleIndex(self):
            return PhpParser.RULE_assignmentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentList" ):
                listener.enterAssignmentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentList" ):
                listener.exitAssignmentList(self)




    def assignmentList(self):

        localctx = PhpParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Ampersand - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                self.state = 1911
                self.assignmentListElement()


            self.state = 1920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PhpParser.Comma:
                self.state = 1914
                self.match(PhpParser.Comma)
                self.state = 1916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)) | (1 << (PhpParser.Inc - 108)) | (1 << (PhpParser.Dec - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (PhpParser.NamespaceSeparator - 194)) | (1 << (PhpParser.Ampersand - 194)) | (1 << (PhpParser.Bang - 194)) | (1 << (PhpParser.Plus - 194)) | (1 << (PhpParser.Minus - 194)) | (1 << (PhpParser.Tilde - 194)) | (1 << (PhpParser.SuppressWarnings - 194)) | (1 << (PhpParser.Dollar - 194)) | (1 << (PhpParser.OpenRoundBracket - 194)) | (1 << (PhpParser.OpenSquareBracket - 194)) | (1 << (PhpParser.VarName - 194)) | (1 << (PhpParser.Label - 194)) | (1 << (PhpParser.Octal - 194)) | (1 << (PhpParser.Decimal - 194)) | (1 << (PhpParser.Real - 194)) | (1 << (PhpParser.Hex - 194)) | (1 << (PhpParser.Binary - 194)) | (1 << (PhpParser.BackQuoteString - 194)) | (1 << (PhpParser.SingleQuoteString - 194)) | (1 << (PhpParser.DoubleQuote - 194)) | (1 << (PhpParser.StartNowDoc - 194)) | (1 << (PhpParser.StartHereDoc - 194)))) != 0):
                    self.state = 1915
                    self.assignmentListElement()


                self.state = 1922
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentListElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def chain(self):
            return self.getTypedRuleContext(PhpParser.ChainContext,0)


        def List(self):
            return self.getToken(PhpParser.List, 0)

        def OpenRoundBracket(self):
            return self.getToken(PhpParser.OpenRoundBracket, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(PhpParser.AssignmentListContext,0)


        def CloseRoundBracket(self):
            return self.getToken(PhpParser.CloseRoundBracket, 0)

        def arrayItem(self):
            return self.getTypedRuleContext(PhpParser.ArrayItemContext,0)


        def getRuleIndex(self):
            return PhpParser.RULE_assignmentListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentListElement" ):
                listener.enterAssignmentListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentListElement" ):
                listener.exitAssignmentListElement(self)




    def assignmentListElement(self):

        localctx = PhpParser.AssignmentListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_assignmentListElement)
        try:
            self.state = 1930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1923
                self.chain()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1924
                self.match(PhpParser.List)
                self.state = 1925
                self.match(PhpParser.OpenRoundBracket)
                self.state = 1926
                self.assignmentList()
                self.state = 1927
                self.match(PhpParser.CloseRoundBracket)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1929
                self.arrayItem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abstract(self):
            return self.getToken(PhpParser.Abstract, 0)

        def Final(self):
            return self.getToken(PhpParser.Final, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = PhpParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1932
            _la = self._input.LA(1)
            if not(_la==PhpParser.Abstract or _la==PhpParser.Final):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Label(self):
            return self.getToken(PhpParser.Label, 0)

        def Abstract(self):
            return self.getToken(PhpParser.Abstract, 0)

        def Array(self):
            return self.getToken(PhpParser.Array, 0)

        def As(self):
            return self.getToken(PhpParser.As, 0)

        def BinaryCast(self):
            return self.getToken(PhpParser.BinaryCast, 0)

        def BoolType(self):
            return self.getToken(PhpParser.BoolType, 0)

        def BooleanConstant(self):
            return self.getToken(PhpParser.BooleanConstant, 0)

        def Break(self):
            return self.getToken(PhpParser.Break, 0)

        def Callable(self):
            return self.getToken(PhpParser.Callable, 0)

        def Case(self):
            return self.getToken(PhpParser.Case, 0)

        def Catch(self):
            return self.getToken(PhpParser.Catch, 0)

        def Class(self):
            return self.getToken(PhpParser.Class, 0)

        def Clone(self):
            return self.getToken(PhpParser.Clone, 0)

        def Const(self):
            return self.getToken(PhpParser.Const, 0)

        def Continue(self):
            return self.getToken(PhpParser.Continue, 0)

        def Declare(self):
            return self.getToken(PhpParser.Declare, 0)

        def Default(self):
            return self.getToken(PhpParser.Default, 0)

        def Do(self):
            return self.getToken(PhpParser.Do, 0)

        def DoubleCast(self):
            return self.getToken(PhpParser.DoubleCast, 0)

        def DoubleType(self):
            return self.getToken(PhpParser.DoubleType, 0)

        def Echo(self):
            return self.getToken(PhpParser.Echo, 0)

        def Else(self):
            return self.getToken(PhpParser.Else, 0)

        def ElseIf(self):
            return self.getToken(PhpParser.ElseIf, 0)

        def Empty(self):
            return self.getToken(PhpParser.Empty, 0)

        def EndDeclare(self):
            return self.getToken(PhpParser.EndDeclare, 0)

        def EndFor(self):
            return self.getToken(PhpParser.EndFor, 0)

        def EndForeach(self):
            return self.getToken(PhpParser.EndForeach, 0)

        def EndIf(self):
            return self.getToken(PhpParser.EndIf, 0)

        def EndSwitch(self):
            return self.getToken(PhpParser.EndSwitch, 0)

        def EndWhile(self):
            return self.getToken(PhpParser.EndWhile, 0)

        def Eval(self):
            return self.getToken(PhpParser.Eval, 0)

        def Exit(self):
            return self.getToken(PhpParser.Exit, 0)

        def Extends(self):
            return self.getToken(PhpParser.Extends, 0)

        def Final(self):
            return self.getToken(PhpParser.Final, 0)

        def Finally(self):
            return self.getToken(PhpParser.Finally, 0)

        def FloatCast(self):
            return self.getToken(PhpParser.FloatCast, 0)

        def For(self):
            return self.getToken(PhpParser.For, 0)

        def Foreach(self):
            return self.getToken(PhpParser.Foreach, 0)

        def Function_(self):
            return self.getToken(PhpParser.Function_, 0)

        def Global(self):
            return self.getToken(PhpParser.Global, 0)

        def Goto(self):
            return self.getToken(PhpParser.Goto, 0)

        def If(self):
            return self.getToken(PhpParser.If, 0)

        def Implements(self):
            return self.getToken(PhpParser.Implements, 0)

        def Import(self):
            return self.getToken(PhpParser.Import, 0)

        def Include(self):
            return self.getToken(PhpParser.Include, 0)

        def IncludeOnce(self):
            return self.getToken(PhpParser.IncludeOnce, 0)

        def InstanceOf(self):
            return self.getToken(PhpParser.InstanceOf, 0)

        def InsteadOf(self):
            return self.getToken(PhpParser.InsteadOf, 0)

        def Int16Cast(self):
            return self.getToken(PhpParser.Int16Cast, 0)

        def Int64Type(self):
            return self.getToken(PhpParser.Int64Type, 0)

        def Int8Cast(self):
            return self.getToken(PhpParser.Int8Cast, 0)

        def Interface(self):
            return self.getToken(PhpParser.Interface, 0)

        def IntType(self):
            return self.getToken(PhpParser.IntType, 0)

        def IsSet(self):
            return self.getToken(PhpParser.IsSet, 0)

        def LambdaFn(self):
            return self.getToken(PhpParser.LambdaFn, 0)

        def List(self):
            return self.getToken(PhpParser.List, 0)

        def LogicalAnd(self):
            return self.getToken(PhpParser.LogicalAnd, 0)

        def LogicalOr(self):
            return self.getToken(PhpParser.LogicalOr, 0)

        def LogicalXor(self):
            return self.getToken(PhpParser.LogicalXor, 0)

        def Namespace(self):
            return self.getToken(PhpParser.Namespace, 0)

        def New(self):
            return self.getToken(PhpParser.New, 0)

        def Null(self):
            return self.getToken(PhpParser.Null, 0)

        def ObjectType(self):
            return self.getToken(PhpParser.ObjectType, 0)

        def Parent_(self):
            return self.getToken(PhpParser.Parent_, 0)

        def Partial(self):
            return self.getToken(PhpParser.Partial, 0)

        def Print(self):
            return self.getToken(PhpParser.Print, 0)

        def Private(self):
            return self.getToken(PhpParser.Private, 0)

        def Protected(self):
            return self.getToken(PhpParser.Protected, 0)

        def Public(self):
            return self.getToken(PhpParser.Public, 0)

        def Readonly(self):
            return self.getToken(PhpParser.Readonly, 0)

        def Require(self):
            return self.getToken(PhpParser.Require, 0)

        def RequireOnce(self):
            return self.getToken(PhpParser.RequireOnce, 0)

        def Resource(self):
            return self.getToken(PhpParser.Resource, 0)

        def Return(self):
            return self.getToken(PhpParser.Return, 0)

        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def StringType(self):
            return self.getToken(PhpParser.StringType, 0)

        def Switch(self):
            return self.getToken(PhpParser.Switch, 0)

        def Throw(self):
            return self.getToken(PhpParser.Throw, 0)

        def Trait(self):
            return self.getToken(PhpParser.Trait, 0)

        def Try(self):
            return self.getToken(PhpParser.Try, 0)

        def Typeof(self):
            return self.getToken(PhpParser.Typeof, 0)

        def UintCast(self):
            return self.getToken(PhpParser.UintCast, 0)

        def UnicodeCast(self):
            return self.getToken(PhpParser.UnicodeCast, 0)

        def Unset(self):
            return self.getToken(PhpParser.Unset, 0)

        def Use(self):
            return self.getToken(PhpParser.Use, 0)

        def Var(self):
            return self.getToken(PhpParser.Var, 0)

        def While(self):
            return self.getToken(PhpParser.While, 0)

        def Yield(self):
            return self.getToken(PhpParser.Yield, 0)

        def From(self):
            return self.getToken(PhpParser.From, 0)

        def Enum_(self):
            return self.getToken(PhpParser.Enum_, 0)

        def Match_(self):
            return self.getToken(PhpParser.Match_, 0)

        def Ticks(self):
            return self.getToken(PhpParser.Ticks, 0)

        def Encoding(self):
            return self.getToken(PhpParser.Encoding, 0)

        def StrictTypes(self):
            return self.getToken(PhpParser.StrictTypes, 0)

        def Get(self):
            return self.getToken(PhpParser.Get, 0)

        def Set(self):
            return self.getToken(PhpParser.Set, 0)

        def Call(self):
            return self.getToken(PhpParser.Call, 0)

        def CallStatic(self):
            return self.getToken(PhpParser.CallStatic, 0)

        def Constructor(self):
            return self.getToken(PhpParser.Constructor, 0)

        def Destruct(self):
            return self.getToken(PhpParser.Destruct, 0)

        def Wakeup(self):
            return self.getToken(PhpParser.Wakeup, 0)

        def Sleep(self):
            return self.getToken(PhpParser.Sleep, 0)

        def Autoload(self):
            return self.getToken(PhpParser.Autoload, 0)

        def IsSet__(self):
            return self.getToken(PhpParser.IsSet__, 0)

        def Unset__(self):
            return self.getToken(PhpParser.Unset__, 0)

        def ToString__(self):
            return self.getToken(PhpParser.ToString__, 0)

        def Invoke(self):
            return self.getToken(PhpParser.Invoke, 0)

        def SetState(self):
            return self.getToken(PhpParser.SetState, 0)

        def Clone__(self):
            return self.getToken(PhpParser.Clone__, 0)

        def DebugInfo(self):
            return self.getToken(PhpParser.DebugInfo, 0)

        def Namespace__(self):
            return self.getToken(PhpParser.Namespace__, 0)

        def Class__(self):
            return self.getToken(PhpParser.Class__, 0)

        def Traic__(self):
            return self.getToken(PhpParser.Traic__, 0)

        def Function__(self):
            return self.getToken(PhpParser.Function__, 0)

        def Method__(self):
            return self.getToken(PhpParser.Method__, 0)

        def Line__(self):
            return self.getToken(PhpParser.Line__, 0)

        def File__(self):
            return self.getToken(PhpParser.File__, 0)

        def Dir__(self):
            return self.getToken(PhpParser.Dir__, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = PhpParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            _la = self._input.LA(1)
            if not(((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (PhpParser.Abstract - 44)) | (1 << (PhpParser.Array - 44)) | (1 << (PhpParser.As - 44)) | (1 << (PhpParser.BinaryCast - 44)) | (1 << (PhpParser.BoolType - 44)) | (1 << (PhpParser.BooleanConstant - 44)) | (1 << (PhpParser.Break - 44)) | (1 << (PhpParser.Callable - 44)) | (1 << (PhpParser.Case - 44)) | (1 << (PhpParser.Catch - 44)) | (1 << (PhpParser.Class - 44)) | (1 << (PhpParser.Clone - 44)) | (1 << (PhpParser.Const - 44)) | (1 << (PhpParser.Continue - 44)) | (1 << (PhpParser.Declare - 44)) | (1 << (PhpParser.Default - 44)) | (1 << (PhpParser.Do - 44)) | (1 << (PhpParser.DoubleCast - 44)) | (1 << (PhpParser.DoubleType - 44)) | (1 << (PhpParser.Echo - 44)) | (1 << (PhpParser.Else - 44)) | (1 << (PhpParser.ElseIf - 44)) | (1 << (PhpParser.Empty - 44)) | (1 << (PhpParser.Enum_ - 44)) | (1 << (PhpParser.EndDeclare - 44)) | (1 << (PhpParser.EndFor - 44)) | (1 << (PhpParser.EndForeach - 44)) | (1 << (PhpParser.EndIf - 44)) | (1 << (PhpParser.EndSwitch - 44)) | (1 << (PhpParser.EndWhile - 44)) | (1 << (PhpParser.Eval - 44)) | (1 << (PhpParser.Exit - 44)) | (1 << (PhpParser.Extends - 44)) | (1 << (PhpParser.Final - 44)) | (1 << (PhpParser.Finally - 44)) | (1 << (PhpParser.FloatCast - 44)) | (1 << (PhpParser.For - 44)) | (1 << (PhpParser.Foreach - 44)) | (1 << (PhpParser.Function_ - 44)) | (1 << (PhpParser.Global - 44)) | (1 << (PhpParser.Goto - 44)) | (1 << (PhpParser.If - 44)) | (1 << (PhpParser.Implements - 44)) | (1 << (PhpParser.Import - 44)) | (1 << (PhpParser.Include - 44)) | (1 << (PhpParser.IncludeOnce - 44)) | (1 << (PhpParser.InstanceOf - 44)) | (1 << (PhpParser.InsteadOf - 44)) | (1 << (PhpParser.Int8Cast - 44)) | (1 << (PhpParser.Int16Cast - 44)) | (1 << (PhpParser.Int64Type - 44)) | (1 << (PhpParser.IntType - 44)) | (1 << (PhpParser.Interface - 44)) | (1 << (PhpParser.IsSet - 44)) | (1 << (PhpParser.List - 44)) | (1 << (PhpParser.LogicalAnd - 44)) | (1 << (PhpParser.LogicalOr - 44)) | (1 << (PhpParser.LogicalXor - 44)) | (1 << (PhpParser.Match_ - 44)) | (1 << (PhpParser.Namespace - 44)) | (1 << (PhpParser.New - 44)) | (1 << (PhpParser.Null - 44)) | (1 << (PhpParser.ObjectType - 44)) | (1 << (PhpParser.Parent_ - 44)))) != 0) or ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (PhpParser.Partial - 108)) | (1 << (PhpParser.Print - 108)) | (1 << (PhpParser.Private - 108)) | (1 << (PhpParser.Protected - 108)) | (1 << (PhpParser.Public - 108)) | (1 << (PhpParser.Readonly - 108)) | (1 << (PhpParser.Require - 108)) | (1 << (PhpParser.RequireOnce - 108)) | (1 << (PhpParser.Resource - 108)) | (1 << (PhpParser.Return - 108)) | (1 << (PhpParser.Static - 108)) | (1 << (PhpParser.StringType - 108)) | (1 << (PhpParser.Switch - 108)) | (1 << (PhpParser.Throw - 108)) | (1 << (PhpParser.Trait - 108)) | (1 << (PhpParser.Try - 108)) | (1 << (PhpParser.Typeof - 108)) | (1 << (PhpParser.UintCast - 108)) | (1 << (PhpParser.UnicodeCast - 108)) | (1 << (PhpParser.Unset - 108)) | (1 << (PhpParser.Use - 108)) | (1 << (PhpParser.Var - 108)) | (1 << (PhpParser.While - 108)) | (1 << (PhpParser.Yield - 108)) | (1 << (PhpParser.From - 108)) | (1 << (PhpParser.LambdaFn - 108)) | (1 << (PhpParser.Ticks - 108)) | (1 << (PhpParser.Encoding - 108)) | (1 << (PhpParser.StrictTypes - 108)) | (1 << (PhpParser.Get - 108)) | (1 << (PhpParser.Set - 108)) | (1 << (PhpParser.Call - 108)) | (1 << (PhpParser.CallStatic - 108)) | (1 << (PhpParser.Constructor - 108)) | (1 << (PhpParser.Destruct - 108)) | (1 << (PhpParser.Wakeup - 108)) | (1 << (PhpParser.Sleep - 108)) | (1 << (PhpParser.Autoload - 108)) | (1 << (PhpParser.IsSet__ - 108)) | (1 << (PhpParser.Unset__ - 108)) | (1 << (PhpParser.ToString__ - 108)) | (1 << (PhpParser.Invoke - 108)) | (1 << (PhpParser.SetState - 108)) | (1 << (PhpParser.Clone__ - 108)) | (1 << (PhpParser.DebugInfo - 108)) | (1 << (PhpParser.Namespace__ - 108)) | (1 << (PhpParser.Class__ - 108)) | (1 << (PhpParser.Traic__ - 108)) | (1 << (PhpParser.Function__ - 108)) | (1 << (PhpParser.Method__ - 108)) | (1 << (PhpParser.Line__ - 108)) | (1 << (PhpParser.File__ - 108)) | (1 << (PhpParser.Dir__ - 108)))) != 0) or _la==PhpParser.Label):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Public(self):
            return self.getToken(PhpParser.Public, 0)

        def Protected(self):
            return self.getToken(PhpParser.Protected, 0)

        def Private(self):
            return self.getToken(PhpParser.Private, 0)

        def Static(self):
            return self.getToken(PhpParser.Static, 0)

        def Abstract(self):
            return self.getToken(PhpParser.Abstract, 0)

        def Final(self):
            return self.getToken(PhpParser.Final, 0)

        def Readonly(self):
            return self.getToken(PhpParser.Readonly, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_memberModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberModifier" ):
                listener.enterMemberModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberModifier" ):
                listener.exitMemberModifier(self)




    def memberModifier(self):

        localctx = PhpParser.MemberModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_memberModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            _la = self._input.LA(1)
            if not(_la==PhpParser.Abstract or ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (PhpParser.Final - 77)) | (1 << (PhpParser.Private - 77)) | (1 << (PhpParser.Protected - 77)) | (1 << (PhpParser.Public - 77)) | (1 << (PhpParser.Readonly - 77)) | (1 << (PhpParser.Static - 77)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MagicConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace__(self):
            return self.getToken(PhpParser.Namespace__, 0)

        def Class__(self):
            return self.getToken(PhpParser.Class__, 0)

        def Traic__(self):
            return self.getToken(PhpParser.Traic__, 0)

        def Function__(self):
            return self.getToken(PhpParser.Function__, 0)

        def Method__(self):
            return self.getToken(PhpParser.Method__, 0)

        def Line__(self):
            return self.getToken(PhpParser.Line__, 0)

        def File__(self):
            return self.getToken(PhpParser.File__, 0)

        def Dir__(self):
            return self.getToken(PhpParser.Dir__, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_magicConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMagicConstant" ):
                listener.enterMagicConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMagicConstant" ):
                listener.exitMagicConstant(self)




    def magicConstant(self):

        localctx = PhpParser.MagicConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_magicConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1938
            _la = self._input.LA(1)
            if not(((((_la - 153)) & ~0x3f) == 0 and ((1 << (_la - 153)) & ((1 << (PhpParser.Namespace__ - 153)) | (1 << (PhpParser.Class__ - 153)) | (1 << (PhpParser.Traic__ - 153)) | (1 << (PhpParser.Function__ - 153)) | (1 << (PhpParser.Method__ - 153)) | (1 << (PhpParser.Line__ - 153)) | (1 << (PhpParser.File__ - 153)) | (1 << (PhpParser.Dir__ - 153)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MagicMethodContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Get(self):
            return self.getToken(PhpParser.Get, 0)

        def Set(self):
            return self.getToken(PhpParser.Set, 0)

        def Call(self):
            return self.getToken(PhpParser.Call, 0)

        def CallStatic(self):
            return self.getToken(PhpParser.CallStatic, 0)

        def Constructor(self):
            return self.getToken(PhpParser.Constructor, 0)

        def Destruct(self):
            return self.getToken(PhpParser.Destruct, 0)

        def Wakeup(self):
            return self.getToken(PhpParser.Wakeup, 0)

        def Sleep(self):
            return self.getToken(PhpParser.Sleep, 0)

        def Autoload(self):
            return self.getToken(PhpParser.Autoload, 0)

        def IsSet__(self):
            return self.getToken(PhpParser.IsSet__, 0)

        def Unset__(self):
            return self.getToken(PhpParser.Unset__, 0)

        def ToString__(self):
            return self.getToken(PhpParser.ToString__, 0)

        def Invoke(self):
            return self.getToken(PhpParser.Invoke, 0)

        def SetState(self):
            return self.getToken(PhpParser.SetState, 0)

        def Clone__(self):
            return self.getToken(PhpParser.Clone__, 0)

        def DebugInfo(self):
            return self.getToken(PhpParser.DebugInfo, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_magicMethod

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMagicMethod" ):
                listener.enterMagicMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMagicMethod" ):
                listener.exitMagicMethod(self)




    def magicMethod(self):

        localctx = PhpParser.MagicMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_magicMethod)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1940
            _la = self._input.LA(1)
            if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (PhpParser.Get - 137)) | (1 << (PhpParser.Set - 137)) | (1 << (PhpParser.Call - 137)) | (1 << (PhpParser.CallStatic - 137)) | (1 << (PhpParser.Constructor - 137)) | (1 << (PhpParser.Destruct - 137)) | (1 << (PhpParser.Wakeup - 137)) | (1 << (PhpParser.Sleep - 137)) | (1 << (PhpParser.Autoload - 137)) | (1 << (PhpParser.IsSet__ - 137)) | (1 << (PhpParser.Unset__ - 137)) | (1 << (PhpParser.ToString__ - 137)) | (1 << (PhpParser.Invoke - 137)) | (1 << (PhpParser.SetState - 137)) | (1 << (PhpParser.Clone__ - 137)) | (1 << (PhpParser.DebugInfo - 137)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimitiveTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BoolType(self):
            return self.getToken(PhpParser.BoolType, 0)

        def IntType(self):
            return self.getToken(PhpParser.IntType, 0)

        def Int64Type(self):
            return self.getToken(PhpParser.Int64Type, 0)

        def DoubleType(self):
            return self.getToken(PhpParser.DoubleType, 0)

        def StringType(self):
            return self.getToken(PhpParser.StringType, 0)

        def Resource(self):
            return self.getToken(PhpParser.Resource, 0)

        def ObjectType(self):
            return self.getToken(PhpParser.ObjectType, 0)

        def Array(self):
            return self.getToken(PhpParser.Array, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = PhpParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1942
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PhpParser.Array) | (1 << PhpParser.BoolType) | (1 << PhpParser.DoubleType))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (PhpParser.Int64Type - 94)) | (1 << (PhpParser.IntType - 94)) | (1 << (PhpParser.ObjectType - 94)) | (1 << (PhpParser.Resource - 94)) | (1 << (PhpParser.StringType - 94)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BoolType(self):
            return self.getToken(PhpParser.BoolType, 0)

        def Int8Cast(self):
            return self.getToken(PhpParser.Int8Cast, 0)

        def Int16Cast(self):
            return self.getToken(PhpParser.Int16Cast, 0)

        def IntType(self):
            return self.getToken(PhpParser.IntType, 0)

        def Int64Type(self):
            return self.getToken(PhpParser.Int64Type, 0)

        def UintCast(self):
            return self.getToken(PhpParser.UintCast, 0)

        def DoubleCast(self):
            return self.getToken(PhpParser.DoubleCast, 0)

        def DoubleType(self):
            return self.getToken(PhpParser.DoubleType, 0)

        def FloatCast(self):
            return self.getToken(PhpParser.FloatCast, 0)

        def StringType(self):
            return self.getToken(PhpParser.StringType, 0)

        def BinaryCast(self):
            return self.getToken(PhpParser.BinaryCast, 0)

        def UnicodeCast(self):
            return self.getToken(PhpParser.UnicodeCast, 0)

        def Array(self):
            return self.getToken(PhpParser.Array, 0)

        def ObjectType(self):
            return self.getToken(PhpParser.ObjectType, 0)

        def Resource(self):
            return self.getToken(PhpParser.Resource, 0)

        def Unset(self):
            return self.getToken(PhpParser.Unset, 0)

        def getRuleIndex(self):
            return PhpParser.RULE_castOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastOperation" ):
                listener.enterCastOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastOperation" ):
                listener.exitCastOperation(self)




    def castOperation(self):

        localctx = PhpParser.CastOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_castOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1944
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PhpParser.Array) | (1 << PhpParser.BinaryCast) | (1 << PhpParser.BoolType) | (1 << PhpParser.DoubleCast) | (1 << PhpParser.DoubleType))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (PhpParser.FloatCast - 79)) | (1 << (PhpParser.Int8Cast - 79)) | (1 << (PhpParser.Int16Cast - 79)) | (1 << (PhpParser.Int64Type - 79)) | (1 << (PhpParser.IntType - 79)) | (1 << (PhpParser.ObjectType - 79)) | (1 << (PhpParser.Resource - 79)) | (1 << (PhpParser.StringType - 79)) | (1 << (PhpParser.UintCast - 79)) | (1 << (PhpParser.UnicodeCast - 79)) | (1 << (PhpParser.Unset - 79)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[59] = self.typeHint_sempred
        self._predicates[82] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeHint_sempred(self, localctx:TypeHintContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 21)
         




